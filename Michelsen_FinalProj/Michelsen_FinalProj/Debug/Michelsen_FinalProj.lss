
Michelsen_FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000248e  00002522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000248e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000107  00800132  00800132  00002554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c70  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  00005300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001044  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00006f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8c  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b3  00000000  00000000  00007cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00009277  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__ctors_end>
       4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__vector_11>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      38:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      54:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	a4 d0       	rcall	.+328    	; 0x1b2 <_ZL4sine+0xca>
      6a:	82 43       	sbci	r24, 0x32	; 50
      6c:	7b d4       	rcall	.+2294   	; 0x964 <__stack+0x65>
      6e:	92 43       	sbci	r25, 0x32	; 50
      70:	a4 d0       	rcall	.+328    	; 0x1ba <_ZL4sine+0xd2>
      72:	a4 43       	sbci	r26, 0x34	; 52
      74:	71 9d       	mul	r23, r1
      76:	ae 43       	sbci	r26, 0x3E	; 62
      78:	00 00       	nop
      7a:	c4 43       	sbci	r28, 0x34	; 52
      7c:	00 00       	nop
      7e:	dc 43       	sbci	r29, 0x3C	; 60
      80:	a4 f0       	brlt	.+40     	; 0xaa <__trampolines_end+0x42>
      82:	f6 43       	sbci	r31, 0x36	; 54
      84:	00 d0       	rcall	.+0      	; 0x86 <__trampolines_end+0x1e>
      86:	02 44       	sbci	r16, 0x42	; 66
      88:	00 00       	nop
      8a:	5c 43       	sbci	r21, 0x3C	; 60
      8c:	a4 f0       	brlt	.+40     	; 0xb6 <__trampolines_end+0x4e>
      8e:	76 43       	sbci	r23, 0x36	; 54
      90:	a4 d0       	rcall	.+328    	; 0x1da <_ZL4sine+0xf2>
      92:	82 43       	sbci	r24, 0x32	; 50
      94:	7b d4       	rcall	.+2294   	; 0x98c <__stack+0x8d>
      96:	92 43       	sbci	r25, 0x32	; 50
      98:	a4 d0       	rcall	.+328    	; 0x1e2 <_ZL4sine+0xfa>
      9a:	a4 43       	sbci	r26, 0x34	; 52
      9c:	71 9d       	mul	r23, r1
      9e:	ae 43       	sbci	r26, 0x3E	; 62
      a0:	00 00       	nop
      a2:	c4 43       	sbci	r28, 0x34	; 52
      a4:	00 00       	nop
      a6:	dc 43       	sbci	r29, 0x3C	; 60
      a8:	7b d4       	rcall	.+2294   	; 0x9a0 <__stack+0xa1>
      aa:	92 43       	sbci	r25, 0x32	; 50
      ac:	a4 d0       	rcall	.+328    	; 0x1f6 <__do_copy_data>
      ae:	a4 43       	sbci	r26, 0x34	; 52
      b0:	b8 fe       	.word	0xfeb8	; ????
      b2:	b8 43       	sbci	r27, 0x38	; 56
      b4:	00 00       	nop
      b6:	c4 43       	sbci	r28, 0x34	; 52
      b8:	00 00       	nop
      ba:	dc 43       	sbci	r29, 0x3C	; 60
      bc:	a4 f0       	brlt	.+40     	; 0xe6 <__trampolines_end+0x7e>
      be:	f6 43       	sbci	r31, 0x36	; 54
      c0:	ae 97       	sbiw	r28, 0x2e	; 46
      c2:	0a 44       	sbci	r16, 0x4A	; 74
      c4:	1f d5       	rcall	.+2622   	; 0xb04 <_Z7oscTickii+0x7a>
      c6:	12 44       	sbci	r17, 0x42	; 66
      c8:	00 00       	nop
      ca:	c4 43       	sbci	r28, 0x34	; 52
      cc:	00 00       	nop
      ce:	dc 43       	sbci	r29, 0x3C	; 60
      d0:	a4 f0       	brlt	.+40     	; 0xfa <_ZL4sine+0x12>
      d2:	f6 43       	sbci	r31, 0x36	; 54
      d4:	00 d0       	rcall	.+0      	; 0xd6 <__trampolines_end+0x6e>
      d6:	02 44       	sbci	r16, 0x42	; 66
      d8:	1f d5       	rcall	.+2622   	; 0xb18 <_Z7oscTickii+0x8e>
      da:	12 44       	sbci	r17, 0x42	; 66
      dc:	00 d0       	rcall	.+0      	; 0xde <__trampolines_end+0x76>
      de:	24 44       	sbci	r18, 0x44	; 68
      e0:	5c ff       	.word	0xff5c	; ????
      e2:	38 44       	sbci	r19, 0x48	; 72
      e4:	5c ff       	.word	0xff5c	; ????
      e6:	43 44       	sbci	r20, 0x43	; 67

000000e8 <_ZL4sine>:
      e8:	80 83 86 89 8c 8f 92 95 98 9b 9e a2 a5 a7 aa ad     ................
      f8:	b0 b3 b6 b9 bc be c1 c4 c6 c9 cb ce d0 d3 d5 d7     ................
     108:	da dc de e0 e2 e4 e6 e8 ea eb ed ee f0 f1 f3 f4     ................
     118:	f5 f6 f8 f9 fa fa fb fc fd fd fe fe fe ff ff ff     ................
     128:	ff ff ff ff fe fe fe fd fd fc fb fa fa f9 f8 f6     ................
     138:	f5 f4 f3 f1 f0 ee ed eb ea e8 e6 e4 e2 e0 de dc     ................
     148:	da d7 d5 d3 d0 ce cb c9 c6 c4 c1 be bc b9 b6 b3     ................
     158:	b0 ad aa a7 a5 a2 9e 9b 98 95 92 8f 8c 89 86 83     ................
     168:	80 7c 79 76 73 70 6d 6a 67 64 61 5d 5a 58 55 52     .|yvspmjgda]ZXUR
     178:	4f 4c 49 46 43 41 3e 3b 39 36 34 31 2f 2c 2a 28     OLIFCA>;9641/,*(
     188:	25 23 21 1f 1d 1b 19 17 15 14 12 11 0f 0e 0c 0b     %#!.............
     198:	0a 09 07 06 05 05 04 03 02 02 01 01 01 00 00 00     ................
     1a8:	00 00 00 00 01 01 01 02 02 03 04 05 05 06 07 09     ................
     1b8:	0a 0b 0c 0e 0f 11 12 14 15 17 19 1b 1d 1f 21 23     ..............!#
     1c8:	25 28 2a 2c 2f 31 34 36 39 3b 3e 41 43 46 49 4c     %(*,/1469;>ACFIL
     1d8:	4f 52 55 58 5a 5d 61 64 67 6a 6d 70 73 76 79 7c     ORUXZ]adgjmpsvy|

000001e8 <__ctors_start>:
     1e8:	a3 0e       	add	r10, r19

000001ea <__ctors_end>:
     1ea:	11 24       	eor	r1, r1
     1ec:	1f be       	out	0x3f, r1	; 63
     1ee:	cf ef       	ldi	r28, 0xFF	; 255
     1f0:	d8 e0       	ldi	r29, 0x08	; 8
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	cd bf       	out	0x3d, r28	; 61

000001f6 <__do_copy_data>:
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	ee e8       	ldi	r30, 0x8E	; 142
     1fe:	f4 e2       	ldi	r31, 0x24	; 36
     200:	02 c0       	rjmp	.+4      	; 0x206 <__do_copy_data+0x10>
     202:	05 90       	lpm	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	a2 33       	cpi	r26, 0x32	; 50
     208:	b1 07       	cpc	r27, r17
     20a:	d9 f7       	brne	.-10     	; 0x202 <__do_copy_data+0xc>

0000020c <__do_clear_bss>:
     20c:	22 e0       	ldi	r18, 0x02	; 2
     20e:	a2 e3       	ldi	r26, 0x32	; 50
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	a9 33       	cpi	r26, 0x39	; 57
     218:	b2 07       	cpc	r27, r18
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>

0000021c <__do_global_ctors>:
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	c5 ef       	ldi	r28, 0xF5	; 245
     220:	d0 e0       	ldi	r29, 0x00	; 0
     222:	04 c0       	rjmp	.+8      	; 0x22c <__do_global_ctors+0x10>
     224:	21 97       	sbiw	r28, 0x01	; 1
     226:	fe 01       	movw	r30, r28
     228:	0e 94 3f 12 	call	0x247e	; 0x247e <__tablejump2__>
     22c:	c4 3f       	cpi	r28, 0xF4	; 244
     22e:	d1 07       	cpc	r29, r17
     230:	c9 f7       	brne	.-14     	; 0x224 <__do_global_ctors+0x8>
     232:	0e 94 08 03 	call	0x610	; 0x610 <main>
     236:	0c 94 45 12 	jmp	0x248a	; 0x248a <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <_ZN23AscendingRampOscillator4tickEv>:

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
}
     23e:	fc 01       	movw	r30, r24
     240:	42 89       	ldd	r20, Z+18	; 0x12
     242:	53 89       	ldd	r21, Z+19	; 0x13
     244:	64 89       	ldd	r22, Z+20	; 0x14
     246:	75 89       	ldd	r23, Z+21	; 0x15
     248:	86 85       	ldd	r24, Z+14	; 0x0e
     24a:	97 85       	ldd	r25, Z+15	; 0x0f
     24c:	a0 89       	ldd	r26, Z+16	; 0x10
     24e:	b1 89       	ldd	r27, Z+17	; 0x11
     250:	84 0f       	add	r24, r20
     252:	95 1f       	adc	r25, r21
     254:	a6 1f       	adc	r26, r22
     256:	b7 1f       	adc	r27, r23
     258:	86 87       	std	Z+14, r24	; 0x0e
     25a:	97 87       	std	Z+15, r25	; 0x0f
     25c:	a0 8b       	std	Z+16, r26	; 0x10
     25e:	b1 8b       	std	Z+17, r27	; 0x11
     260:	86 85       	ldd	r24, Z+14	; 0x0e
     262:	97 85       	ldd	r25, Z+15	; 0x0f
     264:	a0 89       	ldd	r26, Z+16	; 0x10
     266:	b1 89       	ldd	r27, Z+17	; 0x11
     268:	8b 2f       	mov	r24, r27
     26a:	08 95       	ret

0000026c <_ZN24DescedningRampOscillator4tickEv>:
     26c:	fc 01       	movw	r30, r24
     26e:	42 89       	ldd	r20, Z+18	; 0x12
     270:	53 89       	ldd	r21, Z+19	; 0x13
     272:	64 89       	ldd	r22, Z+20	; 0x14
     274:	75 89       	ldd	r23, Z+21	; 0x15
     276:	86 85       	ldd	r24, Z+14	; 0x0e
     278:	97 85       	ldd	r25, Z+15	; 0x0f
     27a:	a0 89       	ldd	r26, Z+16	; 0x10
     27c:	b1 89       	ldd	r27, Z+17	; 0x11
     27e:	84 0f       	add	r24, r20
     280:	95 1f       	adc	r25, r21
     282:	a6 1f       	adc	r26, r22
     284:	b7 1f       	adc	r27, r23
     286:	86 87       	std	Z+14, r24	; 0x0e
     288:	97 87       	std	Z+15, r25	; 0x0f
     28a:	a0 8b       	std	Z+16, r26	; 0x10
     28c:	b1 8b       	std	Z+17, r27	; 0x11
     28e:	86 85       	ldd	r24, Z+14	; 0x0e
     290:	97 85       	ldd	r25, Z+15	; 0x0f
     292:	a0 89       	ldd	r26, Z+16	; 0x10
     294:	b1 89       	ldd	r27, Z+17	; 0x11
     296:	46 85       	ldd	r20, Z+14	; 0x0e
     298:	57 85       	ldd	r21, Z+15	; 0x0f
     29a:	60 89       	ldd	r22, Z+16	; 0x10
     29c:	71 89       	ldd	r23, Z+17	; 0x11
     29e:	82 85       	ldd	r24, Z+10	; 0x0a
     2a0:	93 85       	ldd	r25, Z+11	; 0x0b
     2a2:	a4 85       	ldd	r26, Z+12	; 0x0c
     2a4:	b5 85       	ldd	r27, Z+13	; 0x0d
     2a6:	84 1b       	sub	r24, r20
     2a8:	95 0b       	sbc	r25, r21
     2aa:	a6 0b       	sbc	r26, r22
     2ac:	b7 0b       	sbc	r27, r23
     2ae:	8b 2f       	mov	r24, r27
     2b0:	08 95       	ret

000002b2 <_ZN13PWMOscillator4tickEv>:
     2b2:	fc 01       	movw	r30, r24
     2b4:	42 89       	ldd	r20, Z+18	; 0x12
     2b6:	53 89       	ldd	r21, Z+19	; 0x13
     2b8:	64 89       	ldd	r22, Z+20	; 0x14
     2ba:	75 89       	ldd	r23, Z+21	; 0x15
     2bc:	86 85       	ldd	r24, Z+14	; 0x0e
     2be:	97 85       	ldd	r25, Z+15	; 0x0f
     2c0:	a0 89       	ldd	r26, Z+16	; 0x10
     2c2:	b1 89       	ldd	r27, Z+17	; 0x11
     2c4:	84 0f       	add	r24, r20
     2c6:	95 1f       	adc	r25, r21
     2c8:	a6 1f       	adc	r26, r22
     2ca:	b7 1f       	adc	r27, r23
     2cc:	86 87       	std	Z+14, r24	; 0x0e
     2ce:	97 87       	std	Z+15, r25	; 0x0f
     2d0:	a0 8b       	std	Z+16, r26	; 0x10
     2d2:	b1 8b       	std	Z+17, r27	; 0x11
     2d4:	86 85       	ldd	r24, Z+14	; 0x0e
     2d6:	97 85       	ldd	r25, Z+15	; 0x0f
     2d8:	a0 89       	ldd	r26, Z+16	; 0x10
     2da:	b1 89       	ldd	r27, Z+17	; 0x11
     2dc:	46 85       	ldd	r20, Z+14	; 0x0e
     2de:	57 85       	ldd	r21, Z+15	; 0x0f
     2e0:	60 89       	ldd	r22, Z+16	; 0x10
     2e2:	71 89       	ldd	r23, Z+17	; 0x11
     2e4:	86 89       	ldd	r24, Z+22	; 0x16
     2e6:	97 89       	ldd	r25, Z+23	; 0x17
     2e8:	a0 8d       	ldd	r26, Z+24	; 0x18
     2ea:	b1 8d       	ldd	r27, Z+25	; 0x19
     2ec:	48 17       	cp	r20, r24
     2ee:	59 07       	cpc	r21, r25
     2f0:	6a 07       	cpc	r22, r26
     2f2:	7b 07       	cpc	r23, r27
     2f4:	10 f4       	brcc	.+4      	; 0x2fa <_ZN13PWMOscillator4tickEv+0x48>
     2f6:	85 85       	ldd	r24, Z+13	; 0x0d
     2f8:	08 95       	ret
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	08 95       	ret

000002fe <_ZN18TriangleOscillator4tickEv>:
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	fc 01       	movw	r30, r24
     304:	42 89       	ldd	r20, Z+18	; 0x12
     306:	53 89       	ldd	r21, Z+19	; 0x13
     308:	64 89       	ldd	r22, Z+20	; 0x14
     30a:	75 89       	ldd	r23, Z+21	; 0x15
     30c:	86 85       	ldd	r24, Z+14	; 0x0e
     30e:	97 85       	ldd	r25, Z+15	; 0x0f
     310:	a0 89       	ldd	r26, Z+16	; 0x10
     312:	b1 89       	ldd	r27, Z+17	; 0x11
     314:	84 0f       	add	r24, r20
     316:	95 1f       	adc	r25, r21
     318:	a6 1f       	adc	r26, r22
     31a:	b7 1f       	adc	r27, r23
     31c:	86 87       	std	Z+14, r24	; 0x0e
     31e:	97 87       	std	Z+15, r25	; 0x0f
     320:	a0 8b       	std	Z+16, r26	; 0x10
     322:	b1 8b       	std	Z+17, r27	; 0x11
     324:	86 85       	ldd	r24, Z+14	; 0x0e
     326:	97 85       	ldd	r25, Z+15	; 0x0f
     328:	a0 89       	ldd	r26, Z+16	; 0x10
     32a:	b1 89       	ldd	r27, Z+17	; 0x11
     32c:	06 85       	ldd	r16, Z+14	; 0x0e
     32e:	17 85       	ldd	r17, Z+15	; 0x0f
     330:	20 89       	ldd	r18, Z+16	; 0x10
     332:	31 89       	ldd	r19, Z+17	; 0x11
     334:	82 85       	ldd	r24, Z+10	; 0x0a
     336:	93 85       	ldd	r25, Z+11	; 0x0b
     338:	a4 85       	ldd	r26, Z+12	; 0x0c
     33a:	b5 85       	ldd	r27, Z+13	; 0x0d
     33c:	ac 01       	movw	r20, r24
     33e:	bd 01       	movw	r22, r26
     340:	76 95       	lsr	r23
     342:	67 95       	ror	r22
     344:	57 95       	ror	r21
     346:	47 95       	ror	r20
     348:	40 17       	cp	r20, r16
     34a:	51 07       	cpc	r21, r17
     34c:	62 07       	cpc	r22, r18
     34e:	73 07       	cpc	r23, r19
     350:	68 f0       	brcs	.+26     	; 0x36c <_ZN18TriangleOscillator4tickEv+0x6e>
     352:	86 85       	ldd	r24, Z+14	; 0x0e
     354:	97 85       	ldd	r25, Z+15	; 0x0f
     356:	a0 89       	ldd	r26, Z+16	; 0x10
     358:	b1 89       	ldd	r27, Z+17	; 0x11
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	aa 1f       	adc	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	86 8b       	std	Z+22, r24	; 0x16
     364:	97 8b       	std	Z+23, r25	; 0x17
     366:	a0 8f       	std	Z+24, r26	; 0x18
     368:	b1 8f       	std	Z+25, r27	; 0x19
     36a:	10 c0       	rjmp	.+32     	; 0x38c <_ZN18TriangleOscillator4tickEv+0x8e>
     36c:	46 85       	ldd	r20, Z+14	; 0x0e
     36e:	57 85       	ldd	r21, Z+15	; 0x0f
     370:	60 89       	ldd	r22, Z+16	; 0x10
     372:	71 89       	ldd	r23, Z+17	; 0x11
     374:	84 1b       	sub	r24, r20
     376:	95 0b       	sbc	r25, r21
     378:	a6 0b       	sbc	r26, r22
     37a:	b7 0b       	sbc	r27, r23
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	aa 1f       	adc	r26, r26
     382:	bb 1f       	adc	r27, r27
     384:	86 8b       	std	Z+22, r24	; 0x16
     386:	97 8b       	std	Z+23, r25	; 0x17
     388:	a0 8f       	std	Z+24, r26	; 0x18
     38a:	b1 8f       	std	Z+25, r27	; 0x19
     38c:	81 8d       	ldd	r24, Z+25	; 0x19
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <_ZN14SineOscillator4tickEv>:
     394:	fc 01       	movw	r30, r24
     396:	42 89       	ldd	r20, Z+18	; 0x12
     398:	53 89       	ldd	r21, Z+19	; 0x13
     39a:	64 89       	ldd	r22, Z+20	; 0x14
     39c:	75 89       	ldd	r23, Z+21	; 0x15
     39e:	86 85       	ldd	r24, Z+14	; 0x0e
     3a0:	97 85       	ldd	r25, Z+15	; 0x0f
     3a2:	a0 89       	ldd	r26, Z+16	; 0x10
     3a4:	b1 89       	ldd	r27, Z+17	; 0x11
     3a6:	84 0f       	add	r24, r20
     3a8:	95 1f       	adc	r25, r21
     3aa:	a6 1f       	adc	r26, r22
     3ac:	b7 1f       	adc	r27, r23
     3ae:	86 87       	std	Z+14, r24	; 0x0e
     3b0:	97 87       	std	Z+15, r25	; 0x0f
     3b2:	a0 8b       	std	Z+16, r26	; 0x10
     3b4:	b1 8b       	std	Z+17, r27	; 0x11
     3b6:	86 85       	ldd	r24, Z+14	; 0x0e
     3b8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ba:	a0 89       	ldd	r26, Z+16	; 0x10
     3bc:	b1 89       	ldd	r27, Z+17	; 0x11
     3be:	eb 2f       	mov	r30, r27
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	e8 51       	subi	r30, 0x18	; 24
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	84 91       	lpm	r24, Z
     3c8:	08 95       	ret

000003ca <_ZN18TriangleOscillator7setFreqEj>:
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
     3d8:	ab 01       	movw	r20, r22
     3da:	bc 01       	movw	r22, r24
     3dc:	ce 01       	movw	r24, r28
     3de:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     3e2:	1e 8a       	std	Y+22, r1	; 0x16
     3e4:	1f 8a       	std	Y+23, r1	; 0x17
     3e6:	18 8e       	std	Y+24, r1	; 0x18
     3e8:	19 8e       	std	Y+25, r1	; 0x19
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <_Z10initTimer1v>:
     3f0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     3f4:	e1 e8       	ldi	r30, 0x81	; 129
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	10 82       	st	Z, r1
     3fa:	8f ec       	ldi	r24, 0xCF	; 207
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     402:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     406:	80 81       	ld	r24, Z
     408:	88 60       	ori	r24, 0x08	; 8
     40a:	80 83       	st	Z, r24
     40c:	80 81       	ld	r24, Z
     40e:	81 60       	ori	r24, 0x01	; 1
     410:	80 83       	st	Z, r24
     412:	ef e6       	ldi	r30, 0x6F	; 111
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	82 60       	ori	r24, 0x02	; 2
     41a:	80 83       	st	Z, r24
     41c:	08 95       	ret

0000041e <_Z7shiftInv>:
     41e:	2a 9a       	sbi	0x05, 2	; 5
     420:	28 98       	cbi	0x05, 0	; 5
     422:	8a e1       	ldi	r24, 0x1A	; 26
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <_Z7shiftInv+0x6>
     428:	00 c0       	rjmp	.+0      	; 0x42a <_Z7shiftInv+0xc>
     42a:	28 9a       	sbi	0x05, 0	; 5
     42c:	2a 98       	cbi	0x05, 2	; 5
     42e:	27 e0       	ldi	r18, 0x07	; 7
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	93 b1       	in	r25, 0x03	; 3
     436:	93 fb       	bst	r25, 3
     438:	44 27       	eor	r20, r20
     43a:	40 f9       	bld	r20, 0
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	ba 01       	movw	r22, r20
     440:	02 2e       	mov	r0, r18
     442:	02 c0       	rjmp	.+4      	; 0x448 <_Z7shiftInv+0x2a>
     444:	66 0f       	add	r22, r22
     446:	77 1f       	adc	r23, r23
     448:	0a 94       	dec	r0
     44a:	e2 f7       	brpl	.-8      	; 0x444 <_Z7shiftInv+0x26>
     44c:	86 2b       	or	r24, r22
     44e:	29 9a       	sbi	0x05, 1	; 5
     450:	9a e1       	ldi	r25, 0x1A	; 26
     452:	9a 95       	dec	r25
     454:	f1 f7       	brne	.-4      	; 0x452 <_Z7shiftInv+0x34>
     456:	00 c0       	rjmp	.+0      	; 0x458 <_Z7shiftInv+0x3a>
     458:	29 98       	cbi	0x05, 1	; 5
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	31 09       	sbc	r19, r1
     45e:	50 f7       	brcc	.-44     	; 0x434 <_Z7shiftInv+0x16>
     460:	08 95       	ret

00000462 <_Z11adc_read_10i>:

int adc_read_10(int channel)
{
	// Set digital inputs to be off on PORTC
	DIDR0 = 0x3F;
     462:	2f e3       	ldi	r18, 0x3F	; 63
     464:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	
	// Read the proper channel
	if (channel == 0) ADMUX = 0x00; // Channel 0
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	19 f4       	brne	.+6      	; 0x472 <_Z11adc_read_10i+0x10>
     46c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     470:	0e c0       	rjmp	.+28     	; 0x48e <_Z11adc_read_10i+0x2c>
	if (channel == 1) ADMUX = 0x01; // Channel 1
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	91 05       	cpc	r25, r1
     476:	21 f4       	brne	.+8      	; 0x480 <_Z11adc_read_10i+0x1e>
     478:	21 e0       	ldi	r18, 0x01	; 1
     47a:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     47e:	0e c0       	rjmp	.+28     	; 0x49c <_Z11adc_read_10i+0x3a>
	if (channel == 2) ADMUX = 0x02; // Channel 2
     480:	82 30       	cpi	r24, 0x02	; 2
     482:	91 05       	cpc	r25, r1
     484:	21 f4       	brne	.+8      	; 0x48e <_Z11adc_read_10i+0x2c>
     486:	22 e0       	ldi	r18, 0x02	; 2
     488:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     48c:	0e c0       	rjmp	.+28     	; 0x4aa <_Z11adc_read_10i+0x48>
	if (channel == 3) ADMUX = 0x03; // Channel 3
     48e:	83 30       	cpi	r24, 0x03	; 3
     490:	91 05       	cpc	r25, r1
     492:	21 f4       	brne	.+8      	; 0x49c <_Z11adc_read_10i+0x3a>
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     49a:	0c c0       	rjmp	.+24     	; 0x4b4 <_Z11adc_read_10i+0x52>
	if (channel == 4) ADMUX = 0x04; // Channel 4
     49c:	84 30       	cpi	r24, 0x04	; 4
     49e:	91 05       	cpc	r25, r1
     4a0:	21 f4       	brne	.+8      	; 0x4aa <_Z11adc_read_10i+0x48>
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <_Z11adc_read_10i+0x52>
	if (channel == 5) ADMUX = 0x05; // Channel 5
     4aa:	05 97       	sbiw	r24, 0x05	; 5
     4ac:	19 f4       	brne	.+6      	; 0x4b4 <_Z11adc_read_10i+0x52>
     4ae:	85 e0       	ldi	r24, 0x05	; 5
     4b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// Read the analog value
	ADCSRA = ((1<<ADEN) | (1<<ADATE));
     4b4:	ea e7       	ldi	r30, 0x7A	; 122
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 ea       	ldi	r24, 0xA0	; 160
     4ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     4bc:	80 81       	ld	r24, Z
     4be:	80 64       	ori	r24, 0x40	; 64
     4c0:	80 83       	st	Z, r24
	while (ADSC == 1);
	return (ADCL + (256*ADCH));
     4c2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	98 2f       	mov	r25, r24
     4ce:	88 27       	eor	r24, r24
}
     4d0:	82 0f       	add	r24, r18
     4d2:	91 1d       	adc	r25, r1
     4d4:	08 95       	ret

000004d6 <_Z10setOscFreqif>:

// Function to set a given oscillators frequency
void setOscFreq(int oscSelect, float freq)
{
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	6a 01       	movw	r12, r20
     4ea:	7b 01       	movw	r14, r22
	if (oscSelect == osc1)
     4ec:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <osc1>
     4f0:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <osc1+0x1>
     4f4:	08 17       	cp	r16, r24
     4f6:	19 07       	cpc	r17, r25
     4f8:	09 f0       	breq	.+2      	; 0x4fc <_Z10setOscFreqif+0x26>
     4fa:	3f c0       	rjmp	.+126    	; 0x57a <_Z10setOscFreqif+0xa4>
	{
		if (oscSelect == 0)
     4fc:	01 15       	cp	r16, r1
     4fe:	11 05       	cpc	r17, r1
     500:	29 f4       	brne	.+10     	; 0x50c <_Z10setOscFreqif+0x36>
			dRamp1.setFreq(freq);
     502:	83 e2       	ldi	r24, 0x23	; 35
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     50a:	22 c0       	rjmp	.+68     	; 0x550 <_Z10setOscFreqif+0x7a>
		if (oscSelect == 1)
     50c:	01 30       	cpi	r16, 0x01	; 1
     50e:	11 05       	cpc	r17, r1
     510:	29 f4       	brne	.+10     	; 0x51c <_Z10setOscFreqif+0x46>
			aRamp1.setFreq(freq);
     512:	8d e0       	ldi	r24, 0x0D	; 13
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     51a:	24 c0       	rjmp	.+72     	; 0x564 <_Z10setOscFreqif+0x8e>
		if (oscSelect == 2)
     51c:	02 30       	cpi	r16, 0x02	; 2
     51e:	11 05       	cpc	r17, r1
     520:	b9 f4       	brne	.+46     	; 0x550 <_Z10setOscFreqif+0x7a>
	
	// Override base class setFreq to calculate the the triangle wave values
	virtual void setFreq(uint16_t freq)
	{
		// Set base accumulator
		OscillatorBase::setFreq(freq);
     522:	cb 01       	movw	r24, r22
     524:	ba 01       	movw	r22, r20
     526:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
     532:	ab 01       	movw	r20, r22
     534:	bc 01       	movw	r22, r24
     536:	83 ef       	ldi	r24, 0xF3	; 243
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
		
		// Set up triangle accumulator (increments twice as fast as base accumulator)
		m_triangleAcc = 0;
     53e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <triangle1+0x16>
     542:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <triangle1+0x17>
     546:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <triangle1+0x18>
     54a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <triangle1+0x19>
     54e:	57 c0       	rjmp	.+174    	; 0x5fe <_Z10setOscFreqif+0x128>
			triangle1.setFreq(freq);
		if (oscSelect == 3)
     550:	03 30       	cpi	r16, 0x03	; 3
     552:	11 05       	cpc	r17, r1
     554:	39 f4       	brne	.+14     	; 0x564 <_Z10setOscFreqif+0x8e>
			sqWave1.setFreq(freq);
     556:	b7 01       	movw	r22, r14
     558:	a6 01       	movw	r20, r12
     55a:	89 ed       	ldi	r24, 0xD9	; 217
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     562:	4d c0       	rjmp	.+154    	; 0x5fe <_Z10setOscFreqif+0x128>
		if (oscSelect == 4)
     564:	04 30       	cpi	r16, 0x04	; 4
     566:	11 05       	cpc	r17, r1
     568:	09 f0       	breq	.+2      	; 0x56c <_Z10setOscFreqif+0x96>
     56a:	49 c0       	rjmp	.+146    	; 0x5fe <_Z10setOscFreqif+0x128>
			sine1.setFreq(freq);
     56c:	b7 01       	movw	r22, r14
     56e:	a6 01       	movw	r20, r12
     570:	83 ec       	ldi	r24, 0xC3	; 195
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     578:	42 c0       	rjmp	.+132    	; 0x5fe <_Z10setOscFreqif+0x128>
	}
	else if (oscSelect == osc2)
     57a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <osc2>
     57e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <osc2+0x1>
     582:	c8 17       	cp	r28, r24
     584:	d9 07       	cpc	r29, r25
     586:	d9 f5       	brne	.+118    	; 0x5fe <_Z10setOscFreqif+0x128>
	{
		if (oscSelect == 0)
     588:	20 97       	sbiw	r28, 0x00	; 0
     58a:	29 f4       	brne	.+10     	; 0x596 <_Z10setOscFreqif+0xc0>
			dRamp2.setFreq(freq);
     58c:	8d ea       	ldi	r24, 0xAD	; 173
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     594:	22 c0       	rjmp	.+68     	; 0x5da <_Z10setOscFreqif+0x104>
		if (oscSelect == 1)
     596:	c1 30       	cpi	r28, 0x01	; 1
     598:	d1 05       	cpc	r29, r1
     59a:	29 f4       	brne	.+10     	; 0x5a6 <_Z10setOscFreqif+0xd0>
			aRamp2.setFreq(freq);
     59c:	87 e9       	ldi	r24, 0x97	; 151
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     5a4:	24 c0       	rjmp	.+72     	; 0x5ee <_Z10setOscFreqif+0x118>
		if (oscSelect == 2)
     5a6:	c2 30       	cpi	r28, 0x02	; 2
     5a8:	d1 05       	cpc	r29, r1
     5aa:	b9 f4       	brne	.+46     	; 0x5da <_Z10setOscFreqif+0x104>
	
	// Override base class setFreq to calculate the the triangle wave values
	virtual void setFreq(uint16_t freq)
	{
		// Set base accumulator
		OscillatorBase::setFreq(freq);
     5ac:	cb 01       	movw	r24, r22
     5ae:	ba 01       	movw	r22, r20
     5b0:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
     5bc:	ab 01       	movw	r20, r22
     5be:	bc 01       	movw	r22, r24
     5c0:	8d e7       	ldi	r24, 0x7D	; 125
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
		
		// Set up triangle accumulator (increments twice as fast as base accumulator)
		m_triangleAcc = 0;
     5c8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <triangle2+0x16>
     5cc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <triangle2+0x17>
     5d0:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <triangle2+0x18>
     5d4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <triangle2+0x19>
     5d8:	12 c0       	rjmp	.+36     	; 0x5fe <_Z10setOscFreqif+0x128>
			triangle2.setFreq(freq);
		if (oscSelect == 3)
     5da:	c3 30       	cpi	r28, 0x03	; 3
     5dc:	d1 05       	cpc	r29, r1
     5de:	39 f4       	brne	.+14     	; 0x5ee <_Z10setOscFreqif+0x118>
			sqWave2.setFreq(freq);
     5e0:	b7 01       	movw	r22, r14
     5e2:	a6 01       	movw	r20, r12
     5e4:	83 e6       	ldi	r24, 0x63	; 99
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <_Z10setOscFreqif+0x128>
		if (oscSelect == 4)
     5ee:	24 97       	sbiw	r28, 0x04	; 4
     5f0:	31 f4       	brne	.+12     	; 0x5fe <_Z10setOscFreqif+0x128>
			sine2.setFreq(freq);
     5f2:	b7 01       	movw	r22, r14
     5f4:	a6 01       	movw	r20, r12
     5f6:	8d e4       	ldi	r24, 0x4D	; 77
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
	}
	else
	{
		return;
	}
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <main>:
volatile bool audioOn = false; // Variable for tracking if the audio is being played or not

int main(void)
{
	// Setup inputs and outputs
	DDRD |= 0xFF; // Set all of PORTD as outputs
     610:	8a b1       	in	r24, 0x0a	; 10
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	8a b9       	out	0x0a, r24	; 10
	DDRB |= ((1<<DDB2) | (1<<DDB1) | (1<<DDB0)); // Setup outputs for shift register
     616:	84 b1       	in	r24, 0x04	; 4
     618:	87 60       	ori	r24, 0x07	; 7
     61a:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<DDB3); // Setup inputs from shift register
     61c:	23 98       	cbi	0x04, 3	; 4
	
	// Setup timer and global interrupts
	cli();
     61e:	f8 94       	cli
	initTimer1();
     620:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z10initTimer1v>
	sei();
     624:	78 94       	sei
	
	/* Set the sample rate of the oscillators */
	lfo.setSampleRate(SAMPLE);
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e4       	ldi	r23, 0x40	; 64
     62a:	87 e3       	ldi	r24, 0x37	; 55
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	//osc1.setSampleRate(SAMPLE);
	//osc2.setSampleRate(SAMPLE);
	dRamp1.setSampleRate(SAMPLE);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	70 e4       	ldi	r23, 0x40	; 64
     636:	83 e2       	ldi	r24, 0x23	; 35
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	aRamp1.setSampleRate(SAMPLE);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e4       	ldi	r23, 0x40	; 64
     642:	8d e0       	ldi	r24, 0x0D	; 13
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	triangle1.setSampleRate(SAMPLE);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	70 e4       	ldi	r23, 0x40	; 64
     64e:	83 ef       	ldi	r24, 0xF3	; 243
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	sqWave1.setSampleRate(SAMPLE);
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e4       	ldi	r23, 0x40	; 64
     65a:	89 ed       	ldi	r24, 0xD9	; 217
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	sine1.setSampleRate(SAMPLE);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e4       	ldi	r23, 0x40	; 64
     666:	83 ec       	ldi	r24, 0xC3	; 195
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	
	dRamp1.setSampleRate(SAMPLE);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e4       	ldi	r23, 0x40	; 64
     672:	83 e2       	ldi	r24, 0x23	; 35
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	aRamp1.setSampleRate(SAMPLE);
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e4       	ldi	r23, 0x40	; 64
     67e:	8d e0       	ldi	r24, 0x0D	; 13
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	triangle1.setSampleRate(SAMPLE);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e4       	ldi	r23, 0x40	; 64
     68a:	83 ef       	ldi	r24, 0xF3	; 243
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	sqWave1.setSampleRate(SAMPLE);
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e4       	ldi	r23, 0x40	; 64
     696:	89 ed       	ldi	r24, 0xD9	; 217
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	sine1.setSampleRate(SAMPLE);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e4       	ldi	r23, 0x40	; 64
     6a2:	83 ec       	ldi	r24, 0xC3	; 195
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN14OscillatorBase13setSampleRateEj>
	}	
	
	// Set the duty cycle
	void setDutyCycle(float duty)
	{
		m_dutyCycle = duty * m_max32;
     6aa:	c9 ed       	ldi	r28, 0xD9	; 217
     6ac:	d1 e0       	ldi	r29, 0x01	; 1
     6ae:	6a 85       	ldd	r22, Y+10	; 0x0a
     6b0:	7b 85       	ldd	r23, Y+11	; 0x0b
     6b2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6b4:	9d 85       	ldd	r25, Y+13	; 0x0d
     6b6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     6c6:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     6ca:	6e 8b       	std	Y+22, r22	; 0x16
     6cc:	7f 8b       	std	Y+23, r23	; 0x17
     6ce:	88 8f       	std	Y+24, r24	; 0x18
     6d0:	99 8f       	std	Y+25, r25	; 0x19
     6d2:	c3 e6       	ldi	r28, 0x63	; 99
     6d4:	d1 e0       	ldi	r29, 0x01	; 1
     6d6:	6a 85       	ldd	r22, Y+10	; 0x0a
     6d8:	7b 85       	ldd	r23, Y+11	; 0x0b
     6da:	8c 85       	ldd	r24, Y+12	; 0x0c
     6dc:	9d 85       	ldd	r25, Y+13	; 0x0d
     6de:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     6ee:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     6f2:	6e 8b       	std	Y+22, r22	; 0x16
     6f4:	7f 8b       	std	Y+23, r23	; 0x17
     6f6:	88 8f       	std	Y+24, r24	; 0x18
     6f8:	99 8f       	std	Y+25, r25	; 0x19
	
	// Set the duty cycle of the two square wave oscillators
	sqWave1.setDutyCycle(0.5);
	sqWave2.setDutyCycle(0.5);
	
	lfo.setFreq(7); // Set the frequency of the LFO (used for vibrato effect)
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	60 ee       	ldi	r22, 0xE0	; 224
     700:	70 e4       	ldi	r23, 0x40	; 64
     702:	87 e3       	ldi	r24, 0x37	; 55
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN14OscillatorBase7setFreqEf>
	
	// Declare local variables
	float oscNote = 0; // Variable for tracking the note to be played
     70a:	b1 2c       	mov	r11, r1
     70c:	a1 2c       	mov	r10, r1
     70e:	91 2c       	mov	r9, r1
     710:	81 2c       	mov	r8, r1
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     712:	c7 e3       	ldi	r28, 0x37	; 55
     714:	d1 e0       	ldi	r29, 0x01	; 1
			//osc2.setFreq(oscNote*2 + lfoTick);
			setOscFreq(osc1, (oscNote + lfoTick));
			setOscFreq(osc2, (oscNote*2 + lfoTick));
			
			// Set the audio on to true
			audioOn = true;
     716:	77 24       	eor	r7, r7
     718:	73 94       	inc	r7
	
    // Run infinitely
    while (1) 
    {
		// Read the key selector
		keySelector = _map(adc_read_10(0), 0, 1023, 0, 4);
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	8f e3       	ldi	r24, 0x3F	; 63
     724:	9c e9       	ldi	r25, 0x9C	; 156
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <main+0x116>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <main+0x11c>
     72c:	00 00       	nop
		_delay_ms(10);
		keySelector = _map(adc_read_10(0), 0, 1023, 0, 4);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
     736:	7c 01       	movw	r14, r24
		
		// Read the oscillator selectors
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
}

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
     740:	bc 01       	movw	r22, r24
     742:	99 0f       	add	r25, r25
     744:	88 0b       	sbc	r24, r24
     746:	99 0b       	sbc	r25, r25
     748:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     74c:	2a e0       	ldi	r18, 0x0A	; 10
     74e:	38 e2       	ldi	r19, 0x28	; 40
     750:	40 ea       	ldi	r20, 0xA0	; 160
     752:	5b e3       	ldi	r21, 0x3B	; 59
     754:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	a9 01       	movw	r20, r18
     75e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     762:	0e 94 33 10 	call	0x2066	; 0x2066 <__fixsfsi>
		keySelector = _map(adc_read_10(0), 0, 1023, 0, 4);
		_delay_ms(10);
		keySelector = _map(adc_read_10(0), 0, 1023, 0, 4);
		
		// Read the oscillator selectors
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
     766:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <osc1+0x1>
     76a:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <osc1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76e:	95 e3       	ldi	r25, 0x35	; 53
     770:	9a 95       	dec	r25
     772:	f1 f7       	brne	.-4      	; 0x770 <main+0x160>
     774:	00 00       	nop
		_delay_us(10);
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
}

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
     77e:	bc 01       	movw	r22, r24
     780:	99 0f       	add	r25, r25
     782:	88 0b       	sbc	r24, r24
     784:	99 0b       	sbc	r25, r25
     786:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     78a:	2a e0       	ldi	r18, 0x0A	; 10
     78c:	38 e2       	ldi	r19, 0x28	; 40
     78e:	40 ea       	ldi	r20, 0xA0	; 160
     790:	5b e3       	ldi	r21, 0x3B	; 59
     792:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	a9 01       	movw	r20, r18
     79c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     7a0:	0e 94 33 10 	call	0x2066	; 0x2066 <__fixsfsi>
		keySelector = _map(adc_read_10(0), 0, 1023, 0, 4);
		
		// Read the oscillator selectors
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
		_delay_us(10);
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
     7a4:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <osc1+0x1>
     7a8:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <osc1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ac:	8f e3       	ldi	r24, 0x3F	; 63
     7ae:	9c e9       	ldi	r25, 0x9C	; 156
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <main+0x1a0>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x1a6>
     7b6:	00 00       	nop
		_delay_ms(10);
		osc2 = _map(adc_read_10(2), 0, 1023, 0, 5);
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
}

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
     7c0:	bc 01       	movw	r22, r24
     7c2:	99 0f       	add	r25, r25
     7c4:	88 0b       	sbc	r24, r24
     7c6:	99 0b       	sbc	r25, r25
     7c8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     7cc:	2a e0       	ldi	r18, 0x0A	; 10
     7ce:	38 e2       	ldi	r19, 0x28	; 40
     7d0:	40 ea       	ldi	r20, 0xA0	; 160
     7d2:	5b e3       	ldi	r21, 0x3B	; 59
     7d4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	a9 01       	movw	r20, r18
     7de:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     7e2:	0e 94 33 10 	call	0x2066	; 0x2066 <__fixsfsi>
		// Read the oscillator selectors
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
		_delay_us(10);
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
		_delay_ms(10);
		osc2 = _map(adc_read_10(2), 0, 1023, 0, 5);
     7e6:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <osc2+0x1>
     7ea:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <osc2>
     7ee:	8f e3       	ldi	r24, 0x3F	; 63
     7f0:	9c e9       	ldi	r25, 0x9C	; 156
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <main+0x1e2>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x1e8>
     7f8:	00 00       	nop
		_delay_ms(10);
		osc2 = _map(adc_read_10(2), 0, 1023, 0, 5);
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 31 02 	call	0x462	; 0x462 <_Z11adc_read_10i>
}

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
     802:	bc 01       	movw	r22, r24
     804:	99 0f       	add	r25, r25
     806:	88 0b       	sbc	r24, r24
     808:	99 0b       	sbc	r25, r25
     80a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	38 e2       	ldi	r19, 0x28	; 40
     812:	40 ea       	ldi	r20, 0xA0	; 160
     814:	5b e3       	ldi	r21, 0x3B	; 59
     816:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	a9 01       	movw	r20, r18
     820:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     824:	0e 94 33 10 	call	0x2066	; 0x2066 <__fixsfsi>
		_delay_us(10);
		osc1 = _map(adc_read_10(1), 0, 1023, 0, 5);
		_delay_ms(10);
		osc2 = _map(adc_read_10(2), 0, 1023, 0, 5);
		_delay_ms(10);
		osc2 = _map(adc_read_10(2), 0, 1023, 0, 5);
     828:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <osc2+0x1>
     82c:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <osc2>
				
		// Read the buttons
		buttonByte = shiftIn();
     830:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z7shiftInv>
     834:	18 2f       	mov	r17, r24
		
		// If a button is pressed, play a note
		if (buttonByte != 0)
     836:	88 23       	and	r24, r24
     838:	09 f4       	brne	.+2      	; 0x83c <main+0x22c>
     83a:	12 c1       	rjmp	.+548    	; 0xa60 <__stack+0x161>
}

// Function to map one numeric range to another
int _map(int input, int x1, int x2, int y1, int y2)
{
	return ((input - x1)*((float)(y2-y1)/(x2-x1))+y1);
     83c:	b7 01       	movw	r22, r14
     83e:	ff 0c       	add	r15, r15
     840:	88 0b       	sbc	r24, r24
     842:	99 0b       	sbc	r25, r25
     844:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     848:	28 e0       	ldi	r18, 0x08	; 8
     84a:	30 e2       	ldi	r19, 0x20	; 32
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5b e3       	ldi	r21, 0x3B	; 59
     850:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	a9 01       	movw	r20, r18
     85a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     85e:	0e 94 33 10 	call	0x2066	; 0x2066 <__fixsfsi>
		
		// If a button is pressed, play a note
		if (buttonByte != 0)
		{
			// Select the note based on the button pressed
			if (buttonByte & 0b00000001)
     862:	10 ff       	sbrs	r17, 0
     864:	13 c0       	rjmp	.+38     	; 0x88c <main+0x27c>
				oscNote = pgm_read_float_near(&(scales[keySelector][0]));
     866:	fb 01       	movw	r30, r22
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e2 95       	swap	r30
     86e:	f2 95       	swap	r31
     870:	f0 7f       	andi	r31, 0xF0	; 240
     872:	fe 27       	eor	r31, r30
     874:	e0 7f       	andi	r30, 0xF0	; 240
     876:	fe 27       	eor	r31, r30
     878:	e8 59       	subi	r30, 0x98	; 152
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	c5 90       	lpm	r12, Z+
     87e:	d5 90       	lpm	r13, Z+
     880:	e5 90       	lpm	r14, Z+
     882:	f4 90       	lpm	r15, Z
     884:	bc 2c       	mov	r11, r12
     886:	ad 2c       	mov	r10, r13
     888:	9e 2c       	mov	r9, r14
     88a:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b00000010)
     88c:	11 ff       	sbrs	r17, 1
     88e:	13 c0       	rjmp	.+38     	; 0x8b6 <main+0x2a6>
				oscNote = pgm_read_float_near(&(scales[keySelector][1]));
     890:	fb 01       	movw	r30, r22
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	e2 95       	swap	r30
     898:	f2 95       	swap	r31
     89a:	f0 7f       	andi	r31, 0xF0	; 240
     89c:	fe 27       	eor	r31, r30
     89e:	e0 7f       	andi	r30, 0xF0	; 240
     8a0:	fe 27       	eor	r31, r30
     8a2:	e4 59       	subi	r30, 0x94	; 148
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	c5 90       	lpm	r12, Z+
     8a8:	d5 90       	lpm	r13, Z+
     8aa:	e5 90       	lpm	r14, Z+
     8ac:	f4 90       	lpm	r15, Z
     8ae:	bc 2c       	mov	r11, r12
     8b0:	ad 2c       	mov	r10, r13
     8b2:	9e 2c       	mov	r9, r14
     8b4:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b00000100)
     8b6:	12 ff       	sbrs	r17, 2
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <main+0x2d0>
				oscNote = pgm_read_float_near(&(scales[keySelector][2]));
     8ba:	fb 01       	movw	r30, r22
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	e2 95       	swap	r30
     8c2:	f2 95       	swap	r31
     8c4:	f0 7f       	andi	r31, 0xF0	; 240
     8c6:	fe 27       	eor	r31, r30
     8c8:	e0 7f       	andi	r30, 0xF0	; 240
     8ca:	fe 27       	eor	r31, r30
     8cc:	e0 59       	subi	r30, 0x90	; 144
     8ce:	ff 4f       	sbci	r31, 0xFF	; 255
     8d0:	c5 90       	lpm	r12, Z+
     8d2:	d5 90       	lpm	r13, Z+
     8d4:	e5 90       	lpm	r14, Z+
     8d6:	f4 90       	lpm	r15, Z
     8d8:	bc 2c       	mov	r11, r12
     8da:	ad 2c       	mov	r10, r13
     8dc:	9e 2c       	mov	r9, r14
     8de:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b00001000)
     8e0:	13 ff       	sbrs	r17, 3
     8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xb>
				oscNote = pgm_read_float_near(&(scales[keySelector][3]));
     8e4:	fb 01       	movw	r30, r22
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	e2 95       	swap	r30
     8ec:	f2 95       	swap	r31
     8ee:	f0 7f       	andi	r31, 0xF0	; 240
     8f0:	fe 27       	eor	r31, r30
     8f2:	e0 7f       	andi	r30, 0xF0	; 240
     8f4:	fe 27       	eor	r31, r30
     8f6:	ec 58       	subi	r30, 0x8C	; 140
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	c5 90       	lpm	r12, Z+
     8fc:	d5 90       	lpm	r13, Z+
     8fe:	e5 90       	lpm	r14, Z+
     900:	f4 90       	lpm	r15, Z
     902:	bc 2c       	mov	r11, r12
     904:	ad 2c       	mov	r10, r13
     906:	9e 2c       	mov	r9, r14
     908:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b00010000)
     90a:	14 ff       	sbrs	r17, 4
     90c:	13 c0       	rjmp	.+38     	; 0x934 <__stack+0x35>
				oscNote = pgm_read_float_near(&(scales[keySelector][4]));
     90e:	fb 01       	movw	r30, r22
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e2 95       	swap	r30
     916:	f2 95       	swap	r31
     918:	f0 7f       	andi	r31, 0xF0	; 240
     91a:	fe 27       	eor	r31, r30
     91c:	e0 7f       	andi	r30, 0xF0	; 240
     91e:	fe 27       	eor	r31, r30
     920:	e8 58       	subi	r30, 0x88	; 136
     922:	ff 4f       	sbci	r31, 0xFF	; 255
     924:	c5 90       	lpm	r12, Z+
     926:	d5 90       	lpm	r13, Z+
     928:	e5 90       	lpm	r14, Z+
     92a:	f4 90       	lpm	r15, Z
     92c:	bc 2c       	mov	r11, r12
     92e:	ad 2c       	mov	r10, r13
     930:	9e 2c       	mov	r9, r14
     932:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b00100000)
     934:	15 ff       	sbrs	r17, 5
     936:	13 c0       	rjmp	.+38     	; 0x95e <__stack+0x5f>
				oscNote = pgm_read_float_near(&(scales[keySelector][5]));
     938:	fb 01       	movw	r30, r22
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e2 95       	swap	r30
     940:	f2 95       	swap	r31
     942:	f0 7f       	andi	r31, 0xF0	; 240
     944:	fe 27       	eor	r31, r30
     946:	e0 7f       	andi	r30, 0xF0	; 240
     948:	fe 27       	eor	r31, r30
     94a:	e4 58       	subi	r30, 0x84	; 132
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	c5 90       	lpm	r12, Z+
     950:	d5 90       	lpm	r13, Z+
     952:	e5 90       	lpm	r14, Z+
     954:	f4 90       	lpm	r15, Z
     956:	bc 2c       	mov	r11, r12
     958:	ad 2c       	mov	r10, r13
     95a:	9e 2c       	mov	r9, r14
     95c:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b01000000)
     95e:	16 ff       	sbrs	r17, 6
     960:	13 c0       	rjmp	.+38     	; 0x988 <__stack+0x89>
				oscNote = pgm_read_float_near(&(scales[keySelector][6]));
     962:	fb 01       	movw	r30, r22
     964:	ee 0f       	add	r30, r30
     966:	ff 1f       	adc	r31, r31
     968:	e2 95       	swap	r30
     96a:	f2 95       	swap	r31
     96c:	f0 7f       	andi	r31, 0xF0	; 240
     96e:	fe 27       	eor	r31, r30
     970:	e0 7f       	andi	r30, 0xF0	; 240
     972:	fe 27       	eor	r31, r30
     974:	e0 58       	subi	r30, 0x80	; 128
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	c5 90       	lpm	r12, Z+
     97a:	d5 90       	lpm	r13, Z+
     97c:	e5 90       	lpm	r14, Z+
     97e:	f4 90       	lpm	r15, Z
     980:	bc 2c       	mov	r11, r12
     982:	ad 2c       	mov	r10, r13
     984:	9e 2c       	mov	r9, r14
     986:	8f 2c       	mov	r8, r15
			if (buttonByte & 0b10000000)
     988:	11 23       	and	r17, r17
     98a:	9c f4       	brge	.+38     	; 0x9b2 <__stack+0xb3>
				oscNote = pgm_read_float_near(&(scales[keySelector][7]));
     98c:	fb 01       	movw	r30, r22
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	e2 95       	swap	r30
     994:	f2 95       	swap	r31
     996:	f0 7f       	andi	r31, 0xF0	; 240
     998:	fe 27       	eor	r31, r30
     99a:	e0 7f       	andi	r30, 0xF0	; 240
     99c:	fe 27       	eor	r31, r30
     99e:	ec 57       	subi	r30, 0x7C	; 124
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	85 91       	lpm	r24, Z+
     9a4:	95 91       	lpm	r25, Z+
     9a6:	a5 91       	lpm	r26, Z+
     9a8:	b4 91       	lpm	r27, Z
     9aa:	b8 2e       	mov	r11, r24
     9ac:	a9 2e       	mov	r10, r25
     9ae:	9a 2e       	mov	r9, r26
     9b0:	8b 2e       	mov	r8, r27
     9b2:	4a 89       	ldd	r20, Y+18	; 0x12
     9b4:	5b 89       	ldd	r21, Y+19	; 0x13
     9b6:	6c 89       	ldd	r22, Y+20	; 0x14
     9b8:	7d 89       	ldd	r23, Y+21	; 0x15
     9ba:	8e 85       	ldd	r24, Y+14	; 0x0e
     9bc:	9f 85       	ldd	r25, Y+15	; 0x0f
     9be:	a8 89       	ldd	r26, Y+16	; 0x10
     9c0:	b9 89       	ldd	r27, Y+17	; 0x11
     9c2:	84 0f       	add	r24, r20
     9c4:	95 1f       	adc	r25, r21
     9c6:	a6 1f       	adc	r26, r22
     9c8:	b7 1f       	adc	r27, r23
     9ca:	8e 87       	std	Y+14, r24	; 0x0e
     9cc:	9f 87       	std	Y+15, r25	; 0x0f
     9ce:	a8 8b       	std	Y+16, r26	; 0x10
     9d0:	b9 8b       	std	Y+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     9d2:	8e 85       	ldd	r24, Y+14	; 0x0e
     9d4:	9f 85       	ldd	r25, Y+15	; 0x0f
     9d6:	a8 89       	ldd	r26, Y+16	; 0x10
     9d8:	b9 89       	ldd	r27, Y+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
     9da:	eb 2f       	mov	r30, r27
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e8 51       	subi	r30, 0x18	; 24
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	e4 91       	lpm	r30, Z
			lfoTick = (lfo.tick() >> 6);
			
			// Set the frequencies of the two oscillators modulated by the LFO
			//osc1.setFreq(oscNote + lfoTick);
			//osc2.setFreq(oscNote*2 + lfoTick);
			setOscFreq(osc1, (oscNote + lfoTick));
     9e4:	6e 2f       	mov	r22, r30
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	fb 01       	movw	r30, r22
     9ea:	0e 2e       	mov	r0, r30
     9ec:	ef 2f       	mov	r30, r31
     9ee:	00 0c       	add	r0, r0
     9f0:	ee 1f       	adc	r30, r30
     9f2:	ff 0b       	sbc	r31, r31
     9f4:	00 0c       	add	r0, r0
     9f6:	ee 1f       	adc	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	bf 01       	movw	r22, r30
     9fc:	ff 0f       	add	r31, r31
     9fe:	88 0b       	sbc	r24, r24
     a00:	99 0b       	sbc	r25, r25
     a02:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__floatsisf>
     a06:	6b 01       	movw	r12, r22
     a08:	7c 01       	movw	r14, r24
     a0a:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <osc1>
     a0e:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <osc1+0x1>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	6b 2d       	mov	r22, r11
     a18:	7a 2d       	mov	r23, r10
     a1a:	89 2d       	mov	r24, r9
     a1c:	98 2d       	mov	r25, r8
     a1e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     a22:	ab 01       	movw	r20, r22
     a24:	bc 01       	movw	r22, r24
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10setOscFreqif>
			setOscFreq(osc2, (oscNote*2 + lfoTick));
     a2c:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <osc2>
     a30:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <osc2+0x1>
     a34:	2b 2d       	mov	r18, r11
     a36:	3a 2d       	mov	r19, r10
     a38:	49 2d       	mov	r20, r9
     a3a:	58 2d       	mov	r21, r8
     a3c:	6b 2d       	mov	r22, r11
     a3e:	7a 2d       	mov	r23, r10
     a40:	89 2d       	mov	r24, r9
     a42:	98 2d       	mov	r25, r8
     a44:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     a48:	a7 01       	movw	r20, r14
     a4a:	96 01       	movw	r18, r12
     a4c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
     a50:	ab 01       	movw	r20, r22
     a52:	bc 01       	movw	r22, r24
     a54:	c8 01       	movw	r24, r16
     a56:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10setOscFreqif>
			
			// Set the audio on to true
			audioOn = true;
     a5a:	70 92 32 01 	sts	0x0132, r7	; 0x800132 <__data_end>
     a5e:	5d ce       	rjmp	.-838    	; 0x71a <main+0x10a>
		else
		{
			// Otherwise, don't play a note
			//osc1.setFreq(0);
			//osc2.setFreq(0);
			setOscFreq(osc1, 0);
     a60:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <osc1>
     a64:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <osc1+0x1>
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	ba 01       	movw	r22, r20
     a6e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10setOscFreqif>
			setOscFreq(osc2, 0);
     a72:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <osc2>
     a76:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <osc2+0x1>
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	ba 01       	movw	r22, r20
     a80:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_Z10setOscFreqif>
			audioOn = false;
     a84:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
     a88:	48 ce       	rjmp	.-880    	; 0x71a <main+0x10a>

00000a8a <_Z7oscTickii>:
	}
}

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
	
	// Select the proper oscillator
	if (oscSelect1 == 0)
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <_Z7oscTickii+0x16>
     a9e:	aa c1       	rjmp	.+852    	; 0xdf4 <_Z7oscTickii+0x36a>
	{
		if (oscSelect2 == 0)
     aa0:	61 15       	cp	r22, r1
     aa2:	71 05       	cpc	r23, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <_Z7oscTickii+0x1e>
     aa6:	4a c0       	rjmp	.+148    	; 0xb3c <_Z7oscTickii+0xb2>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     aa8:	e3 e2       	ldi	r30, 0x23	; 35
     aaa:	f2 e0       	ldi	r31, 0x02	; 2
     aac:	02 89       	ldd	r16, Z+18	; 0x12
     aae:	13 89       	ldd	r17, Z+19	; 0x13
     ab0:	24 89       	ldd	r18, Z+20	; 0x14
     ab2:	35 89       	ldd	r19, Z+21	; 0x15
     ab4:	86 85       	ldd	r24, Z+14	; 0x0e
     ab6:	97 85       	ldd	r25, Z+15	; 0x0f
     ab8:	a0 89       	ldd	r26, Z+16	; 0x10
     aba:	b1 89       	ldd	r27, Z+17	; 0x11
     abc:	80 0f       	add	r24, r16
     abe:	91 1f       	adc	r25, r17
     ac0:	a2 1f       	adc	r26, r18
     ac2:	b3 1f       	adc	r27, r19
     ac4:	86 87       	std	Z+14, r24	; 0x0e
     ac6:	97 87       	std	Z+15, r25	; 0x0f
     ac8:	a0 8b       	std	Z+16, r26	; 0x10
     aca:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     acc:	86 85       	ldd	r24, Z+14	; 0x0e
     ace:	97 85       	ldd	r25, Z+15	; 0x0f
     ad0:	a0 89       	ldd	r26, Z+16	; 0x10
     ad2:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     ad4:	86 85       	ldd	r24, Z+14	; 0x0e
     ad6:	97 85       	ldd	r25, Z+15	; 0x0f
     ad8:	a0 89       	ldd	r26, Z+16	; 0x10
     ada:	b1 89       	ldd	r27, Z+17	; 0x11
     adc:	02 85       	ldd	r16, Z+10	; 0x0a
     ade:	13 85       	ldd	r17, Z+11	; 0x0b
     ae0:	24 85       	ldd	r18, Z+12	; 0x0c
     ae2:	35 85       	ldd	r19, Z+13	; 0x0d
     ae4:	08 1b       	sub	r16, r24
     ae6:	19 0b       	sbc	r17, r25
     ae8:	2a 0b       	sbc	r18, r26
     aea:	3b 0b       	sbc	r19, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     aec:	ed ea       	ldi	r30, 0xAD	; 173
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	c2 88       	ldd	r12, Z+18	; 0x12
     af2:	d3 88       	ldd	r13, Z+19	; 0x13
     af4:	e4 88       	ldd	r14, Z+20	; 0x14
     af6:	f5 88       	ldd	r15, Z+21	; 0x15
     af8:	86 85       	ldd	r24, Z+14	; 0x0e
     afa:	97 85       	ldd	r25, Z+15	; 0x0f
     afc:	a0 89       	ldd	r26, Z+16	; 0x10
     afe:	b1 89       	ldd	r27, Z+17	; 0x11
     b00:	8c 0d       	add	r24, r12
     b02:	9d 1d       	adc	r25, r13
     b04:	ae 1d       	adc	r26, r14
     b06:	bf 1d       	adc	r27, r15
     b08:	86 87       	std	Z+14, r24	; 0x0e
     b0a:	97 87       	std	Z+15, r25	; 0x0f
     b0c:	a0 8b       	std	Z+16, r26	; 0x10
     b0e:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     b10:	86 85       	ldd	r24, Z+14	; 0x0e
     b12:	97 85       	ldd	r25, Z+15	; 0x0f
     b14:	a0 89       	ldd	r26, Z+16	; 0x10
     b16:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     b18:	c6 84       	ldd	r12, Z+14	; 0x0e
     b1a:	d7 84       	ldd	r13, Z+15	; 0x0f
     b1c:	e0 88       	ldd	r14, Z+16	; 0x10
     b1e:	f1 88       	ldd	r15, Z+17	; 0x11
			val = (dRamp1.tick() + (dRamp2.tick() >> 3));
     b20:	82 85       	ldd	r24, Z+10	; 0x0a
     b22:	93 85       	ldd	r25, Z+11	; 0x0b
     b24:	a4 85       	ldd	r26, Z+12	; 0x0c
     b26:	b5 85       	ldd	r27, Z+13	; 0x0d
     b28:	8c 19       	sub	r24, r12
     b2a:	9d 09       	sbc	r25, r13
     b2c:	ae 09       	sbc	r26, r14
     b2e:	bf 09       	sbc	r27, r15
     b30:	8b 2f       	mov	r24, r27
     b32:	86 95       	lsr	r24
     b34:	86 95       	lsr	r24
     b36:	86 95       	lsr	r24
     b38:	83 0f       	add	r24, r19
     b3a:	bc c0       	rjmp	.+376    	; 0xcb4 <_Z7oscTickii+0x22a>
		if (oscSelect2 == 1)
     b3c:	61 30       	cpi	r22, 0x01	; 1
     b3e:	71 05       	cpc	r23, r1
     b40:	f1 f5       	brne	.+124    	; 0xbbe <_Z7oscTickii+0x134>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     b42:	e3 e2       	ldi	r30, 0x23	; 35
     b44:	f2 e0       	ldi	r31, 0x02	; 2
     b46:	02 89       	ldd	r16, Z+18	; 0x12
     b48:	13 89       	ldd	r17, Z+19	; 0x13
     b4a:	24 89       	ldd	r18, Z+20	; 0x14
     b4c:	35 89       	ldd	r19, Z+21	; 0x15
     b4e:	86 85       	ldd	r24, Z+14	; 0x0e
     b50:	97 85       	ldd	r25, Z+15	; 0x0f
     b52:	a0 89       	ldd	r26, Z+16	; 0x10
     b54:	b1 89       	ldd	r27, Z+17	; 0x11
     b56:	80 0f       	add	r24, r16
     b58:	91 1f       	adc	r25, r17
     b5a:	a2 1f       	adc	r26, r18
     b5c:	b3 1f       	adc	r27, r19
     b5e:	86 87       	std	Z+14, r24	; 0x0e
     b60:	97 87       	std	Z+15, r25	; 0x0f
     b62:	a0 8b       	std	Z+16, r26	; 0x10
     b64:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     b66:	86 85       	ldd	r24, Z+14	; 0x0e
     b68:	97 85       	ldd	r25, Z+15	; 0x0f
     b6a:	a0 89       	ldd	r26, Z+16	; 0x10
     b6c:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     b6e:	86 85       	ldd	r24, Z+14	; 0x0e
     b70:	97 85       	ldd	r25, Z+15	; 0x0f
     b72:	a0 89       	ldd	r26, Z+16	; 0x10
     b74:	b1 89       	ldd	r27, Z+17	; 0x11
     b76:	02 85       	ldd	r16, Z+10	; 0x0a
     b78:	13 85       	ldd	r17, Z+11	; 0x0b
     b7a:	24 85       	ldd	r18, Z+12	; 0x0c
     b7c:	35 85       	ldd	r19, Z+13	; 0x0d
     b7e:	08 1b       	sub	r16, r24
     b80:	19 0b       	sbc	r17, r25
     b82:	2a 0b       	sbc	r18, r26
     b84:	3b 0b       	sbc	r19, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     b86:	e7 e9       	ldi	r30, 0x97	; 151
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	c2 88       	ldd	r12, Z+18	; 0x12
     b8c:	d3 88       	ldd	r13, Z+19	; 0x13
     b8e:	e4 88       	ldd	r14, Z+20	; 0x14
     b90:	f5 88       	ldd	r15, Z+21	; 0x15
     b92:	86 85       	ldd	r24, Z+14	; 0x0e
     b94:	97 85       	ldd	r25, Z+15	; 0x0f
     b96:	a0 89       	ldd	r26, Z+16	; 0x10
     b98:	b1 89       	ldd	r27, Z+17	; 0x11
     b9a:	8c 0d       	add	r24, r12
     b9c:	9d 1d       	adc	r25, r13
     b9e:	ae 1d       	adc	r26, r14
     ba0:	bf 1d       	adc	r27, r15
     ba2:	86 87       	std	Z+14, r24	; 0x0e
     ba4:	97 87       	std	Z+15, r25	; 0x0f
     ba6:	a0 8b       	std	Z+16, r26	; 0x10
     ba8:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     baa:	86 85       	ldd	r24, Z+14	; 0x0e
     bac:	97 85       	ldd	r25, Z+15	; 0x0f
     bae:	a0 89       	ldd	r26, Z+16	; 0x10
     bb0:	b1 89       	ldd	r27, Z+17	; 0x11
			val = (dRamp1.tick() + (aRamp2.tick() >> 3));
     bb2:	8b 2f       	mov	r24, r27
     bb4:	86 95       	lsr	r24
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	83 0f       	add	r24, r19
     bbc:	d1 c0       	rjmp	.+418    	; 0xd60 <_Z7oscTickii+0x2d6>
		if (oscSelect2 == 2)
     bbe:	62 30       	cpi	r22, 0x02	; 2
     bc0:	71 05       	cpc	r23, r1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <_Z7oscTickii+0x13c>
     bc4:	76 c0       	rjmp	.+236    	; 0xcb2 <_Z7oscTickii+0x228>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     bc6:	e3 e2       	ldi	r30, 0x23	; 35
     bc8:	f2 e0       	ldi	r31, 0x02	; 2
     bca:	42 89       	ldd	r20, Z+18	; 0x12
     bcc:	53 89       	ldd	r21, Z+19	; 0x13
     bce:	64 89       	ldd	r22, Z+20	; 0x14
     bd0:	75 89       	ldd	r23, Z+21	; 0x15
     bd2:	86 85       	ldd	r24, Z+14	; 0x0e
     bd4:	97 85       	ldd	r25, Z+15	; 0x0f
     bd6:	a0 89       	ldd	r26, Z+16	; 0x10
     bd8:	b1 89       	ldd	r27, Z+17	; 0x11
     bda:	84 0f       	add	r24, r20
     bdc:	95 1f       	adc	r25, r21
     bde:	a6 1f       	adc	r26, r22
     be0:	b7 1f       	adc	r27, r23
     be2:	86 87       	std	Z+14, r24	; 0x0e
     be4:	97 87       	std	Z+15, r25	; 0x0f
     be6:	a0 8b       	std	Z+16, r26	; 0x10
     be8:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     bea:	86 85       	ldd	r24, Z+14	; 0x0e
     bec:	97 85       	ldd	r25, Z+15	; 0x0f
     bee:	a0 89       	ldd	r26, Z+16	; 0x10
     bf0:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     bf2:	46 85       	ldd	r20, Z+14	; 0x0e
     bf4:	57 85       	ldd	r21, Z+15	; 0x0f
     bf6:	60 89       	ldd	r22, Z+16	; 0x10
     bf8:	71 89       	ldd	r23, Z+17	; 0x11
     bfa:	82 85       	ldd	r24, Z+10	; 0x0a
     bfc:	93 85       	ldd	r25, Z+11	; 0x0b
     bfe:	a4 85       	ldd	r26, Z+12	; 0x0c
     c00:	b5 85       	ldd	r27, Z+13	; 0x0d
     c02:	84 1b       	sub	r24, r20
     c04:	95 0b       	sbc	r25, r21
     c06:	a6 0b       	sbc	r26, r22
     c08:	b7 0b       	sbc	r27, r23
     c0a:	8b 2f       	mov	r24, r27
     c0c:	99 27       	eor	r25, r25
     c0e:	aa 27       	eor	r26, r26
     c10:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     c12:	ed e7       	ldi	r30, 0x7D	; 125
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	02 89       	ldd	r16, Z+18	; 0x12
     c18:	13 89       	ldd	r17, Z+19	; 0x13
     c1a:	24 89       	ldd	r18, Z+20	; 0x14
     c1c:	35 89       	ldd	r19, Z+21	; 0x15
     c1e:	46 85       	ldd	r20, Z+14	; 0x0e
     c20:	57 85       	ldd	r21, Z+15	; 0x0f
     c22:	60 89       	ldd	r22, Z+16	; 0x10
     c24:	71 89       	ldd	r23, Z+17	; 0x11
     c26:	40 0f       	add	r20, r16
     c28:	51 1f       	adc	r21, r17
     c2a:	62 1f       	adc	r22, r18
     c2c:	73 1f       	adc	r23, r19
     c2e:	46 87       	std	Z+14, r20	; 0x0e
     c30:	57 87       	std	Z+15, r21	; 0x0f
     c32:	60 8b       	std	Z+16, r22	; 0x10
     c34:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     c36:	46 85       	ldd	r20, Z+14	; 0x0e
     c38:	57 85       	ldd	r21, Z+15	; 0x0f
     c3a:	60 89       	ldd	r22, Z+16	; 0x10
     c3c:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
     c3e:	c6 84       	ldd	r12, Z+14	; 0x0e
     c40:	d7 84       	ldd	r13, Z+15	; 0x0f
     c42:	e0 88       	ldd	r14, Z+16	; 0x10
     c44:	f1 88       	ldd	r15, Z+17	; 0x11
     c46:	42 85       	ldd	r20, Z+10	; 0x0a
     c48:	53 85       	ldd	r21, Z+11	; 0x0b
     c4a:	64 85       	ldd	r22, Z+12	; 0x0c
     c4c:	75 85       	ldd	r23, Z+13	; 0x0d
     c4e:	8a 01       	movw	r16, r20
     c50:	9b 01       	movw	r18, r22
     c52:	36 95       	lsr	r19
     c54:	27 95       	ror	r18
     c56:	17 95       	ror	r17
     c58:	07 95       	ror	r16
     c5a:	0c 15       	cp	r16, r12
     c5c:	1d 05       	cpc	r17, r13
     c5e:	2e 05       	cpc	r18, r14
     c60:	3f 05       	cpc	r19, r15
     c62:	68 f0       	brcs	.+26     	; 0xc7e <_Z7oscTickii+0x1f4>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
     c64:	46 85       	ldd	r20, Z+14	; 0x0e
     c66:	57 85       	ldd	r21, Z+15	; 0x0f
     c68:	60 89       	ldd	r22, Z+16	; 0x10
     c6a:	71 89       	ldd	r23, Z+17	; 0x11
     c6c:	44 0f       	add	r20, r20
     c6e:	55 1f       	adc	r21, r21
     c70:	66 1f       	adc	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	46 8b       	std	Z+22, r20	; 0x16
     c76:	57 8b       	std	Z+23, r21	; 0x17
     c78:	60 8f       	std	Z+24, r22	; 0x18
     c7a:	71 8f       	std	Z+25, r23	; 0x19
     c7c:	12 c0       	rjmp	.+36     	; 0xca2 <_Z7oscTickii+0x218>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
     c7e:	ed e7       	ldi	r30, 0x7D	; 125
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	06 85       	ldd	r16, Z+14	; 0x0e
     c84:	17 85       	ldd	r17, Z+15	; 0x0f
     c86:	20 89       	ldd	r18, Z+16	; 0x10
     c88:	31 89       	ldd	r19, Z+17	; 0x11
     c8a:	40 1b       	sub	r20, r16
     c8c:	51 0b       	sbc	r21, r17
     c8e:	62 0b       	sbc	r22, r18
     c90:	73 0b       	sbc	r23, r19
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	66 1f       	adc	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	46 8b       	std	Z+22, r20	; 0x16
     c9c:	57 8b       	std	Z+23, r21	; 0x17
     c9e:	60 8f       	std	Z+24, r22	; 0x18
     ca0:	71 8f       	std	Z+25, r23	; 0x19
			val = (dRamp1.tick() + (triangle2.tick() >> 3));
     ca2:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <triangle2+0x19>
     ca6:	e6 95       	lsr	r30
     ca8:	e6 95       	lsr	r30
     caa:	e6 95       	lsr	r30
     cac:	8e 0f       	add	r24, r30
     cae:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_Z7oscTickii+0x1244>

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
     cb2:	80 e0       	ldi	r24, 0x00	; 0
			val = (dRamp1.tick() + (dRamp2.tick() >> 3));
		if (oscSelect2 == 1)
			val = (dRamp1.tick() + (aRamp2.tick() >> 3));
		if (oscSelect2 == 2)
			val = (dRamp1.tick() + (triangle2.tick() >> 3));
		if (oscSelect2 == 3)
     cb4:	63 30       	cpi	r22, 0x03	; 3
     cb6:	71 05       	cpc	r23, r1
     cb8:	09 f0       	breq	.+2      	; 0xcbc <_Z7oscTickii+0x232>
     cba:	52 c0       	rjmp	.+164    	; 0xd60 <_Z7oscTickii+0x2d6>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     cbc:	e3 e2       	ldi	r30, 0x23	; 35
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	42 89       	ldd	r20, Z+18	; 0x12
     cc2:	53 89       	ldd	r21, Z+19	; 0x13
     cc4:	64 89       	ldd	r22, Z+20	; 0x14
     cc6:	75 89       	ldd	r23, Z+21	; 0x15
     cc8:	86 85       	ldd	r24, Z+14	; 0x0e
     cca:	97 85       	ldd	r25, Z+15	; 0x0f
     ccc:	a0 89       	ldd	r26, Z+16	; 0x10
     cce:	b1 89       	ldd	r27, Z+17	; 0x11
     cd0:	84 0f       	add	r24, r20
     cd2:	95 1f       	adc	r25, r21
     cd4:	a6 1f       	adc	r26, r22
     cd6:	b7 1f       	adc	r27, r23
     cd8:	86 87       	std	Z+14, r24	; 0x0e
     cda:	97 87       	std	Z+15, r25	; 0x0f
     cdc:	a0 8b       	std	Z+16, r26	; 0x10
     cde:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     ce0:	86 85       	ldd	r24, Z+14	; 0x0e
     ce2:	97 85       	ldd	r25, Z+15	; 0x0f
     ce4:	a0 89       	ldd	r26, Z+16	; 0x10
     ce6:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     ce8:	46 85       	ldd	r20, Z+14	; 0x0e
     cea:	57 85       	ldd	r21, Z+15	; 0x0f
     cec:	60 89       	ldd	r22, Z+16	; 0x10
     cee:	71 89       	ldd	r23, Z+17	; 0x11
     cf0:	82 85       	ldd	r24, Z+10	; 0x0a
     cf2:	93 85       	ldd	r25, Z+11	; 0x0b
     cf4:	a4 85       	ldd	r26, Z+12	; 0x0c
     cf6:	b5 85       	ldd	r27, Z+13	; 0x0d
     cf8:	84 1b       	sub	r24, r20
     cfa:	95 0b       	sbc	r25, r21
     cfc:	a6 0b       	sbc	r26, r22
     cfe:	b7 0b       	sbc	r27, r23
     d00:	8b 2f       	mov	r24, r27
     d02:	99 27       	eor	r25, r25
     d04:	aa 27       	eor	r26, r26
     d06:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     d08:	e3 e6       	ldi	r30, 0x63	; 99
     d0a:	f1 e0       	ldi	r31, 0x01	; 1
     d0c:	02 89       	ldd	r16, Z+18	; 0x12
     d0e:	13 89       	ldd	r17, Z+19	; 0x13
     d10:	24 89       	ldd	r18, Z+20	; 0x14
     d12:	35 89       	ldd	r19, Z+21	; 0x15
     d14:	46 85       	ldd	r20, Z+14	; 0x0e
     d16:	57 85       	ldd	r21, Z+15	; 0x0f
     d18:	60 89       	ldd	r22, Z+16	; 0x10
     d1a:	71 89       	ldd	r23, Z+17	; 0x11
     d1c:	40 0f       	add	r20, r16
     d1e:	51 1f       	adc	r21, r17
     d20:	62 1f       	adc	r22, r18
     d22:	73 1f       	adc	r23, r19
     d24:	46 87       	std	Z+14, r20	; 0x0e
     d26:	57 87       	std	Z+15, r21	; 0x0f
     d28:	60 8b       	std	Z+16, r22	; 0x10
     d2a:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     d2c:	46 85       	ldd	r20, Z+14	; 0x0e
     d2e:	57 85       	ldd	r21, Z+15	; 0x0f
     d30:	60 89       	ldd	r22, Z+16	; 0x10
     d32:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
     d34:	06 85       	ldd	r16, Z+14	; 0x0e
     d36:	17 85       	ldd	r17, Z+15	; 0x0f
     d38:	20 89       	ldd	r18, Z+16	; 0x10
     d3a:	31 89       	ldd	r19, Z+17	; 0x11
     d3c:	46 89       	ldd	r20, Z+22	; 0x16
     d3e:	57 89       	ldd	r21, Z+23	; 0x17
     d40:	60 8d       	ldd	r22, Z+24	; 0x18
     d42:	71 8d       	ldd	r23, Z+25	; 0x19
     d44:	04 17       	cp	r16, r20
     d46:	15 07       	cpc	r17, r21
     d48:	26 07       	cpc	r18, r22
     d4a:	37 07       	cpc	r19, r23
     d4c:	18 f4       	brcc	.+6      	; 0xd54 <_Z7oscTickii+0x2ca>
			return (m_max32 >> 24);
     d4e:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <sqWave2+0xd>
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <_Z7oscTickii+0x2cc>
		else
			return 0;
     d54:	e0 e0       	ldi	r30, 0x00	; 0
			val = (dRamp1.tick() + (sqWave2.tick() >> 3));
     d56:	e6 95       	lsr	r30
     d58:	e6 95       	lsr	r30
     d5a:	e6 95       	lsr	r30
     d5c:	8e 0f       	add	r24, r30
     d5e:	b7 c7       	rjmp	.+3950   	; 0x1cce <_Z7oscTickii+0x1244>
		if (oscSelect2 == 4)
     d60:	64 30       	cpi	r22, 0x04	; 4
     d62:	71 05       	cpc	r23, r1
     d64:	09 f0       	breq	.+2      	; 0xd68 <_Z7oscTickii+0x2de>
     d66:	b3 c7       	rjmp	.+3942   	; 0x1cce <_Z7oscTickii+0x1244>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     d68:	e3 e2       	ldi	r30, 0x23	; 35
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	42 89       	ldd	r20, Z+18	; 0x12
     d6e:	53 89       	ldd	r21, Z+19	; 0x13
     d70:	64 89       	ldd	r22, Z+20	; 0x14
     d72:	75 89       	ldd	r23, Z+21	; 0x15
     d74:	86 85       	ldd	r24, Z+14	; 0x0e
     d76:	97 85       	ldd	r25, Z+15	; 0x0f
     d78:	a0 89       	ldd	r26, Z+16	; 0x10
     d7a:	b1 89       	ldd	r27, Z+17	; 0x11
     d7c:	84 0f       	add	r24, r20
     d7e:	95 1f       	adc	r25, r21
     d80:	a6 1f       	adc	r26, r22
     d82:	b7 1f       	adc	r27, r23
     d84:	86 87       	std	Z+14, r24	; 0x0e
     d86:	97 87       	std	Z+15, r25	; 0x0f
     d88:	a0 8b       	std	Z+16, r26	; 0x10
     d8a:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     d8c:	86 85       	ldd	r24, Z+14	; 0x0e
     d8e:	97 85       	ldd	r25, Z+15	; 0x0f
     d90:	a0 89       	ldd	r26, Z+16	; 0x10
     d92:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     d94:	46 85       	ldd	r20, Z+14	; 0x0e
     d96:	57 85       	ldd	r21, Z+15	; 0x0f
     d98:	60 89       	ldd	r22, Z+16	; 0x10
     d9a:	71 89       	ldd	r23, Z+17	; 0x11
     d9c:	82 85       	ldd	r24, Z+10	; 0x0a
     d9e:	93 85       	ldd	r25, Z+11	; 0x0b
     da0:	a4 85       	ldd	r26, Z+12	; 0x0c
     da2:	b5 85       	ldd	r27, Z+13	; 0x0d
     da4:	84 1b       	sub	r24, r20
     da6:	95 0b       	sbc	r25, r21
     da8:	a6 0b       	sbc	r26, r22
     daa:	b7 0b       	sbc	r27, r23
     dac:	8b 2f       	mov	r24, r27
     dae:	99 27       	eor	r25, r25
     db0:	aa 27       	eor	r26, r26
     db2:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     db4:	ed e4       	ldi	r30, 0x4D	; 77
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	02 89       	ldd	r16, Z+18	; 0x12
     dba:	13 89       	ldd	r17, Z+19	; 0x13
     dbc:	24 89       	ldd	r18, Z+20	; 0x14
     dbe:	35 89       	ldd	r19, Z+21	; 0x15
     dc0:	46 85       	ldd	r20, Z+14	; 0x0e
     dc2:	57 85       	ldd	r21, Z+15	; 0x0f
     dc4:	60 89       	ldd	r22, Z+16	; 0x10
     dc6:	71 89       	ldd	r23, Z+17	; 0x11
     dc8:	40 0f       	add	r20, r16
     dca:	51 1f       	adc	r21, r17
     dcc:	62 1f       	adc	r22, r18
     dce:	73 1f       	adc	r23, r19
     dd0:	46 87       	std	Z+14, r20	; 0x0e
     dd2:	57 87       	std	Z+15, r21	; 0x0f
     dd4:	60 8b       	std	Z+16, r22	; 0x10
     dd6:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     dd8:	46 85       	ldd	r20, Z+14	; 0x0e
     dda:	57 85       	ldd	r21, Z+15	; 0x0f
     ddc:	60 89       	ldd	r22, Z+16	; 0x10
     dde:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
     de0:	e7 2f       	mov	r30, r23
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	e8 51       	subi	r30, 0x18	; 24
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	e4 91       	lpm	r30, Z
			val = (dRamp1.tick() + (sine2.tick() >> 3));
     dea:	e6 95       	lsr	r30
     dec:	e6 95       	lsr	r30
     dee:	e6 95       	lsr	r30
     df0:	8e 0f       	add	r24, r30
     df2:	6d c7       	rjmp	.+3802   	; 0x1cce <_Z7oscTickii+0x1244>
	}
	else if (oscSelect1 == 1)
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 05       	cpc	r25, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <_Z7oscTickii+0x372>
     dfa:	68 c1       	rjmp	.+720    	; 0x10cc <_Z7oscTickii+0x642>
	{
		if (oscSelect2 == 0)
     dfc:	61 15       	cp	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	f1 f5       	brne	.+124    	; 0xe7e <_Z7oscTickii+0x3f4>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     e02:	ed e0       	ldi	r30, 0x0D	; 13
     e04:	f2 e0       	ldi	r31, 0x02	; 2
     e06:	02 89       	ldd	r16, Z+18	; 0x12
     e08:	13 89       	ldd	r17, Z+19	; 0x13
     e0a:	24 89       	ldd	r18, Z+20	; 0x14
     e0c:	35 89       	ldd	r19, Z+21	; 0x15
     e0e:	86 85       	ldd	r24, Z+14	; 0x0e
     e10:	97 85       	ldd	r25, Z+15	; 0x0f
     e12:	a0 89       	ldd	r26, Z+16	; 0x10
     e14:	b1 89       	ldd	r27, Z+17	; 0x11
     e16:	80 0f       	add	r24, r16
     e18:	91 1f       	adc	r25, r17
     e1a:	a2 1f       	adc	r26, r18
     e1c:	b3 1f       	adc	r27, r19
     e1e:	86 87       	std	Z+14, r24	; 0x0e
     e20:	97 87       	std	Z+15, r25	; 0x0f
     e22:	a0 8b       	std	Z+16, r26	; 0x10
     e24:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     e26:	06 85       	ldd	r16, Z+14	; 0x0e
     e28:	17 85       	ldd	r17, Z+15	; 0x0f
     e2a:	20 89       	ldd	r18, Z+16	; 0x10
     e2c:	31 89       	ldd	r19, Z+17	; 0x11
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     e2e:	ed ea       	ldi	r30, 0xAD	; 173
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	c2 88       	ldd	r12, Z+18	; 0x12
     e34:	d3 88       	ldd	r13, Z+19	; 0x13
     e36:	e4 88       	ldd	r14, Z+20	; 0x14
     e38:	f5 88       	ldd	r15, Z+21	; 0x15
     e3a:	86 85       	ldd	r24, Z+14	; 0x0e
     e3c:	97 85       	ldd	r25, Z+15	; 0x0f
     e3e:	a0 89       	ldd	r26, Z+16	; 0x10
     e40:	b1 89       	ldd	r27, Z+17	; 0x11
     e42:	8c 0d       	add	r24, r12
     e44:	9d 1d       	adc	r25, r13
     e46:	ae 1d       	adc	r26, r14
     e48:	bf 1d       	adc	r27, r15
     e4a:	86 87       	std	Z+14, r24	; 0x0e
     e4c:	97 87       	std	Z+15, r25	; 0x0f
     e4e:	a0 8b       	std	Z+16, r26	; 0x10
     e50:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     e52:	86 85       	ldd	r24, Z+14	; 0x0e
     e54:	97 85       	ldd	r25, Z+15	; 0x0f
     e56:	a0 89       	ldd	r26, Z+16	; 0x10
     e58:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
     e5a:	c6 84       	ldd	r12, Z+14	; 0x0e
     e5c:	d7 84       	ldd	r13, Z+15	; 0x0f
     e5e:	e0 88       	ldd	r14, Z+16	; 0x10
     e60:	f1 88       	ldd	r15, Z+17	; 0x11
			val = (aRamp1.tick() + (dRamp2.tick() >> 3));
     e62:	82 85       	ldd	r24, Z+10	; 0x0a
     e64:	93 85       	ldd	r25, Z+11	; 0x0b
     e66:	a4 85       	ldd	r26, Z+12	; 0x0c
     e68:	b5 85       	ldd	r27, Z+13	; 0x0d
     e6a:	8c 19       	sub	r24, r12
     e6c:	9d 09       	sbc	r25, r13
     e6e:	ae 09       	sbc	r26, r14
     e70:	bf 09       	sbc	r27, r15
     e72:	8b 2f       	mov	r24, r27
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	83 0f       	add	r24, r19
     e7c:	a3 c0       	rjmp	.+326    	; 0xfc4 <_Z7oscTickii+0x53a>
		if (oscSelect2 == 1)
     e7e:	61 30       	cpi	r22, 0x01	; 1
     e80:	71 05       	cpc	r23, r1
     e82:	91 f5       	brne	.+100    	; 0xee8 <_Z7oscTickii+0x45e>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     e84:	ed e0       	ldi	r30, 0x0D	; 13
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	02 89       	ldd	r16, Z+18	; 0x12
     e8a:	13 89       	ldd	r17, Z+19	; 0x13
     e8c:	24 89       	ldd	r18, Z+20	; 0x14
     e8e:	35 89       	ldd	r19, Z+21	; 0x15
     e90:	86 85       	ldd	r24, Z+14	; 0x0e
     e92:	97 85       	ldd	r25, Z+15	; 0x0f
     e94:	a0 89       	ldd	r26, Z+16	; 0x10
     e96:	b1 89       	ldd	r27, Z+17	; 0x11
     e98:	80 0f       	add	r24, r16
     e9a:	91 1f       	adc	r25, r17
     e9c:	a2 1f       	adc	r26, r18
     e9e:	b3 1f       	adc	r27, r19
     ea0:	86 87       	std	Z+14, r24	; 0x0e
     ea2:	97 87       	std	Z+15, r25	; 0x0f
     ea4:	a0 8b       	std	Z+16, r26	; 0x10
     ea6:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     ea8:	06 85       	ldd	r16, Z+14	; 0x0e
     eaa:	17 85       	ldd	r17, Z+15	; 0x0f
     eac:	20 89       	ldd	r18, Z+16	; 0x10
     eae:	31 89       	ldd	r19, Z+17	; 0x11
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     eb0:	e7 e9       	ldi	r30, 0x97	; 151
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	c2 88       	ldd	r12, Z+18	; 0x12
     eb6:	d3 88       	ldd	r13, Z+19	; 0x13
     eb8:	e4 88       	ldd	r14, Z+20	; 0x14
     eba:	f5 88       	ldd	r15, Z+21	; 0x15
     ebc:	86 85       	ldd	r24, Z+14	; 0x0e
     ebe:	97 85       	ldd	r25, Z+15	; 0x0f
     ec0:	a0 89       	ldd	r26, Z+16	; 0x10
     ec2:	b1 89       	ldd	r27, Z+17	; 0x11
     ec4:	8c 0d       	add	r24, r12
     ec6:	9d 1d       	adc	r25, r13
     ec8:	ae 1d       	adc	r26, r14
     eca:	bf 1d       	adc	r27, r15
     ecc:	86 87       	std	Z+14, r24	; 0x0e
     ece:	97 87       	std	Z+15, r25	; 0x0f
     ed0:	a0 8b       	std	Z+16, r26	; 0x10
     ed2:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     ed4:	86 85       	ldd	r24, Z+14	; 0x0e
     ed6:	97 85       	ldd	r25, Z+15	; 0x0f
     ed8:	a0 89       	ldd	r26, Z+16	; 0x10
     eda:	b1 89       	ldd	r27, Z+17	; 0x11
			val = (aRamp1.tick() + (aRamp2.tick() >> 3));
     edc:	8b 2f       	mov	r24, r27
     ede:	86 95       	lsr	r24
     ee0:	86 95       	lsr	r24
     ee2:	86 95       	lsr	r24
     ee4:	83 0f       	add	r24, r19
     ee6:	b8 c0       	rjmp	.+368    	; 0x1058 <_Z7oscTickii+0x5ce>
		if (oscSelect2 == 2)
     ee8:	62 30       	cpi	r22, 0x02	; 2
     eea:	71 05       	cpc	r23, r1
     eec:	09 f0       	breq	.+2      	; 0xef0 <_Z7oscTickii+0x466>
     eee:	69 c0       	rjmp	.+210    	; 0xfc2 <_Z7oscTickii+0x538>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     ef0:	ed e0       	ldi	r30, 0x0D	; 13
     ef2:	f2 e0       	ldi	r31, 0x02	; 2
     ef4:	42 89       	ldd	r20, Z+18	; 0x12
     ef6:	53 89       	ldd	r21, Z+19	; 0x13
     ef8:	64 89       	ldd	r22, Z+20	; 0x14
     efa:	75 89       	ldd	r23, Z+21	; 0x15
     efc:	86 85       	ldd	r24, Z+14	; 0x0e
     efe:	97 85       	ldd	r25, Z+15	; 0x0f
     f00:	a0 89       	ldd	r26, Z+16	; 0x10
     f02:	b1 89       	ldd	r27, Z+17	; 0x11
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	a6 1f       	adc	r26, r22
     f0a:	b7 1f       	adc	r27, r23
     f0c:	86 87       	std	Z+14, r24	; 0x0e
     f0e:	97 87       	std	Z+15, r25	; 0x0f
     f10:	a0 8b       	std	Z+16, r26	; 0x10
     f12:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     f14:	86 85       	ldd	r24, Z+14	; 0x0e
     f16:	97 85       	ldd	r25, Z+15	; 0x0f
     f18:	a0 89       	ldd	r26, Z+16	; 0x10
     f1a:	b1 89       	ldd	r27, Z+17	; 0x11
     f1c:	8b 2f       	mov	r24, r27
     f1e:	99 27       	eor	r25, r25
     f20:	aa 27       	eor	r26, r26
     f22:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     f24:	ed e7       	ldi	r30, 0x7D	; 125
     f26:	f1 e0       	ldi	r31, 0x01	; 1
     f28:	02 89       	ldd	r16, Z+18	; 0x12
     f2a:	13 89       	ldd	r17, Z+19	; 0x13
     f2c:	24 89       	ldd	r18, Z+20	; 0x14
     f2e:	35 89       	ldd	r19, Z+21	; 0x15
     f30:	46 85       	ldd	r20, Z+14	; 0x0e
     f32:	57 85       	ldd	r21, Z+15	; 0x0f
     f34:	60 89       	ldd	r22, Z+16	; 0x10
     f36:	71 89       	ldd	r23, Z+17	; 0x11
     f38:	40 0f       	add	r20, r16
     f3a:	51 1f       	adc	r21, r17
     f3c:	62 1f       	adc	r22, r18
     f3e:	73 1f       	adc	r23, r19
     f40:	46 87       	std	Z+14, r20	; 0x0e
     f42:	57 87       	std	Z+15, r21	; 0x0f
     f44:	60 8b       	std	Z+16, r22	; 0x10
     f46:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     f48:	46 85       	ldd	r20, Z+14	; 0x0e
     f4a:	57 85       	ldd	r21, Z+15	; 0x0f
     f4c:	60 89       	ldd	r22, Z+16	; 0x10
     f4e:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
     f50:	c6 84       	ldd	r12, Z+14	; 0x0e
     f52:	d7 84       	ldd	r13, Z+15	; 0x0f
     f54:	e0 88       	ldd	r14, Z+16	; 0x10
     f56:	f1 88       	ldd	r15, Z+17	; 0x11
     f58:	42 85       	ldd	r20, Z+10	; 0x0a
     f5a:	53 85       	ldd	r21, Z+11	; 0x0b
     f5c:	64 85       	ldd	r22, Z+12	; 0x0c
     f5e:	75 85       	ldd	r23, Z+13	; 0x0d
     f60:	8a 01       	movw	r16, r20
     f62:	9b 01       	movw	r18, r22
     f64:	36 95       	lsr	r19
     f66:	27 95       	ror	r18
     f68:	17 95       	ror	r17
     f6a:	07 95       	ror	r16
     f6c:	0c 15       	cp	r16, r12
     f6e:	1d 05       	cpc	r17, r13
     f70:	2e 05       	cpc	r18, r14
     f72:	3f 05       	cpc	r19, r15
     f74:	68 f0       	brcs	.+26     	; 0xf90 <_Z7oscTickii+0x506>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
     f76:	46 85       	ldd	r20, Z+14	; 0x0e
     f78:	57 85       	ldd	r21, Z+15	; 0x0f
     f7a:	60 89       	ldd	r22, Z+16	; 0x10
     f7c:	71 89       	ldd	r23, Z+17	; 0x11
     f7e:	44 0f       	add	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	66 1f       	adc	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	46 8b       	std	Z+22, r20	; 0x16
     f88:	57 8b       	std	Z+23, r21	; 0x17
     f8a:	60 8f       	std	Z+24, r22	; 0x18
     f8c:	71 8f       	std	Z+25, r23	; 0x19
     f8e:	12 c0       	rjmp	.+36     	; 0xfb4 <_Z7oscTickii+0x52a>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
     f90:	ed e7       	ldi	r30, 0x7D	; 125
     f92:	f1 e0       	ldi	r31, 0x01	; 1
     f94:	06 85       	ldd	r16, Z+14	; 0x0e
     f96:	17 85       	ldd	r17, Z+15	; 0x0f
     f98:	20 89       	ldd	r18, Z+16	; 0x10
     f9a:	31 89       	ldd	r19, Z+17	; 0x11
     f9c:	40 1b       	sub	r20, r16
     f9e:	51 0b       	sbc	r21, r17
     fa0:	62 0b       	sbc	r22, r18
     fa2:	73 0b       	sbc	r23, r19
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	46 8b       	std	Z+22, r20	; 0x16
     fae:	57 8b       	std	Z+23, r21	; 0x17
     fb0:	60 8f       	std	Z+24, r22	; 0x18
     fb2:	71 8f       	std	Z+25, r23	; 0x19
			val = (aRamp1.tick() + (triangle2.tick() >> 3));
     fb4:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <triangle2+0x19>
     fb8:	e6 95       	lsr	r30
     fba:	e6 95       	lsr	r30
     fbc:	e6 95       	lsr	r30
     fbe:	8e 0f       	add	r24, r30
     fc0:	86 c6       	rjmp	.+3340   	; 0x1cce <_Z7oscTickii+0x1244>

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
     fc2:	80 e0       	ldi	r24, 0x00	; 0
			val = (aRamp1.tick() + (dRamp2.tick() >> 3));
		if (oscSelect2 == 1)
			val = (aRamp1.tick() + (aRamp2.tick() >> 3));
		if (oscSelect2 == 2)
			val = (aRamp1.tick() + (triangle2.tick() >> 3));
		if (oscSelect2 == 3)
     fc4:	63 30       	cpi	r22, 0x03	; 3
     fc6:	71 05       	cpc	r23, r1
     fc8:	09 f0       	breq	.+2      	; 0xfcc <_Z7oscTickii+0x542>
     fca:	46 c0       	rjmp	.+140    	; 0x1058 <_Z7oscTickii+0x5ce>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
     fcc:	ed e0       	ldi	r30, 0x0D	; 13
     fce:	f2 e0       	ldi	r31, 0x02	; 2
     fd0:	42 89       	ldd	r20, Z+18	; 0x12
     fd2:	53 89       	ldd	r21, Z+19	; 0x13
     fd4:	64 89       	ldd	r22, Z+20	; 0x14
     fd6:	75 89       	ldd	r23, Z+21	; 0x15
     fd8:	86 85       	ldd	r24, Z+14	; 0x0e
     fda:	97 85       	ldd	r25, Z+15	; 0x0f
     fdc:	a0 89       	ldd	r26, Z+16	; 0x10
     fde:	b1 89       	ldd	r27, Z+17	; 0x11
     fe0:	84 0f       	add	r24, r20
     fe2:	95 1f       	adc	r25, r21
     fe4:	a6 1f       	adc	r26, r22
     fe6:	b7 1f       	adc	r27, r23
     fe8:	86 87       	std	Z+14, r24	; 0x0e
     fea:	97 87       	std	Z+15, r25	; 0x0f
     fec:	a0 8b       	std	Z+16, r26	; 0x10
     fee:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
     ff0:	86 85       	ldd	r24, Z+14	; 0x0e
     ff2:	97 85       	ldd	r25, Z+15	; 0x0f
     ff4:	a0 89       	ldd	r26, Z+16	; 0x10
     ff6:	b1 89       	ldd	r27, Z+17	; 0x11
     ff8:	8b 2f       	mov	r24, r27
     ffa:	99 27       	eor	r25, r25
     ffc:	aa 27       	eor	r26, r26
     ffe:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1000:	e3 e6       	ldi	r30, 0x63	; 99
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	02 89       	ldd	r16, Z+18	; 0x12
    1006:	13 89       	ldd	r17, Z+19	; 0x13
    1008:	24 89       	ldd	r18, Z+20	; 0x14
    100a:	35 89       	ldd	r19, Z+21	; 0x15
    100c:	46 85       	ldd	r20, Z+14	; 0x0e
    100e:	57 85       	ldd	r21, Z+15	; 0x0f
    1010:	60 89       	ldd	r22, Z+16	; 0x10
    1012:	71 89       	ldd	r23, Z+17	; 0x11
    1014:	40 0f       	add	r20, r16
    1016:	51 1f       	adc	r21, r17
    1018:	62 1f       	adc	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	46 87       	std	Z+14, r20	; 0x0e
    101e:	57 87       	std	Z+15, r21	; 0x0f
    1020:	60 8b       	std	Z+16, r22	; 0x10
    1022:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1024:	46 85       	ldd	r20, Z+14	; 0x0e
    1026:	57 85       	ldd	r21, Z+15	; 0x0f
    1028:	60 89       	ldd	r22, Z+16	; 0x10
    102a:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    102c:	06 85       	ldd	r16, Z+14	; 0x0e
    102e:	17 85       	ldd	r17, Z+15	; 0x0f
    1030:	20 89       	ldd	r18, Z+16	; 0x10
    1032:	31 89       	ldd	r19, Z+17	; 0x11
    1034:	46 89       	ldd	r20, Z+22	; 0x16
    1036:	57 89       	ldd	r21, Z+23	; 0x17
    1038:	60 8d       	ldd	r22, Z+24	; 0x18
    103a:	71 8d       	ldd	r23, Z+25	; 0x19
    103c:	04 17       	cp	r16, r20
    103e:	15 07       	cpc	r17, r21
    1040:	26 07       	cpc	r18, r22
    1042:	37 07       	cpc	r19, r23
    1044:	18 f4       	brcc	.+6      	; 0x104c <_Z7oscTickii+0x5c2>
			return (m_max32 >> 24);
    1046:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <sqWave2+0xd>
    104a:	01 c0       	rjmp	.+2      	; 0x104e <_Z7oscTickii+0x5c4>
		else
			return 0;
    104c:	e0 e0       	ldi	r30, 0x00	; 0
			val = (aRamp1.tick() + (sqWave2.tick() >> 3));
    104e:	e6 95       	lsr	r30
    1050:	e6 95       	lsr	r30
    1052:	e6 95       	lsr	r30
    1054:	8e 0f       	add	r24, r30
    1056:	3b c6       	rjmp	.+3190   	; 0x1cce <_Z7oscTickii+0x1244>
		if (oscSelect2 == 4)
    1058:	64 30       	cpi	r22, 0x04	; 4
    105a:	71 05       	cpc	r23, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <_Z7oscTickii+0x5d6>
    105e:	37 c6       	rjmp	.+3182   	; 0x1cce <_Z7oscTickii+0x1244>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1060:	ed e0       	ldi	r30, 0x0D	; 13
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	42 89       	ldd	r20, Z+18	; 0x12
    1066:	53 89       	ldd	r21, Z+19	; 0x13
    1068:	64 89       	ldd	r22, Z+20	; 0x14
    106a:	75 89       	ldd	r23, Z+21	; 0x15
    106c:	86 85       	ldd	r24, Z+14	; 0x0e
    106e:	97 85       	ldd	r25, Z+15	; 0x0f
    1070:	a0 89       	ldd	r26, Z+16	; 0x10
    1072:	b1 89       	ldd	r27, Z+17	; 0x11
    1074:	84 0f       	add	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	a6 1f       	adc	r26, r22
    107a:	b7 1f       	adc	r27, r23
    107c:	86 87       	std	Z+14, r24	; 0x0e
    107e:	97 87       	std	Z+15, r25	; 0x0f
    1080:	a0 8b       	std	Z+16, r26	; 0x10
    1082:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1084:	46 85       	ldd	r20, Z+14	; 0x0e
    1086:	57 85       	ldd	r21, Z+15	; 0x0f
    1088:	60 89       	ldd	r22, Z+16	; 0x10
    108a:	71 89       	ldd	r23, Z+17	; 0x11
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    108c:	ed e4       	ldi	r30, 0x4D	; 77
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	02 89       	ldd	r16, Z+18	; 0x12
    1092:	13 89       	ldd	r17, Z+19	; 0x13
    1094:	24 89       	ldd	r18, Z+20	; 0x14
    1096:	35 89       	ldd	r19, Z+21	; 0x15
    1098:	86 85       	ldd	r24, Z+14	; 0x0e
    109a:	97 85       	ldd	r25, Z+15	; 0x0f
    109c:	a0 89       	ldd	r26, Z+16	; 0x10
    109e:	b1 89       	ldd	r27, Z+17	; 0x11
    10a0:	80 0f       	add	r24, r16
    10a2:	91 1f       	adc	r25, r17
    10a4:	a2 1f       	adc	r26, r18
    10a6:	b3 1f       	adc	r27, r19
    10a8:	86 87       	std	Z+14, r24	; 0x0e
    10aa:	97 87       	std	Z+15, r25	; 0x0f
    10ac:	a0 8b       	std	Z+16, r26	; 0x10
    10ae:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    10b0:	86 85       	ldd	r24, Z+14	; 0x0e
    10b2:	97 85       	ldd	r25, Z+15	; 0x0f
    10b4:	a0 89       	ldd	r26, Z+16	; 0x10
    10b6:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    10b8:	eb 2f       	mov	r30, r27
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	e8 51       	subi	r30, 0x18	; 24
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	84 91       	lpm	r24, Z
			val = (aRamp1.tick() + (sine2.tick() >> 3));
    10c2:	86 95       	lsr	r24
    10c4:	86 95       	lsr	r24
    10c6:	86 95       	lsr	r24
    10c8:	87 0f       	add	r24, r23
    10ca:	01 c6       	rjmp	.+3074   	; 0x1cce <_Z7oscTickii+0x1244>
	}
	else if (oscSelect1 == 2)
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <_Z7oscTickii+0x64a>
    10d2:	90 c2       	rjmp	.+1312   	; 0x15f4 <_Z7oscTickii+0xb6a>
	{
		if (oscSelect2 == 0)
    10d4:	61 15       	cp	r22, r1
    10d6:	71 05       	cpc	r23, r1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <_Z7oscTickii+0x652>
    10da:	7e c0       	rjmp	.+252    	; 0x11d8 <_Z7oscTickii+0x74e>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    10dc:	e3 ef       	ldi	r30, 0xF3	; 243
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	02 89       	ldd	r16, Z+18	; 0x12
    10e2:	13 89       	ldd	r17, Z+19	; 0x13
    10e4:	24 89       	ldd	r18, Z+20	; 0x14
    10e6:	35 89       	ldd	r19, Z+21	; 0x15
    10e8:	86 85       	ldd	r24, Z+14	; 0x0e
    10ea:	97 85       	ldd	r25, Z+15	; 0x0f
    10ec:	a0 89       	ldd	r26, Z+16	; 0x10
    10ee:	b1 89       	ldd	r27, Z+17	; 0x11
    10f0:	80 0f       	add	r24, r16
    10f2:	91 1f       	adc	r25, r17
    10f4:	a2 1f       	adc	r26, r18
    10f6:	b3 1f       	adc	r27, r19
    10f8:	86 87       	std	Z+14, r24	; 0x0e
    10fa:	97 87       	std	Z+15, r25	; 0x0f
    10fc:	a0 8b       	std	Z+16, r26	; 0x10
    10fe:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1100:	86 85       	ldd	r24, Z+14	; 0x0e
    1102:	97 85       	ldd	r25, Z+15	; 0x0f
    1104:	a0 89       	ldd	r26, Z+16	; 0x10
    1106:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    1108:	c6 84       	ldd	r12, Z+14	; 0x0e
    110a:	d7 84       	ldd	r13, Z+15	; 0x0f
    110c:	e0 88       	ldd	r14, Z+16	; 0x10
    110e:	f1 88       	ldd	r15, Z+17	; 0x11
    1110:	82 85       	ldd	r24, Z+10	; 0x0a
    1112:	93 85       	ldd	r25, Z+11	; 0x0b
    1114:	a4 85       	ldd	r26, Z+12	; 0x0c
    1116:	b5 85       	ldd	r27, Z+13	; 0x0d
    1118:	8c 01       	movw	r16, r24
    111a:	9d 01       	movw	r18, r26
    111c:	36 95       	lsr	r19
    111e:	27 95       	ror	r18
    1120:	17 95       	ror	r17
    1122:	07 95       	ror	r16
    1124:	0c 15       	cp	r16, r12
    1126:	1d 05       	cpc	r17, r13
    1128:	2e 05       	cpc	r18, r14
    112a:	3f 05       	cpc	r19, r15
    112c:	68 f0       	brcs	.+26     	; 0x1148 <_Z7oscTickii+0x6be>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    112e:	86 85       	ldd	r24, Z+14	; 0x0e
    1130:	97 85       	ldd	r25, Z+15	; 0x0f
    1132:	a0 89       	ldd	r26, Z+16	; 0x10
    1134:	b1 89       	ldd	r27, Z+17	; 0x11
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	86 8b       	std	Z+22, r24	; 0x16
    1140:	97 8b       	std	Z+23, r25	; 0x17
    1142:	a0 8f       	std	Z+24, r26	; 0x18
    1144:	b1 8f       	std	Z+25, r27	; 0x19
    1146:	12 c0       	rjmp	.+36     	; 0x116c <_Z7oscTickii+0x6e2>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    1148:	e3 ef       	ldi	r30, 0xF3	; 243
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	06 85       	ldd	r16, Z+14	; 0x0e
    114e:	17 85       	ldd	r17, Z+15	; 0x0f
    1150:	20 89       	ldd	r18, Z+16	; 0x10
    1152:	31 89       	ldd	r19, Z+17	; 0x11
    1154:	80 1b       	sub	r24, r16
    1156:	91 0b       	sbc	r25, r17
    1158:	a2 0b       	sbc	r26, r18
    115a:	b3 0b       	sbc	r27, r19
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	aa 1f       	adc	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	86 8b       	std	Z+22, r24	; 0x16
    1166:	97 8b       	std	Z+23, r25	; 0x17
    1168:	a0 8f       	std	Z+24, r26	; 0x18
    116a:	b1 8f       	std	Z+25, r27	; 0x19
		return (m_triangleAcc >> 24);
    116c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <triangle1+0x19>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1170:	ad ea       	ldi	r26, 0xAD	; 173
    1172:	b1 e0       	ldi	r27, 0x01	; 1
    1174:	52 96       	adiw	r26, 0x12	; 18
    1176:	cd 90       	ld	r12, X+
    1178:	dd 90       	ld	r13, X+
    117a:	ed 90       	ld	r14, X+
    117c:	fc 90       	ld	r15, X
    117e:	55 97       	sbiw	r26, 0x15	; 21
    1180:	1e 96       	adiw	r26, 0x0e	; 14
    1182:	0d 91       	ld	r16, X+
    1184:	1d 91       	ld	r17, X+
    1186:	2d 91       	ld	r18, X+
    1188:	3c 91       	ld	r19, X
    118a:	51 97       	sbiw	r26, 0x11	; 17
    118c:	0c 0d       	add	r16, r12
    118e:	1d 1d       	adc	r17, r13
    1190:	2e 1d       	adc	r18, r14
    1192:	3f 1d       	adc	r19, r15
    1194:	1e 96       	adiw	r26, 0x0e	; 14
    1196:	0d 93       	st	X+, r16
    1198:	1d 93       	st	X+, r17
    119a:	2d 93       	st	X+, r18
    119c:	3c 93       	st	X, r19
    119e:	51 97       	sbiw	r26, 0x11	; 17
		return (m_accumulator >> 24); // Get the 8-bit real number
    11a0:	1e 96       	adiw	r26, 0x0e	; 14
    11a2:	0d 91       	ld	r16, X+
    11a4:	1d 91       	ld	r17, X+
    11a6:	2d 91       	ld	r18, X+
    11a8:	3c 91       	ld	r19, X
    11aa:	51 97       	sbiw	r26, 0x11	; 17
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
    11ac:	1e 96       	adiw	r26, 0x0e	; 14
    11ae:	cd 90       	ld	r12, X+
    11b0:	dd 90       	ld	r13, X+
    11b2:	ed 90       	ld	r14, X+
    11b4:	fc 90       	ld	r15, X
    11b6:	51 97       	sbiw	r26, 0x11	; 17
			val = (triangle1.tick() + (dRamp2.tick() >> 3));
    11b8:	1a 96       	adiw	r26, 0x0a	; 10
    11ba:	0d 91       	ld	r16, X+
    11bc:	1d 91       	ld	r17, X+
    11be:	2d 91       	ld	r18, X+
    11c0:	3c 91       	ld	r19, X
    11c2:	1d 97       	sbiw	r26, 0x0d	; 13
    11c4:	0c 19       	sub	r16, r12
    11c6:	1d 09       	sbc	r17, r13
    11c8:	2e 09       	sbc	r18, r14
    11ca:	3f 09       	sbc	r19, r15
    11cc:	83 2f       	mov	r24, r19
    11ce:	86 95       	lsr	r24
    11d0:	86 95       	lsr	r24
    11d2:	86 95       	lsr	r24
    11d4:	8e 0f       	add	r24, r30
    11d6:	12 c1       	rjmp	.+548    	; 0x13fc <_Z7oscTickii+0x972>
		if (oscSelect2 == 1)
    11d8:	61 30       	cpi	r22, 0x01	; 1
    11da:	71 05       	cpc	r23, r1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <_Z7oscTickii+0x756>
    11de:	66 c0       	rjmp	.+204    	; 0x12ac <_Z7oscTickii+0x822>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    11e0:	e3 ef       	ldi	r30, 0xF3	; 243
    11e2:	f1 e0       	ldi	r31, 0x01	; 1
    11e4:	02 89       	ldd	r16, Z+18	; 0x12
    11e6:	13 89       	ldd	r17, Z+19	; 0x13
    11e8:	24 89       	ldd	r18, Z+20	; 0x14
    11ea:	35 89       	ldd	r19, Z+21	; 0x15
    11ec:	86 85       	ldd	r24, Z+14	; 0x0e
    11ee:	97 85       	ldd	r25, Z+15	; 0x0f
    11f0:	a0 89       	ldd	r26, Z+16	; 0x10
    11f2:	b1 89       	ldd	r27, Z+17	; 0x11
    11f4:	80 0f       	add	r24, r16
    11f6:	91 1f       	adc	r25, r17
    11f8:	a2 1f       	adc	r26, r18
    11fa:	b3 1f       	adc	r27, r19
    11fc:	86 87       	std	Z+14, r24	; 0x0e
    11fe:	97 87       	std	Z+15, r25	; 0x0f
    1200:	a0 8b       	std	Z+16, r26	; 0x10
    1202:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1204:	86 85       	ldd	r24, Z+14	; 0x0e
    1206:	97 85       	ldd	r25, Z+15	; 0x0f
    1208:	a0 89       	ldd	r26, Z+16	; 0x10
    120a:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    120c:	c6 84       	ldd	r12, Z+14	; 0x0e
    120e:	d7 84       	ldd	r13, Z+15	; 0x0f
    1210:	e0 88       	ldd	r14, Z+16	; 0x10
    1212:	f1 88       	ldd	r15, Z+17	; 0x11
    1214:	82 85       	ldd	r24, Z+10	; 0x0a
    1216:	93 85       	ldd	r25, Z+11	; 0x0b
    1218:	a4 85       	ldd	r26, Z+12	; 0x0c
    121a:	b5 85       	ldd	r27, Z+13	; 0x0d
    121c:	8c 01       	movw	r16, r24
    121e:	9d 01       	movw	r18, r26
    1220:	36 95       	lsr	r19
    1222:	27 95       	ror	r18
    1224:	17 95       	ror	r17
    1226:	07 95       	ror	r16
    1228:	0c 15       	cp	r16, r12
    122a:	1d 05       	cpc	r17, r13
    122c:	2e 05       	cpc	r18, r14
    122e:	3f 05       	cpc	r19, r15
    1230:	68 f0       	brcs	.+26     	; 0x124c <_Z7oscTickii+0x7c2>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    1232:	86 85       	ldd	r24, Z+14	; 0x0e
    1234:	97 85       	ldd	r25, Z+15	; 0x0f
    1236:	a0 89       	ldd	r26, Z+16	; 0x10
    1238:	b1 89       	ldd	r27, Z+17	; 0x11
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	aa 1f       	adc	r26, r26
    1240:	bb 1f       	adc	r27, r27
    1242:	86 8b       	std	Z+22, r24	; 0x16
    1244:	97 8b       	std	Z+23, r25	; 0x17
    1246:	a0 8f       	std	Z+24, r26	; 0x18
    1248:	b1 8f       	std	Z+25, r27	; 0x19
    124a:	12 c0       	rjmp	.+36     	; 0x1270 <_Z7oscTickii+0x7e6>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    124c:	e3 ef       	ldi	r30, 0xF3	; 243
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	06 85       	ldd	r16, Z+14	; 0x0e
    1252:	17 85       	ldd	r17, Z+15	; 0x0f
    1254:	20 89       	ldd	r18, Z+16	; 0x10
    1256:	31 89       	ldd	r19, Z+17	; 0x11
    1258:	80 1b       	sub	r24, r16
    125a:	91 0b       	sbc	r25, r17
    125c:	a2 0b       	sbc	r26, r18
    125e:	b3 0b       	sbc	r27, r19
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	aa 1f       	adc	r26, r26
    1266:	bb 1f       	adc	r27, r27
    1268:	86 8b       	std	Z+22, r24	; 0x16
    126a:	97 8b       	std	Z+23, r25	; 0x17
    126c:	a0 8f       	std	Z+24, r26	; 0x18
    126e:	b1 8f       	std	Z+25, r27	; 0x19
		return (m_triangleAcc >> 24);
    1270:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <triangle1+0x19>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1274:	e7 e9       	ldi	r30, 0x97	; 151
    1276:	f1 e0       	ldi	r31, 0x01	; 1
    1278:	c2 88       	ldd	r12, Z+18	; 0x12
    127a:	d3 88       	ldd	r13, Z+19	; 0x13
    127c:	e4 88       	ldd	r14, Z+20	; 0x14
    127e:	f5 88       	ldd	r15, Z+21	; 0x15
    1280:	06 85       	ldd	r16, Z+14	; 0x0e
    1282:	17 85       	ldd	r17, Z+15	; 0x0f
    1284:	20 89       	ldd	r18, Z+16	; 0x10
    1286:	31 89       	ldd	r19, Z+17	; 0x11
    1288:	0c 0d       	add	r16, r12
    128a:	1d 1d       	adc	r17, r13
    128c:	2e 1d       	adc	r18, r14
    128e:	3f 1d       	adc	r19, r15
    1290:	06 87       	std	Z+14, r16	; 0x0e
    1292:	17 87       	std	Z+15, r17	; 0x0f
    1294:	20 8b       	std	Z+16, r18	; 0x10
    1296:	31 8b       	std	Z+17, r19	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1298:	06 85       	ldd	r16, Z+14	; 0x0e
    129a:	17 85       	ldd	r17, Z+15	; 0x0f
    129c:	20 89       	ldd	r18, Z+16	; 0x10
    129e:	31 89       	ldd	r19, Z+17	; 0x11
			val = (triangle1.tick() + (aRamp2.tick() >> 3));
    12a0:	e3 2f       	mov	r30, r19
    12a2:	e6 95       	lsr	r30
    12a4:	e6 95       	lsr	r30
    12a6:	e6 95       	lsr	r30
    12a8:	8e 0f       	add	r24, r30
    12aa:	2c c1       	rjmp	.+600    	; 0x1504 <_Z7oscTickii+0xa7a>
		if (oscSelect2 == 2)
    12ac:	62 30       	cpi	r22, 0x02	; 2
    12ae:	71 05       	cpc	r23, r1
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_Z7oscTickii+0x82a>
    12b2:	a3 c0       	rjmp	.+326    	; 0x13fa <_Z7oscTickii+0x970>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    12b4:	e3 ef       	ldi	r30, 0xF3	; 243
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	42 89       	ldd	r20, Z+18	; 0x12
    12ba:	53 89       	ldd	r21, Z+19	; 0x13
    12bc:	64 89       	ldd	r22, Z+20	; 0x14
    12be:	75 89       	ldd	r23, Z+21	; 0x15
    12c0:	86 85       	ldd	r24, Z+14	; 0x0e
    12c2:	97 85       	ldd	r25, Z+15	; 0x0f
    12c4:	a0 89       	ldd	r26, Z+16	; 0x10
    12c6:	b1 89       	ldd	r27, Z+17	; 0x11
    12c8:	84 0f       	add	r24, r20
    12ca:	95 1f       	adc	r25, r21
    12cc:	a6 1f       	adc	r26, r22
    12ce:	b7 1f       	adc	r27, r23
    12d0:	86 87       	std	Z+14, r24	; 0x0e
    12d2:	97 87       	std	Z+15, r25	; 0x0f
    12d4:	a0 8b       	std	Z+16, r26	; 0x10
    12d6:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    12d8:	86 85       	ldd	r24, Z+14	; 0x0e
    12da:	97 85       	ldd	r25, Z+15	; 0x0f
    12dc:	a0 89       	ldd	r26, Z+16	; 0x10
    12de:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    12e0:	06 85       	ldd	r16, Z+14	; 0x0e
    12e2:	17 85       	ldd	r17, Z+15	; 0x0f
    12e4:	20 89       	ldd	r18, Z+16	; 0x10
    12e6:	31 89       	ldd	r19, Z+17	; 0x11
    12e8:	82 85       	ldd	r24, Z+10	; 0x0a
    12ea:	93 85       	ldd	r25, Z+11	; 0x0b
    12ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    12ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    12f0:	ac 01       	movw	r20, r24
    12f2:	bd 01       	movw	r22, r26
    12f4:	76 95       	lsr	r23
    12f6:	67 95       	ror	r22
    12f8:	57 95       	ror	r21
    12fa:	47 95       	ror	r20
    12fc:	40 17       	cp	r20, r16
    12fe:	51 07       	cpc	r21, r17
    1300:	62 07       	cpc	r22, r18
    1302:	73 07       	cpc	r23, r19
    1304:	68 f0       	brcs	.+26     	; 0x1320 <_Z7oscTickii+0x896>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    1306:	86 85       	ldd	r24, Z+14	; 0x0e
    1308:	97 85       	ldd	r25, Z+15	; 0x0f
    130a:	a0 89       	ldd	r26, Z+16	; 0x10
    130c:	b1 89       	ldd	r27, Z+17	; 0x11
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	86 8b       	std	Z+22, r24	; 0x16
    1318:	97 8b       	std	Z+23, r25	; 0x17
    131a:	a0 8f       	std	Z+24, r26	; 0x18
    131c:	b1 8f       	std	Z+25, r27	; 0x19
    131e:	12 c0       	rjmp	.+36     	; 0x1344 <_Z7oscTickii+0x8ba>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    1320:	e3 ef       	ldi	r30, 0xF3	; 243
    1322:	f1 e0       	ldi	r31, 0x01	; 1
    1324:	46 85       	ldd	r20, Z+14	; 0x0e
    1326:	57 85       	ldd	r21, Z+15	; 0x0f
    1328:	60 89       	ldd	r22, Z+16	; 0x10
    132a:	71 89       	ldd	r23, Z+17	; 0x11
    132c:	84 1b       	sub	r24, r20
    132e:	95 0b       	sbc	r25, r21
    1330:	a6 0b       	sbc	r26, r22
    1332:	b7 0b       	sbc	r27, r23
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	aa 1f       	adc	r26, r26
    133a:	bb 1f       	adc	r27, r27
    133c:	86 8b       	std	Z+22, r24	; 0x16
    133e:	97 8b       	std	Z+23, r25	; 0x17
    1340:	a0 8f       	std	Z+24, r26	; 0x18
    1342:	b1 8f       	std	Z+25, r27	; 0x19
		return (m_triangleAcc >> 24);
    1344:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <triangle1+0x16>
    1348:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <triangle1+0x17>
    134c:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <triangle1+0x18>
    1350:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <triangle1+0x19>
    1354:	8b 2f       	mov	r24, r27
    1356:	99 27       	eor	r25, r25
    1358:	aa 27       	eor	r26, r26
    135a:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    135c:	ed e7       	ldi	r30, 0x7D	; 125
    135e:	f1 e0       	ldi	r31, 0x01	; 1
    1360:	02 89       	ldd	r16, Z+18	; 0x12
    1362:	13 89       	ldd	r17, Z+19	; 0x13
    1364:	24 89       	ldd	r18, Z+20	; 0x14
    1366:	35 89       	ldd	r19, Z+21	; 0x15
    1368:	46 85       	ldd	r20, Z+14	; 0x0e
    136a:	57 85       	ldd	r21, Z+15	; 0x0f
    136c:	60 89       	ldd	r22, Z+16	; 0x10
    136e:	71 89       	ldd	r23, Z+17	; 0x11
    1370:	40 0f       	add	r20, r16
    1372:	51 1f       	adc	r21, r17
    1374:	62 1f       	adc	r22, r18
    1376:	73 1f       	adc	r23, r19
    1378:	46 87       	std	Z+14, r20	; 0x0e
    137a:	57 87       	std	Z+15, r21	; 0x0f
    137c:	60 8b       	std	Z+16, r22	; 0x10
    137e:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1380:	46 85       	ldd	r20, Z+14	; 0x0e
    1382:	57 85       	ldd	r21, Z+15	; 0x0f
    1384:	60 89       	ldd	r22, Z+16	; 0x10
    1386:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    1388:	c6 84       	ldd	r12, Z+14	; 0x0e
    138a:	d7 84       	ldd	r13, Z+15	; 0x0f
    138c:	e0 88       	ldd	r14, Z+16	; 0x10
    138e:	f1 88       	ldd	r15, Z+17	; 0x11
    1390:	42 85       	ldd	r20, Z+10	; 0x0a
    1392:	53 85       	ldd	r21, Z+11	; 0x0b
    1394:	64 85       	ldd	r22, Z+12	; 0x0c
    1396:	75 85       	ldd	r23, Z+13	; 0x0d
    1398:	8a 01       	movw	r16, r20
    139a:	9b 01       	movw	r18, r22
    139c:	36 95       	lsr	r19
    139e:	27 95       	ror	r18
    13a0:	17 95       	ror	r17
    13a2:	07 95       	ror	r16
    13a4:	0c 15       	cp	r16, r12
    13a6:	1d 05       	cpc	r17, r13
    13a8:	2e 05       	cpc	r18, r14
    13aa:	3f 05       	cpc	r19, r15
    13ac:	68 f0       	brcs	.+26     	; 0x13c8 <_Z7oscTickii+0x93e>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    13ae:	46 85       	ldd	r20, Z+14	; 0x0e
    13b0:	57 85       	ldd	r21, Z+15	; 0x0f
    13b2:	60 89       	ldd	r22, Z+16	; 0x10
    13b4:	71 89       	ldd	r23, Z+17	; 0x11
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	66 1f       	adc	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	46 8b       	std	Z+22, r20	; 0x16
    13c0:	57 8b       	std	Z+23, r21	; 0x17
    13c2:	60 8f       	std	Z+24, r22	; 0x18
    13c4:	71 8f       	std	Z+25, r23	; 0x19
    13c6:	12 c0       	rjmp	.+36     	; 0x13ec <_Z7oscTickii+0x962>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    13c8:	ed e7       	ldi	r30, 0x7D	; 125
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	06 85       	ldd	r16, Z+14	; 0x0e
    13ce:	17 85       	ldd	r17, Z+15	; 0x0f
    13d0:	20 89       	ldd	r18, Z+16	; 0x10
    13d2:	31 89       	ldd	r19, Z+17	; 0x11
    13d4:	40 1b       	sub	r20, r16
    13d6:	51 0b       	sbc	r21, r17
    13d8:	62 0b       	sbc	r22, r18
    13da:	73 0b       	sbc	r23, r19
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	66 1f       	adc	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	46 8b       	std	Z+22, r20	; 0x16
    13e6:	57 8b       	std	Z+23, r21	; 0x17
    13e8:	60 8f       	std	Z+24, r22	; 0x18
    13ea:	71 8f       	std	Z+25, r23	; 0x19
			val = (triangle1.tick() + (triangle2.tick() >> 3));
    13ec:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <triangle2+0x19>
    13f0:	e6 95       	lsr	r30
    13f2:	e6 95       	lsr	r30
    13f4:	e6 95       	lsr	r30
    13f6:	8e 0f       	add	r24, r30
    13f8:	6a c4       	rjmp	.+2260   	; 0x1cce <_Z7oscTickii+0x1244>

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
    13fa:	80 e0       	ldi	r24, 0x00	; 0
			val = (triangle1.tick() + (dRamp2.tick() >> 3));
		if (oscSelect2 == 1)
			val = (triangle1.tick() + (aRamp2.tick() >> 3));
		if (oscSelect2 == 2)
			val = (triangle1.tick() + (triangle2.tick() >> 3));
		if (oscSelect2 == 3)
    13fc:	63 30       	cpi	r22, 0x03	; 3
    13fe:	71 05       	cpc	r23, r1
    1400:	09 f0       	breq	.+2      	; 0x1404 <_Z7oscTickii+0x97a>
    1402:	80 c0       	rjmp	.+256    	; 0x1504 <_Z7oscTickii+0xa7a>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1404:	e3 ef       	ldi	r30, 0xF3	; 243
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	42 89       	ldd	r20, Z+18	; 0x12
    140a:	53 89       	ldd	r21, Z+19	; 0x13
    140c:	64 89       	ldd	r22, Z+20	; 0x14
    140e:	75 89       	ldd	r23, Z+21	; 0x15
    1410:	86 85       	ldd	r24, Z+14	; 0x0e
    1412:	97 85       	ldd	r25, Z+15	; 0x0f
    1414:	a0 89       	ldd	r26, Z+16	; 0x10
    1416:	b1 89       	ldd	r27, Z+17	; 0x11
    1418:	84 0f       	add	r24, r20
    141a:	95 1f       	adc	r25, r21
    141c:	a6 1f       	adc	r26, r22
    141e:	b7 1f       	adc	r27, r23
    1420:	86 87       	std	Z+14, r24	; 0x0e
    1422:	97 87       	std	Z+15, r25	; 0x0f
    1424:	a0 8b       	std	Z+16, r26	; 0x10
    1426:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1428:	86 85       	ldd	r24, Z+14	; 0x0e
    142a:	97 85       	ldd	r25, Z+15	; 0x0f
    142c:	a0 89       	ldd	r26, Z+16	; 0x10
    142e:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    1430:	06 85       	ldd	r16, Z+14	; 0x0e
    1432:	17 85       	ldd	r17, Z+15	; 0x0f
    1434:	20 89       	ldd	r18, Z+16	; 0x10
    1436:	31 89       	ldd	r19, Z+17	; 0x11
    1438:	82 85       	ldd	r24, Z+10	; 0x0a
    143a:	93 85       	ldd	r25, Z+11	; 0x0b
    143c:	a4 85       	ldd	r26, Z+12	; 0x0c
    143e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1440:	ac 01       	movw	r20, r24
    1442:	bd 01       	movw	r22, r26
    1444:	76 95       	lsr	r23
    1446:	67 95       	ror	r22
    1448:	57 95       	ror	r21
    144a:	47 95       	ror	r20
    144c:	40 17       	cp	r20, r16
    144e:	51 07       	cpc	r21, r17
    1450:	62 07       	cpc	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	68 f0       	brcs	.+26     	; 0x1470 <_Z7oscTickii+0x9e6>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    1456:	86 85       	ldd	r24, Z+14	; 0x0e
    1458:	97 85       	ldd	r25, Z+15	; 0x0f
    145a:	a0 89       	ldd	r26, Z+16	; 0x10
    145c:	b1 89       	ldd	r27, Z+17	; 0x11
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	aa 1f       	adc	r26, r26
    1464:	bb 1f       	adc	r27, r27
    1466:	86 8b       	std	Z+22, r24	; 0x16
    1468:	97 8b       	std	Z+23, r25	; 0x17
    146a:	a0 8f       	std	Z+24, r26	; 0x18
    146c:	b1 8f       	std	Z+25, r27	; 0x19
    146e:	12 c0       	rjmp	.+36     	; 0x1494 <_Z7oscTickii+0xa0a>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    1470:	e3 ef       	ldi	r30, 0xF3	; 243
    1472:	f1 e0       	ldi	r31, 0x01	; 1
    1474:	46 85       	ldd	r20, Z+14	; 0x0e
    1476:	57 85       	ldd	r21, Z+15	; 0x0f
    1478:	60 89       	ldd	r22, Z+16	; 0x10
    147a:	71 89       	ldd	r23, Z+17	; 0x11
    147c:	84 1b       	sub	r24, r20
    147e:	95 0b       	sbc	r25, r21
    1480:	a6 0b       	sbc	r26, r22
    1482:	b7 0b       	sbc	r27, r23
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	aa 1f       	adc	r26, r26
    148a:	bb 1f       	adc	r27, r27
    148c:	86 8b       	std	Z+22, r24	; 0x16
    148e:	97 8b       	std	Z+23, r25	; 0x17
    1490:	a0 8f       	std	Z+24, r26	; 0x18
    1492:	b1 8f       	std	Z+25, r27	; 0x19
		return (m_triangleAcc >> 24);
    1494:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <triangle1+0x16>
    1498:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <triangle1+0x17>
    149c:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <triangle1+0x18>
    14a0:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <triangle1+0x19>
    14a4:	8b 2f       	mov	r24, r27
    14a6:	99 27       	eor	r25, r25
    14a8:	aa 27       	eor	r26, r26
    14aa:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    14ac:	e3 e6       	ldi	r30, 0x63	; 99
    14ae:	f1 e0       	ldi	r31, 0x01	; 1
    14b0:	02 89       	ldd	r16, Z+18	; 0x12
    14b2:	13 89       	ldd	r17, Z+19	; 0x13
    14b4:	24 89       	ldd	r18, Z+20	; 0x14
    14b6:	35 89       	ldd	r19, Z+21	; 0x15
    14b8:	46 85       	ldd	r20, Z+14	; 0x0e
    14ba:	57 85       	ldd	r21, Z+15	; 0x0f
    14bc:	60 89       	ldd	r22, Z+16	; 0x10
    14be:	71 89       	ldd	r23, Z+17	; 0x11
    14c0:	40 0f       	add	r20, r16
    14c2:	51 1f       	adc	r21, r17
    14c4:	62 1f       	adc	r22, r18
    14c6:	73 1f       	adc	r23, r19
    14c8:	46 87       	std	Z+14, r20	; 0x0e
    14ca:	57 87       	std	Z+15, r21	; 0x0f
    14cc:	60 8b       	std	Z+16, r22	; 0x10
    14ce:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    14d0:	46 85       	ldd	r20, Z+14	; 0x0e
    14d2:	57 85       	ldd	r21, Z+15	; 0x0f
    14d4:	60 89       	ldd	r22, Z+16	; 0x10
    14d6:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    14d8:	06 85       	ldd	r16, Z+14	; 0x0e
    14da:	17 85       	ldd	r17, Z+15	; 0x0f
    14dc:	20 89       	ldd	r18, Z+16	; 0x10
    14de:	31 89       	ldd	r19, Z+17	; 0x11
    14e0:	46 89       	ldd	r20, Z+22	; 0x16
    14e2:	57 89       	ldd	r21, Z+23	; 0x17
    14e4:	60 8d       	ldd	r22, Z+24	; 0x18
    14e6:	71 8d       	ldd	r23, Z+25	; 0x19
    14e8:	04 17       	cp	r16, r20
    14ea:	15 07       	cpc	r17, r21
    14ec:	26 07       	cpc	r18, r22
    14ee:	37 07       	cpc	r19, r23
    14f0:	18 f4       	brcc	.+6      	; 0x14f8 <_Z7oscTickii+0xa6e>
			return (m_max32 >> 24);
    14f2:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <sqWave2+0xd>
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <_Z7oscTickii+0xa70>
		else
			return 0;
    14f8:	e0 e0       	ldi	r30, 0x00	; 0
			val = (triangle1.tick() + (sqWave2.tick() >> 3));
    14fa:	e6 95       	lsr	r30
    14fc:	e6 95       	lsr	r30
    14fe:	e6 95       	lsr	r30
    1500:	8e 0f       	add	r24, r30
    1502:	e5 c3       	rjmp	.+1994   	; 0x1cce <_Z7oscTickii+0x1244>
		if (oscSelect2 == 4)
    1504:	64 30       	cpi	r22, 0x04	; 4
    1506:	71 05       	cpc	r23, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <_Z7oscTickii+0xa82>
    150a:	e1 c3       	rjmp	.+1986   	; 0x1cce <_Z7oscTickii+0x1244>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    150c:	e3 ef       	ldi	r30, 0xF3	; 243
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	42 89       	ldd	r20, Z+18	; 0x12
    1512:	53 89       	ldd	r21, Z+19	; 0x13
    1514:	64 89       	ldd	r22, Z+20	; 0x14
    1516:	75 89       	ldd	r23, Z+21	; 0x15
    1518:	86 85       	ldd	r24, Z+14	; 0x0e
    151a:	97 85       	ldd	r25, Z+15	; 0x0f
    151c:	a0 89       	ldd	r26, Z+16	; 0x10
    151e:	b1 89       	ldd	r27, Z+17	; 0x11
    1520:	84 0f       	add	r24, r20
    1522:	95 1f       	adc	r25, r21
    1524:	a6 1f       	adc	r26, r22
    1526:	b7 1f       	adc	r27, r23
    1528:	86 87       	std	Z+14, r24	; 0x0e
    152a:	97 87       	std	Z+15, r25	; 0x0f
    152c:	a0 8b       	std	Z+16, r26	; 0x10
    152e:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1530:	86 85       	ldd	r24, Z+14	; 0x0e
    1532:	97 85       	ldd	r25, Z+15	; 0x0f
    1534:	a0 89       	ldd	r26, Z+16	; 0x10
    1536:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    1538:	06 85       	ldd	r16, Z+14	; 0x0e
    153a:	17 85       	ldd	r17, Z+15	; 0x0f
    153c:	20 89       	ldd	r18, Z+16	; 0x10
    153e:	31 89       	ldd	r19, Z+17	; 0x11
    1540:	82 85       	ldd	r24, Z+10	; 0x0a
    1542:	93 85       	ldd	r25, Z+11	; 0x0b
    1544:	a4 85       	ldd	r26, Z+12	; 0x0c
    1546:	b5 85       	ldd	r27, Z+13	; 0x0d
    1548:	ac 01       	movw	r20, r24
    154a:	bd 01       	movw	r22, r26
    154c:	76 95       	lsr	r23
    154e:	67 95       	ror	r22
    1550:	57 95       	ror	r21
    1552:	47 95       	ror	r20
    1554:	40 17       	cp	r20, r16
    1556:	51 07       	cpc	r21, r17
    1558:	62 07       	cpc	r22, r18
    155a:	73 07       	cpc	r23, r19
    155c:	68 f0       	brcs	.+26     	; 0x1578 <_Z7oscTickii+0xaee>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    155e:	86 85       	ldd	r24, Z+14	; 0x0e
    1560:	97 85       	ldd	r25, Z+15	; 0x0f
    1562:	a0 89       	ldd	r26, Z+16	; 0x10
    1564:	b1 89       	ldd	r27, Z+17	; 0x11
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	86 8b       	std	Z+22, r24	; 0x16
    1570:	97 8b       	std	Z+23, r25	; 0x17
    1572:	a0 8f       	std	Z+24, r26	; 0x18
    1574:	b1 8f       	std	Z+25, r27	; 0x19
    1576:	12 c0       	rjmp	.+36     	; 0x159c <_Z7oscTickii+0xb12>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    1578:	e3 ef       	ldi	r30, 0xF3	; 243
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	46 85       	ldd	r20, Z+14	; 0x0e
    157e:	57 85       	ldd	r21, Z+15	; 0x0f
    1580:	60 89       	ldd	r22, Z+16	; 0x10
    1582:	71 89       	ldd	r23, Z+17	; 0x11
    1584:	84 1b       	sub	r24, r20
    1586:	95 0b       	sbc	r25, r21
    1588:	a6 0b       	sbc	r26, r22
    158a:	b7 0b       	sbc	r27, r23
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	aa 1f       	adc	r26, r26
    1592:	bb 1f       	adc	r27, r27
    1594:	86 8b       	std	Z+22, r24	; 0x16
    1596:	97 8b       	std	Z+23, r25	; 0x17
    1598:	a0 8f       	std	Z+24, r26	; 0x18
    159a:	b1 8f       	std	Z+25, r27	; 0x19
		return (m_triangleAcc >> 24);
    159c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <triangle1+0x16>
    15a0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <triangle1+0x17>
    15a4:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <triangle1+0x18>
    15a8:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <triangle1+0x19>
    15ac:	8b 2f       	mov	r24, r27
    15ae:	99 27       	eor	r25, r25
    15b0:	aa 27       	eor	r26, r26
    15b2:	bb 27       	eor	r27, r27
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    15b4:	ed e4       	ldi	r30, 0x4D	; 77
    15b6:	f1 e0       	ldi	r31, 0x01	; 1
    15b8:	02 89       	ldd	r16, Z+18	; 0x12
    15ba:	13 89       	ldd	r17, Z+19	; 0x13
    15bc:	24 89       	ldd	r18, Z+20	; 0x14
    15be:	35 89       	ldd	r19, Z+21	; 0x15
    15c0:	46 85       	ldd	r20, Z+14	; 0x0e
    15c2:	57 85       	ldd	r21, Z+15	; 0x0f
    15c4:	60 89       	ldd	r22, Z+16	; 0x10
    15c6:	71 89       	ldd	r23, Z+17	; 0x11
    15c8:	40 0f       	add	r20, r16
    15ca:	51 1f       	adc	r21, r17
    15cc:	62 1f       	adc	r22, r18
    15ce:	73 1f       	adc	r23, r19
    15d0:	46 87       	std	Z+14, r20	; 0x0e
    15d2:	57 87       	std	Z+15, r21	; 0x0f
    15d4:	60 8b       	std	Z+16, r22	; 0x10
    15d6:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    15d8:	46 85       	ldd	r20, Z+14	; 0x0e
    15da:	57 85       	ldd	r21, Z+15	; 0x0f
    15dc:	60 89       	ldd	r22, Z+16	; 0x10
    15de:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    15e0:	e7 2f       	mov	r30, r23
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	e8 51       	subi	r30, 0x18	; 24
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	e4 91       	lpm	r30, Z
			val = (triangle1.tick() + (sine2.tick() >> 3));
    15ea:	e6 95       	lsr	r30
    15ec:	e6 95       	lsr	r30
    15ee:	e6 95       	lsr	r30
    15f0:	8e 0f       	add	r24, r30
    15f2:	6d c3       	rjmp	.+1754   	; 0x1cce <_Z7oscTickii+0x1244>
	}
	else if (oscSelect1 == 3)
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f0       	breq	.+2      	; 0x15fc <_Z7oscTickii+0xb72>
    15fa:	c3 c1       	rjmp	.+902    	; 0x1982 <_Z7oscTickii+0xef8>
	{
		if (oscSelect2 == 0)
    15fc:	61 15       	cp	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	09 f0       	breq	.+2      	; 0x1604 <_Z7oscTickii+0xb7a>
    1602:	5b c0       	rjmp	.+182    	; 0x16ba <_Z7oscTickii+0xc30>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1604:	e9 ed       	ldi	r30, 0xD9	; 217
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	02 89       	ldd	r16, Z+18	; 0x12
    160a:	13 89       	ldd	r17, Z+19	; 0x13
    160c:	24 89       	ldd	r18, Z+20	; 0x14
    160e:	35 89       	ldd	r19, Z+21	; 0x15
    1610:	86 85       	ldd	r24, Z+14	; 0x0e
    1612:	97 85       	ldd	r25, Z+15	; 0x0f
    1614:	a0 89       	ldd	r26, Z+16	; 0x10
    1616:	b1 89       	ldd	r27, Z+17	; 0x11
    1618:	80 0f       	add	r24, r16
    161a:	91 1f       	adc	r25, r17
    161c:	a2 1f       	adc	r26, r18
    161e:	b3 1f       	adc	r27, r19
    1620:	86 87       	std	Z+14, r24	; 0x0e
    1622:	97 87       	std	Z+15, r25	; 0x0f
    1624:	a0 8b       	std	Z+16, r26	; 0x10
    1626:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1628:	86 85       	ldd	r24, Z+14	; 0x0e
    162a:	97 85       	ldd	r25, Z+15	; 0x0f
    162c:	a0 89       	ldd	r26, Z+16	; 0x10
    162e:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    1630:	06 85       	ldd	r16, Z+14	; 0x0e
    1632:	17 85       	ldd	r17, Z+15	; 0x0f
    1634:	20 89       	ldd	r18, Z+16	; 0x10
    1636:	31 89       	ldd	r19, Z+17	; 0x11
    1638:	86 89       	ldd	r24, Z+22	; 0x16
    163a:	97 89       	ldd	r25, Z+23	; 0x17
    163c:	a0 8d       	ldd	r26, Z+24	; 0x18
    163e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1640:	08 17       	cp	r16, r24
    1642:	19 07       	cpc	r17, r25
    1644:	2a 07       	cpc	r18, r26
    1646:	3b 07       	cpc	r19, r27
    1648:	18 f4       	brcc	.+6      	; 0x1650 <_Z7oscTickii+0xbc6>
			return (m_max32 >> 24);
    164a:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <sqWave1+0xd>
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <_Z7oscTickii+0xbc8>
		else
			return 0;
    1650:	e0 e0       	ldi	r30, 0x00	; 0
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1652:	ad ea       	ldi	r26, 0xAD	; 173
    1654:	b1 e0       	ldi	r27, 0x01	; 1
    1656:	52 96       	adiw	r26, 0x12	; 18
    1658:	cd 90       	ld	r12, X+
    165a:	dd 90       	ld	r13, X+
    165c:	ed 90       	ld	r14, X+
    165e:	fc 90       	ld	r15, X
    1660:	55 97       	sbiw	r26, 0x15	; 21
    1662:	1e 96       	adiw	r26, 0x0e	; 14
    1664:	0d 91       	ld	r16, X+
    1666:	1d 91       	ld	r17, X+
    1668:	2d 91       	ld	r18, X+
    166a:	3c 91       	ld	r19, X
    166c:	51 97       	sbiw	r26, 0x11	; 17
    166e:	0c 0d       	add	r16, r12
    1670:	1d 1d       	adc	r17, r13
    1672:	2e 1d       	adc	r18, r14
    1674:	3f 1d       	adc	r19, r15
    1676:	1e 96       	adiw	r26, 0x0e	; 14
    1678:	0d 93       	st	X+, r16
    167a:	1d 93       	st	X+, r17
    167c:	2d 93       	st	X+, r18
    167e:	3c 93       	st	X, r19
    1680:	51 97       	sbiw	r26, 0x11	; 17
		return (m_accumulator >> 24); // Get the 8-bit real number
    1682:	1e 96       	adiw	r26, 0x0e	; 14
    1684:	0d 91       	ld	r16, X+
    1686:	1d 91       	ld	r17, X+
    1688:	2d 91       	ld	r18, X+
    168a:	3c 91       	ld	r19, X
    168c:	51 97       	sbiw	r26, 0x11	; 17
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
    168e:	1e 96       	adiw	r26, 0x0e	; 14
    1690:	cd 90       	ld	r12, X+
    1692:	dd 90       	ld	r13, X+
    1694:	ed 90       	ld	r14, X+
    1696:	fc 90       	ld	r15, X
    1698:	51 97       	sbiw	r26, 0x11	; 17
			val = (sqWave1.tick() + (dRamp2.tick() >> 3));
    169a:	1a 96       	adiw	r26, 0x0a	; 10
    169c:	0d 91       	ld	r16, X+
    169e:	1d 91       	ld	r17, X+
    16a0:	2d 91       	ld	r18, X+
    16a2:	3c 91       	ld	r19, X
    16a4:	1d 97       	sbiw	r26, 0x0d	; 13
    16a6:	0c 19       	sub	r16, r12
    16a8:	1d 09       	sbc	r17, r13
    16aa:	2e 09       	sbc	r18, r14
    16ac:	3f 09       	sbc	r19, r15
    16ae:	83 2f       	mov	r24, r19
    16b0:	86 95       	lsr	r24
    16b2:	86 95       	lsr	r24
    16b4:	86 95       	lsr	r24
    16b6:	8e 0f       	add	r24, r30
    16b8:	c2 c0       	rjmp	.+388    	; 0x183e <_Z7oscTickii+0xdb4>
		if (oscSelect2 == 1)
    16ba:	61 30       	cpi	r22, 0x01	; 1
    16bc:	71 05       	cpc	r23, r1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <_Z7oscTickii+0xc38>
    16c0:	43 c0       	rjmp	.+134    	; 0x1748 <_Z7oscTickii+0xcbe>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    16c2:	e9 ed       	ldi	r30, 0xD9	; 217
    16c4:	f1 e0       	ldi	r31, 0x01	; 1
    16c6:	02 89       	ldd	r16, Z+18	; 0x12
    16c8:	13 89       	ldd	r17, Z+19	; 0x13
    16ca:	24 89       	ldd	r18, Z+20	; 0x14
    16cc:	35 89       	ldd	r19, Z+21	; 0x15
    16ce:	86 85       	ldd	r24, Z+14	; 0x0e
    16d0:	97 85       	ldd	r25, Z+15	; 0x0f
    16d2:	a0 89       	ldd	r26, Z+16	; 0x10
    16d4:	b1 89       	ldd	r27, Z+17	; 0x11
    16d6:	80 0f       	add	r24, r16
    16d8:	91 1f       	adc	r25, r17
    16da:	a2 1f       	adc	r26, r18
    16dc:	b3 1f       	adc	r27, r19
    16de:	86 87       	std	Z+14, r24	; 0x0e
    16e0:	97 87       	std	Z+15, r25	; 0x0f
    16e2:	a0 8b       	std	Z+16, r26	; 0x10
    16e4:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    16e6:	86 85       	ldd	r24, Z+14	; 0x0e
    16e8:	97 85       	ldd	r25, Z+15	; 0x0f
    16ea:	a0 89       	ldd	r26, Z+16	; 0x10
    16ec:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    16ee:	06 85       	ldd	r16, Z+14	; 0x0e
    16f0:	17 85       	ldd	r17, Z+15	; 0x0f
    16f2:	20 89       	ldd	r18, Z+16	; 0x10
    16f4:	31 89       	ldd	r19, Z+17	; 0x11
    16f6:	86 89       	ldd	r24, Z+22	; 0x16
    16f8:	97 89       	ldd	r25, Z+23	; 0x17
    16fa:	a0 8d       	ldd	r26, Z+24	; 0x18
    16fc:	b1 8d       	ldd	r27, Z+25	; 0x19
    16fe:	08 17       	cp	r16, r24
    1700:	19 07       	cpc	r17, r25
    1702:	2a 07       	cpc	r18, r26
    1704:	3b 07       	cpc	r19, r27
    1706:	18 f4       	brcc	.+6      	; 0x170e <_Z7oscTickii+0xc84>
			return (m_max32 >> 24);
    1708:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <sqWave1+0xd>
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <_Z7oscTickii+0xc86>
		else
			return 0;
    170e:	80 e0       	ldi	r24, 0x00	; 0
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1710:	e7 e9       	ldi	r30, 0x97	; 151
    1712:	f1 e0       	ldi	r31, 0x01	; 1
    1714:	c2 88       	ldd	r12, Z+18	; 0x12
    1716:	d3 88       	ldd	r13, Z+19	; 0x13
    1718:	e4 88       	ldd	r14, Z+20	; 0x14
    171a:	f5 88       	ldd	r15, Z+21	; 0x15
    171c:	06 85       	ldd	r16, Z+14	; 0x0e
    171e:	17 85       	ldd	r17, Z+15	; 0x0f
    1720:	20 89       	ldd	r18, Z+16	; 0x10
    1722:	31 89       	ldd	r19, Z+17	; 0x11
    1724:	0c 0d       	add	r16, r12
    1726:	1d 1d       	adc	r17, r13
    1728:	2e 1d       	adc	r18, r14
    172a:	3f 1d       	adc	r19, r15
    172c:	06 87       	std	Z+14, r16	; 0x0e
    172e:	17 87       	std	Z+15, r17	; 0x0f
    1730:	20 8b       	std	Z+16, r18	; 0x10
    1732:	31 8b       	std	Z+17, r19	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1734:	06 85       	ldd	r16, Z+14	; 0x0e
    1736:	17 85       	ldd	r17, Z+15	; 0x0f
    1738:	20 89       	ldd	r18, Z+16	; 0x10
    173a:	31 89       	ldd	r19, Z+17	; 0x11
			val = (sqWave1.tick() + (aRamp2.tick() >> 3));
    173c:	e3 2f       	mov	r30, r19
    173e:	e6 95       	lsr	r30
    1740:	e6 95       	lsr	r30
    1742:	e6 95       	lsr	r30
    1744:	8e 0f       	add	r24, r30
    1746:	d2 c0       	rjmp	.+420    	; 0x18ec <_Z7oscTickii+0xe62>
		if (oscSelect2 == 2)
    1748:	62 30       	cpi	r22, 0x02	; 2
    174a:	71 05       	cpc	r23, r1
    174c:	09 f0       	breq	.+2      	; 0x1750 <_Z7oscTickii+0xcc6>
    174e:	76 c0       	rjmp	.+236    	; 0x183c <_Z7oscTickii+0xdb2>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1750:	e9 ed       	ldi	r30, 0xD9	; 217
    1752:	f1 e0       	ldi	r31, 0x01	; 1
    1754:	42 89       	ldd	r20, Z+18	; 0x12
    1756:	53 89       	ldd	r21, Z+19	; 0x13
    1758:	64 89       	ldd	r22, Z+20	; 0x14
    175a:	75 89       	ldd	r23, Z+21	; 0x15
    175c:	86 85       	ldd	r24, Z+14	; 0x0e
    175e:	97 85       	ldd	r25, Z+15	; 0x0f
    1760:	a0 89       	ldd	r26, Z+16	; 0x10
    1762:	b1 89       	ldd	r27, Z+17	; 0x11
    1764:	84 0f       	add	r24, r20
    1766:	95 1f       	adc	r25, r21
    1768:	a6 1f       	adc	r26, r22
    176a:	b7 1f       	adc	r27, r23
    176c:	86 87       	std	Z+14, r24	; 0x0e
    176e:	97 87       	std	Z+15, r25	; 0x0f
    1770:	a0 8b       	std	Z+16, r26	; 0x10
    1772:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1774:	86 85       	ldd	r24, Z+14	; 0x0e
    1776:	97 85       	ldd	r25, Z+15	; 0x0f
    1778:	a0 89       	ldd	r26, Z+16	; 0x10
    177a:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    177c:	46 85       	ldd	r20, Z+14	; 0x0e
    177e:	57 85       	ldd	r21, Z+15	; 0x0f
    1780:	60 89       	ldd	r22, Z+16	; 0x10
    1782:	71 89       	ldd	r23, Z+17	; 0x11
    1784:	86 89       	ldd	r24, Z+22	; 0x16
    1786:	97 89       	ldd	r25, Z+23	; 0x17
    1788:	a0 8d       	ldd	r26, Z+24	; 0x18
    178a:	b1 8d       	ldd	r27, Z+25	; 0x19
    178c:	48 17       	cp	r20, r24
    178e:	59 07       	cpc	r21, r25
    1790:	6a 07       	cpc	r22, r26
    1792:	7b 07       	cpc	r23, r27
    1794:	18 f4       	brcc	.+6      	; 0x179c <_Z7oscTickii+0xd12>
			return (m_max32 >> 24);
    1796:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <sqWave1+0xd>
    179a:	01 c0       	rjmp	.+2      	; 0x179e <_Z7oscTickii+0xd14>
		else
			return 0;
    179c:	90 e0       	ldi	r25, 0x00	; 0
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    179e:	ed e7       	ldi	r30, 0x7D	; 125
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	02 89       	ldd	r16, Z+18	; 0x12
    17a4:	13 89       	ldd	r17, Z+19	; 0x13
    17a6:	24 89       	ldd	r18, Z+20	; 0x14
    17a8:	35 89       	ldd	r19, Z+21	; 0x15
    17aa:	46 85       	ldd	r20, Z+14	; 0x0e
    17ac:	57 85       	ldd	r21, Z+15	; 0x0f
    17ae:	60 89       	ldd	r22, Z+16	; 0x10
    17b0:	71 89       	ldd	r23, Z+17	; 0x11
    17b2:	40 0f       	add	r20, r16
    17b4:	51 1f       	adc	r21, r17
    17b6:	62 1f       	adc	r22, r18
    17b8:	73 1f       	adc	r23, r19
    17ba:	46 87       	std	Z+14, r20	; 0x0e
    17bc:	57 87       	std	Z+15, r21	; 0x0f
    17be:	60 8b       	std	Z+16, r22	; 0x10
    17c0:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    17c2:	46 85       	ldd	r20, Z+14	; 0x0e
    17c4:	57 85       	ldd	r21, Z+15	; 0x0f
    17c6:	60 89       	ldd	r22, Z+16	; 0x10
    17c8:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    17ca:	c6 84       	ldd	r12, Z+14	; 0x0e
    17cc:	d7 84       	ldd	r13, Z+15	; 0x0f
    17ce:	e0 88       	ldd	r14, Z+16	; 0x10
    17d0:	f1 88       	ldd	r15, Z+17	; 0x11
    17d2:	42 85       	ldd	r20, Z+10	; 0x0a
    17d4:	53 85       	ldd	r21, Z+11	; 0x0b
    17d6:	64 85       	ldd	r22, Z+12	; 0x0c
    17d8:	75 85       	ldd	r23, Z+13	; 0x0d
    17da:	8a 01       	movw	r16, r20
    17dc:	9b 01       	movw	r18, r22
    17de:	36 95       	lsr	r19
    17e0:	27 95       	ror	r18
    17e2:	17 95       	ror	r17
    17e4:	07 95       	ror	r16
    17e6:	0c 15       	cp	r16, r12
    17e8:	1d 05       	cpc	r17, r13
    17ea:	2e 05       	cpc	r18, r14
    17ec:	3f 05       	cpc	r19, r15
    17ee:	68 f0       	brcs	.+26     	; 0x180a <_Z7oscTickii+0xd80>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    17f0:	46 85       	ldd	r20, Z+14	; 0x0e
    17f2:	57 85       	ldd	r21, Z+15	; 0x0f
    17f4:	60 89       	ldd	r22, Z+16	; 0x10
    17f6:	71 89       	ldd	r23, Z+17	; 0x11
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	66 1f       	adc	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	46 8b       	std	Z+22, r20	; 0x16
    1802:	57 8b       	std	Z+23, r21	; 0x17
    1804:	60 8f       	std	Z+24, r22	; 0x18
    1806:	71 8f       	std	Z+25, r23	; 0x19
    1808:	12 c0       	rjmp	.+36     	; 0x182e <_Z7oscTickii+0xda4>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    180a:	ed e7       	ldi	r30, 0x7D	; 125
    180c:	f1 e0       	ldi	r31, 0x01	; 1
    180e:	06 85       	ldd	r16, Z+14	; 0x0e
    1810:	17 85       	ldd	r17, Z+15	; 0x0f
    1812:	20 89       	ldd	r18, Z+16	; 0x10
    1814:	31 89       	ldd	r19, Z+17	; 0x11
    1816:	40 1b       	sub	r20, r16
    1818:	51 0b       	sbc	r21, r17
    181a:	62 0b       	sbc	r22, r18
    181c:	73 0b       	sbc	r23, r19
    181e:	44 0f       	add	r20, r20
    1820:	55 1f       	adc	r21, r21
    1822:	66 1f       	adc	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	46 8b       	std	Z+22, r20	; 0x16
    1828:	57 8b       	std	Z+23, r21	; 0x17
    182a:	60 8f       	std	Z+24, r22	; 0x18
    182c:	71 8f       	std	Z+25, r23	; 0x19
			val = (sqWave1.tick() + (triangle2.tick() >> 3));
    182e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <triangle2+0x19>
    1832:	86 95       	lsr	r24
    1834:	86 95       	lsr	r24
    1836:	86 95       	lsr	r24
    1838:	89 0f       	add	r24, r25
    183a:	49 c2       	rjmp	.+1170   	; 0x1cce <_Z7oscTickii+0x1244>

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
    183c:	80 e0       	ldi	r24, 0x00	; 0
			val = (sqWave1.tick() + (dRamp2.tick() >> 3));
		if (oscSelect2 == 1)
			val = (sqWave1.tick() + (aRamp2.tick() >> 3));
		if (oscSelect2 == 2)
			val = (sqWave1.tick() + (triangle2.tick() >> 3));
		if (oscSelect2 == 3)
    183e:	63 30       	cpi	r22, 0x03	; 3
    1840:	71 05       	cpc	r23, r1
    1842:	09 f0       	breq	.+2      	; 0x1846 <_Z7oscTickii+0xdbc>
    1844:	53 c0       	rjmp	.+166    	; 0x18ec <_Z7oscTickii+0xe62>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1846:	e9 ed       	ldi	r30, 0xD9	; 217
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	42 89       	ldd	r20, Z+18	; 0x12
    184c:	53 89       	ldd	r21, Z+19	; 0x13
    184e:	64 89       	ldd	r22, Z+20	; 0x14
    1850:	75 89       	ldd	r23, Z+21	; 0x15
    1852:	86 85       	ldd	r24, Z+14	; 0x0e
    1854:	97 85       	ldd	r25, Z+15	; 0x0f
    1856:	a0 89       	ldd	r26, Z+16	; 0x10
    1858:	b1 89       	ldd	r27, Z+17	; 0x11
    185a:	84 0f       	add	r24, r20
    185c:	95 1f       	adc	r25, r21
    185e:	a6 1f       	adc	r26, r22
    1860:	b7 1f       	adc	r27, r23
    1862:	86 87       	std	Z+14, r24	; 0x0e
    1864:	97 87       	std	Z+15, r25	; 0x0f
    1866:	a0 8b       	std	Z+16, r26	; 0x10
    1868:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    186a:	86 85       	ldd	r24, Z+14	; 0x0e
    186c:	97 85       	ldd	r25, Z+15	; 0x0f
    186e:	a0 89       	ldd	r26, Z+16	; 0x10
    1870:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    1872:	46 85       	ldd	r20, Z+14	; 0x0e
    1874:	57 85       	ldd	r21, Z+15	; 0x0f
    1876:	60 89       	ldd	r22, Z+16	; 0x10
    1878:	71 89       	ldd	r23, Z+17	; 0x11
    187a:	86 89       	ldd	r24, Z+22	; 0x16
    187c:	97 89       	ldd	r25, Z+23	; 0x17
    187e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1880:	b1 8d       	ldd	r27, Z+25	; 0x19
    1882:	48 17       	cp	r20, r24
    1884:	59 07       	cpc	r21, r25
    1886:	6a 07       	cpc	r22, r26
    1888:	7b 07       	cpc	r23, r27
    188a:	18 f4       	brcc	.+6      	; 0x1892 <_Z7oscTickii+0xe08>
			return (m_max32 >> 24);
    188c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <sqWave1+0xd>
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <_Z7oscTickii+0xe0a>
		else
			return 0;
    1892:	90 e0       	ldi	r25, 0x00	; 0
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1894:	e3 e6       	ldi	r30, 0x63	; 99
    1896:	f1 e0       	ldi	r31, 0x01	; 1
    1898:	02 89       	ldd	r16, Z+18	; 0x12
    189a:	13 89       	ldd	r17, Z+19	; 0x13
    189c:	24 89       	ldd	r18, Z+20	; 0x14
    189e:	35 89       	ldd	r19, Z+21	; 0x15
    18a0:	46 85       	ldd	r20, Z+14	; 0x0e
    18a2:	57 85       	ldd	r21, Z+15	; 0x0f
    18a4:	60 89       	ldd	r22, Z+16	; 0x10
    18a6:	71 89       	ldd	r23, Z+17	; 0x11
    18a8:	40 0f       	add	r20, r16
    18aa:	51 1f       	adc	r21, r17
    18ac:	62 1f       	adc	r22, r18
    18ae:	73 1f       	adc	r23, r19
    18b0:	46 87       	std	Z+14, r20	; 0x0e
    18b2:	57 87       	std	Z+15, r21	; 0x0f
    18b4:	60 8b       	std	Z+16, r22	; 0x10
    18b6:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    18b8:	46 85       	ldd	r20, Z+14	; 0x0e
    18ba:	57 85       	ldd	r21, Z+15	; 0x0f
    18bc:	60 89       	ldd	r22, Z+16	; 0x10
    18be:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    18c0:	06 85       	ldd	r16, Z+14	; 0x0e
    18c2:	17 85       	ldd	r17, Z+15	; 0x0f
    18c4:	20 89       	ldd	r18, Z+16	; 0x10
    18c6:	31 89       	ldd	r19, Z+17	; 0x11
    18c8:	46 89       	ldd	r20, Z+22	; 0x16
    18ca:	57 89       	ldd	r21, Z+23	; 0x17
    18cc:	60 8d       	ldd	r22, Z+24	; 0x18
    18ce:	71 8d       	ldd	r23, Z+25	; 0x19
    18d0:	04 17       	cp	r16, r20
    18d2:	15 07       	cpc	r17, r21
    18d4:	26 07       	cpc	r18, r22
    18d6:	37 07       	cpc	r19, r23
    18d8:	18 f4       	brcc	.+6      	; 0x18e0 <_Z7oscTickii+0xe56>
			return (m_max32 >> 24);
    18da:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sqWave2+0xd>
    18de:	01 c0       	rjmp	.+2      	; 0x18e2 <_Z7oscTickii+0xe58>
		else
			return 0;
    18e0:	80 e0       	ldi	r24, 0x00	; 0
			val = (sqWave1.tick() + (sqWave2.tick() >> 3));
    18e2:	86 95       	lsr	r24
    18e4:	86 95       	lsr	r24
    18e6:	86 95       	lsr	r24
    18e8:	89 0f       	add	r24, r25
    18ea:	f1 c1       	rjmp	.+994    	; 0x1cce <_Z7oscTickii+0x1244>
		if (oscSelect2 == 4)
    18ec:	64 30       	cpi	r22, 0x04	; 4
    18ee:	71 05       	cpc	r23, r1
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <_Z7oscTickii+0xe6a>
    18f2:	ed c1       	rjmp	.+986    	; 0x1cce <_Z7oscTickii+0x1244>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    18f4:	e9 ed       	ldi	r30, 0xD9	; 217
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	42 89       	ldd	r20, Z+18	; 0x12
    18fa:	53 89       	ldd	r21, Z+19	; 0x13
    18fc:	64 89       	ldd	r22, Z+20	; 0x14
    18fe:	75 89       	ldd	r23, Z+21	; 0x15
    1900:	86 85       	ldd	r24, Z+14	; 0x0e
    1902:	97 85       	ldd	r25, Z+15	; 0x0f
    1904:	a0 89       	ldd	r26, Z+16	; 0x10
    1906:	b1 89       	ldd	r27, Z+17	; 0x11
    1908:	84 0f       	add	r24, r20
    190a:	95 1f       	adc	r25, r21
    190c:	a6 1f       	adc	r26, r22
    190e:	b7 1f       	adc	r27, r23
    1910:	86 87       	std	Z+14, r24	; 0x0e
    1912:	97 87       	std	Z+15, r25	; 0x0f
    1914:	a0 8b       	std	Z+16, r26	; 0x10
    1916:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1918:	86 85       	ldd	r24, Z+14	; 0x0e
    191a:	97 85       	ldd	r25, Z+15	; 0x0f
    191c:	a0 89       	ldd	r26, Z+16	; 0x10
    191e:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    1920:	46 85       	ldd	r20, Z+14	; 0x0e
    1922:	57 85       	ldd	r21, Z+15	; 0x0f
    1924:	60 89       	ldd	r22, Z+16	; 0x10
    1926:	71 89       	ldd	r23, Z+17	; 0x11
    1928:	86 89       	ldd	r24, Z+22	; 0x16
    192a:	97 89       	ldd	r25, Z+23	; 0x17
    192c:	a0 8d       	ldd	r26, Z+24	; 0x18
    192e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1930:	48 17       	cp	r20, r24
    1932:	59 07       	cpc	r21, r25
    1934:	6a 07       	cpc	r22, r26
    1936:	7b 07       	cpc	r23, r27
    1938:	18 f4       	brcc	.+6      	; 0x1940 <_Z7oscTickii+0xeb6>
			return (m_max32 >> 24);
    193a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <sqWave1+0xd>
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <_Z7oscTickii+0xeb8>
		else
			return 0;
    1940:	90 e0       	ldi	r25, 0x00	; 0
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1942:	ed e4       	ldi	r30, 0x4D	; 77
    1944:	f1 e0       	ldi	r31, 0x01	; 1
    1946:	02 89       	ldd	r16, Z+18	; 0x12
    1948:	13 89       	ldd	r17, Z+19	; 0x13
    194a:	24 89       	ldd	r18, Z+20	; 0x14
    194c:	35 89       	ldd	r19, Z+21	; 0x15
    194e:	46 85       	ldd	r20, Z+14	; 0x0e
    1950:	57 85       	ldd	r21, Z+15	; 0x0f
    1952:	60 89       	ldd	r22, Z+16	; 0x10
    1954:	71 89       	ldd	r23, Z+17	; 0x11
    1956:	40 0f       	add	r20, r16
    1958:	51 1f       	adc	r21, r17
    195a:	62 1f       	adc	r22, r18
    195c:	73 1f       	adc	r23, r19
    195e:	46 87       	std	Z+14, r20	; 0x0e
    1960:	57 87       	std	Z+15, r21	; 0x0f
    1962:	60 8b       	std	Z+16, r22	; 0x10
    1964:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1966:	46 85       	ldd	r20, Z+14	; 0x0e
    1968:	57 85       	ldd	r21, Z+15	; 0x0f
    196a:	60 89       	ldd	r22, Z+16	; 0x10
    196c:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    196e:	e7 2f       	mov	r30, r23
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	e8 51       	subi	r30, 0x18	; 24
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	84 91       	lpm	r24, Z
			val = (sqWave1.tick() + (sine2.tick() >> 3));
    1978:	86 95       	lsr	r24
    197a:	86 95       	lsr	r24
    197c:	86 95       	lsr	r24
    197e:	89 0f       	add	r24, r25
    1980:	a6 c1       	rjmp	.+844    	; 0x1cce <_Z7oscTickii+0x1244>
	}
	else if (oscSelect1 == 4)
    1982:	04 97       	sbiw	r24, 0x04	; 4
    1984:	09 f0       	breq	.+2      	; 0x1988 <_Z7oscTickii+0xefe>
    1986:	a2 c1       	rjmp	.+836    	; 0x1ccc <_Z7oscTickii+0x1242>
	{
		if (oscSelect2 == 0)
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	09 f0       	breq	.+2      	; 0x1990 <_Z7oscTickii+0xf06>
    198e:	4f c0       	rjmp	.+158    	; 0x1a2e <_Z7oscTickii+0xfa4>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1990:	e3 ec       	ldi	r30, 0xC3	; 195
    1992:	f1 e0       	ldi	r31, 0x01	; 1
    1994:	02 89       	ldd	r16, Z+18	; 0x12
    1996:	13 89       	ldd	r17, Z+19	; 0x13
    1998:	24 89       	ldd	r18, Z+20	; 0x14
    199a:	35 89       	ldd	r19, Z+21	; 0x15
    199c:	86 85       	ldd	r24, Z+14	; 0x0e
    199e:	97 85       	ldd	r25, Z+15	; 0x0f
    19a0:	a0 89       	ldd	r26, Z+16	; 0x10
    19a2:	b1 89       	ldd	r27, Z+17	; 0x11
    19a4:	80 0f       	add	r24, r16
    19a6:	91 1f       	adc	r25, r17
    19a8:	a2 1f       	adc	r26, r18
    19aa:	b3 1f       	adc	r27, r19
    19ac:	86 87       	std	Z+14, r24	; 0x0e
    19ae:	97 87       	std	Z+15, r25	; 0x0f
    19b0:	a0 8b       	std	Z+16, r26	; 0x10
    19b2:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    19b4:	86 85       	ldd	r24, Z+14	; 0x0e
    19b6:	97 85       	ldd	r25, Z+15	; 0x0f
    19b8:	a0 89       	ldd	r26, Z+16	; 0x10
    19ba:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    19bc:	eb 2f       	mov	r30, r27
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	e8 51       	subi	r30, 0x18	; 24
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	e4 91       	lpm	r30, Z
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    19c6:	ad ea       	ldi	r26, 0xAD	; 173
    19c8:	b1 e0       	ldi	r27, 0x01	; 1
    19ca:	52 96       	adiw	r26, 0x12	; 18
    19cc:	cd 90       	ld	r12, X+
    19ce:	dd 90       	ld	r13, X+
    19d0:	ed 90       	ld	r14, X+
    19d2:	fc 90       	ld	r15, X
    19d4:	55 97       	sbiw	r26, 0x15	; 21
    19d6:	1e 96       	adiw	r26, 0x0e	; 14
    19d8:	0d 91       	ld	r16, X+
    19da:	1d 91       	ld	r17, X+
    19dc:	2d 91       	ld	r18, X+
    19de:	3c 91       	ld	r19, X
    19e0:	51 97       	sbiw	r26, 0x11	; 17
    19e2:	0c 0d       	add	r16, r12
    19e4:	1d 1d       	adc	r17, r13
    19e6:	2e 1d       	adc	r18, r14
    19e8:	3f 1d       	adc	r19, r15
    19ea:	1e 96       	adiw	r26, 0x0e	; 14
    19ec:	0d 93       	st	X+, r16
    19ee:	1d 93       	st	X+, r17
    19f0:	2d 93       	st	X+, r18
    19f2:	3c 93       	st	X, r19
    19f4:	51 97       	sbiw	r26, 0x11	; 17
		return (m_accumulator >> 24); // Get the 8-bit real number
    19f6:	1e 96       	adiw	r26, 0x0e	; 14
    19f8:	0d 91       	ld	r16, X+
    19fa:	1d 91       	ld	r17, X+
    19fc:	2d 91       	ld	r18, X+
    19fe:	3c 91       	ld	r19, X
    1a00:	51 97       	sbiw	r26, 0x11	; 17
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Return the wave starting from the highest value
		return ((m_max32 - m_accumulator) >> 24);
    1a02:	1e 96       	adiw	r26, 0x0e	; 14
    1a04:	cd 90       	ld	r12, X+
    1a06:	dd 90       	ld	r13, X+
    1a08:	ed 90       	ld	r14, X+
    1a0a:	fc 90       	ld	r15, X
    1a0c:	51 97       	sbiw	r26, 0x11	; 17
			val = (sine1.tick() + (dRamp2.tick() >> 3));
    1a0e:	1a 96       	adiw	r26, 0x0a	; 10
    1a10:	0d 91       	ld	r16, X+
    1a12:	1d 91       	ld	r17, X+
    1a14:	2d 91       	ld	r18, X+
    1a16:	3c 91       	ld	r19, X
    1a18:	1d 97       	sbiw	r26, 0x0d	; 13
    1a1a:	0c 19       	sub	r16, r12
    1a1c:	1d 09       	sbc	r17, r13
    1a1e:	2e 09       	sbc	r18, r14
    1a20:	3f 09       	sbc	r19, r15
    1a22:	83 2f       	mov	r24, r19
    1a24:	86 95       	lsr	r24
    1a26:	86 95       	lsr	r24
    1a28:	86 95       	lsr	r24
    1a2a:	8e 0f       	add	r24, r30
    1a2c:	c5 c0       	rjmp	.+394    	; 0x1bb8 <_Z7oscTickii+0x112e>
		if (oscSelect2 == 1)
    1a2e:	61 30       	cpi	r22, 0x01	; 1
    1a30:	71 05       	cpc	r23, r1
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <_Z7oscTickii+0xfac>
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <_Z7oscTickii+0x102a>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1a36:	e3 ec       	ldi	r30, 0xC3	; 195
    1a38:	f1 e0       	ldi	r31, 0x01	; 1
    1a3a:	02 89       	ldd	r16, Z+18	; 0x12
    1a3c:	13 89       	ldd	r17, Z+19	; 0x13
    1a3e:	24 89       	ldd	r18, Z+20	; 0x14
    1a40:	35 89       	ldd	r19, Z+21	; 0x15
    1a42:	86 85       	ldd	r24, Z+14	; 0x0e
    1a44:	97 85       	ldd	r25, Z+15	; 0x0f
    1a46:	a0 89       	ldd	r26, Z+16	; 0x10
    1a48:	b1 89       	ldd	r27, Z+17	; 0x11
    1a4a:	80 0f       	add	r24, r16
    1a4c:	91 1f       	adc	r25, r17
    1a4e:	a2 1f       	adc	r26, r18
    1a50:	b3 1f       	adc	r27, r19
    1a52:	86 87       	std	Z+14, r24	; 0x0e
    1a54:	97 87       	std	Z+15, r25	; 0x0f
    1a56:	a0 8b       	std	Z+16, r26	; 0x10
    1a58:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1a5a:	86 85       	ldd	r24, Z+14	; 0x0e
    1a5c:	97 85       	ldd	r25, Z+15	; 0x0f
    1a5e:	a0 89       	ldd	r26, Z+16	; 0x10
    1a60:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    1a62:	eb 2f       	mov	r30, r27
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	e8 51       	subi	r30, 0x18	; 24
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	e4 91       	lpm	r30, Z
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1a6c:	a7 e9       	ldi	r26, 0x97	; 151
    1a6e:	b1 e0       	ldi	r27, 0x01	; 1
    1a70:	52 96       	adiw	r26, 0x12	; 18
    1a72:	cd 90       	ld	r12, X+
    1a74:	dd 90       	ld	r13, X+
    1a76:	ed 90       	ld	r14, X+
    1a78:	fc 90       	ld	r15, X
    1a7a:	55 97       	sbiw	r26, 0x15	; 21
    1a7c:	1e 96       	adiw	r26, 0x0e	; 14
    1a7e:	0d 91       	ld	r16, X+
    1a80:	1d 91       	ld	r17, X+
    1a82:	2d 91       	ld	r18, X+
    1a84:	3c 91       	ld	r19, X
    1a86:	51 97       	sbiw	r26, 0x11	; 17
    1a88:	0c 0d       	add	r16, r12
    1a8a:	1d 1d       	adc	r17, r13
    1a8c:	2e 1d       	adc	r18, r14
    1a8e:	3f 1d       	adc	r19, r15
    1a90:	1e 96       	adiw	r26, 0x0e	; 14
    1a92:	0d 93       	st	X+, r16
    1a94:	1d 93       	st	X+, r17
    1a96:	2d 93       	st	X+, r18
    1a98:	3c 93       	st	X, r19
    1a9a:	51 97       	sbiw	r26, 0x11	; 17
		return (m_accumulator >> 24); // Get the 8-bit real number
    1a9c:	1e 96       	adiw	r26, 0x0e	; 14
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9d 91       	ld	r25, X+
    1aa2:	0d 90       	ld	r0, X+
    1aa4:	bc 91       	ld	r27, X
    1aa6:	a0 2d       	mov	r26, r0
			val = (sine1.tick() + (aRamp2.tick() >> 3));
    1aa8:	8b 2f       	mov	r24, r27
    1aaa:	86 95       	lsr	r24
    1aac:	86 95       	lsr	r24
    1aae:	86 95       	lsr	r24
    1ab0:	8e 0f       	add	r24, r30
    1ab2:	cd c0       	rjmp	.+410    	; 0x1c4e <_Z7oscTickii+0x11c4>
		if (oscSelect2 == 2)
    1ab4:	62 30       	cpi	r22, 0x02	; 2
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <_Z7oscTickii+0x1032>
    1aba:	7d c0       	rjmp	.+250    	; 0x1bb6 <_Z7oscTickii+0x112c>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1abc:	e3 ec       	ldi	r30, 0xC3	; 195
    1abe:	f1 e0       	ldi	r31, 0x01	; 1
    1ac0:	42 89       	ldd	r20, Z+18	; 0x12
    1ac2:	53 89       	ldd	r21, Z+19	; 0x13
    1ac4:	64 89       	ldd	r22, Z+20	; 0x14
    1ac6:	75 89       	ldd	r23, Z+21	; 0x15
    1ac8:	86 85       	ldd	r24, Z+14	; 0x0e
    1aca:	97 85       	ldd	r25, Z+15	; 0x0f
    1acc:	a0 89       	ldd	r26, Z+16	; 0x10
    1ace:	b1 89       	ldd	r27, Z+17	; 0x11
    1ad0:	84 0f       	add	r24, r20
    1ad2:	95 1f       	adc	r25, r21
    1ad4:	a6 1f       	adc	r26, r22
    1ad6:	b7 1f       	adc	r27, r23
    1ad8:	86 87       	std	Z+14, r24	; 0x0e
    1ada:	97 87       	std	Z+15, r25	; 0x0f
    1adc:	a0 8b       	std	Z+16, r26	; 0x10
    1ade:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1ae0:	86 85       	ldd	r24, Z+14	; 0x0e
    1ae2:	97 85       	ldd	r25, Z+15	; 0x0f
    1ae4:	a0 89       	ldd	r26, Z+16	; 0x10
    1ae6:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    1ae8:	eb 2f       	mov	r30, r27
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	e8 51       	subi	r30, 0x18	; 24
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	e4 91       	lpm	r30, Z
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1af2:	ad e7       	ldi	r26, 0x7D	; 125
    1af4:	b1 e0       	ldi	r27, 0x01	; 1
    1af6:	52 96       	adiw	r26, 0x12	; 18
    1af8:	0d 91       	ld	r16, X+
    1afa:	1d 91       	ld	r17, X+
    1afc:	2d 91       	ld	r18, X+
    1afe:	3c 91       	ld	r19, X
    1b00:	55 97       	sbiw	r26, 0x15	; 21
    1b02:	1e 96       	adiw	r26, 0x0e	; 14
    1b04:	4d 91       	ld	r20, X+
    1b06:	5d 91       	ld	r21, X+
    1b08:	6d 91       	ld	r22, X+
    1b0a:	7c 91       	ld	r23, X
    1b0c:	51 97       	sbiw	r26, 0x11	; 17
    1b0e:	40 0f       	add	r20, r16
    1b10:	51 1f       	adc	r21, r17
    1b12:	62 1f       	adc	r22, r18
    1b14:	73 1f       	adc	r23, r19
    1b16:	1e 96       	adiw	r26, 0x0e	; 14
    1b18:	4d 93       	st	X+, r20
    1b1a:	5d 93       	st	X+, r21
    1b1c:	6d 93       	st	X+, r22
    1b1e:	7c 93       	st	X, r23
    1b20:	51 97       	sbiw	r26, 0x11	; 17
		return (m_accumulator >> 24); // Get the 8-bit real number
    1b22:	1e 96       	adiw	r26, 0x0e	; 14
    1b24:	4d 91       	ld	r20, X+
    1b26:	5d 91       	ld	r21, X+
    1b28:	6d 91       	ld	r22, X+
    1b2a:	7c 91       	ld	r23, X
    1b2c:	51 97       	sbiw	r26, 0x11	; 17
	{
		// Call base tick method
		OscillatorBase::tick();
		
		// Compare accumulator against half the full amplitude
		if (m_accumulator <= (m_max32 >> 1))
    1b2e:	1e 96       	adiw	r26, 0x0e	; 14
    1b30:	0d 91       	ld	r16, X+
    1b32:	1d 91       	ld	r17, X+
    1b34:	2d 91       	ld	r18, X+
    1b36:	3c 91       	ld	r19, X
    1b38:	51 97       	sbiw	r26, 0x11	; 17
    1b3a:	1a 96       	adiw	r26, 0x0a	; 10
    1b3c:	4d 91       	ld	r20, X+
    1b3e:	5d 91       	ld	r21, X+
    1b40:	6d 91       	ld	r22, X+
    1b42:	7c 91       	ld	r23, X
    1b44:	1d 97       	sbiw	r26, 0x0d	; 13
    1b46:	db 01       	movw	r26, r22
    1b48:	ca 01       	movw	r24, r20
    1b4a:	b6 95       	lsr	r27
    1b4c:	a7 95       	ror	r26
    1b4e:	97 95       	ror	r25
    1b50:	87 95       	ror	r24
    1b52:	80 17       	cp	r24, r16
    1b54:	91 07       	cpc	r25, r17
    1b56:	a2 07       	cpc	r26, r18
    1b58:	b3 07       	cpc	r27, r19
    1b5a:	78 f0       	brcs	.+30     	; 0x1b7a <_Z7oscTickii+0x10f0>
			// Multiply triangle accumulator by 2 while we are less than the full amplitude
			m_triangleAcc = (m_accumulator << 1);
    1b5c:	cd e7       	ldi	r28, 0x7D	; 125
    1b5e:	d1 e0       	ldi	r29, 0x01	; 1
    1b60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b64:	a8 89       	ldd	r26, Y+16	; 0x10
    1b66:	b9 89       	ldd	r27, Y+17	; 0x11
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	8e 8b       	std	Y+22, r24	; 0x16
    1b72:	9f 8b       	std	Y+23, r25	; 0x17
    1b74:	a8 8f       	std	Y+24, r26	; 0x18
    1b76:	b9 8f       	std	Y+25, r27	; 0x19
    1b78:	16 c0       	rjmp	.+44     	; 0x1ba6 <_Z7oscTickii+0x111c>
		else
			// Otherwise, decrement the triangle accumulator
			m_triangleAcc = ((m_max32 - m_accumulator) << 1);
    1b7a:	ad e7       	ldi	r26, 0x7D	; 125
    1b7c:	b1 e0       	ldi	r27, 0x01	; 1
    1b7e:	1e 96       	adiw	r26, 0x0e	; 14
    1b80:	0d 91       	ld	r16, X+
    1b82:	1d 91       	ld	r17, X+
    1b84:	2d 91       	ld	r18, X+
    1b86:	3c 91       	ld	r19, X
    1b88:	51 97       	sbiw	r26, 0x11	; 17
    1b8a:	40 1b       	sub	r20, r16
    1b8c:	51 0b       	sbc	r21, r17
    1b8e:	62 0b       	sbc	r22, r18
    1b90:	73 0b       	sbc	r23, r19
    1b92:	44 0f       	add	r20, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	66 1f       	adc	r22, r22
    1b98:	77 1f       	adc	r23, r23
    1b9a:	56 96       	adiw	r26, 0x16	; 22
    1b9c:	4d 93       	st	X+, r20
    1b9e:	5d 93       	st	X+, r21
    1ba0:	6d 93       	st	X+, r22
    1ba2:	7c 93       	st	X, r23
    1ba4:	59 97       	sbiw	r26, 0x19	; 25
			val = (sine1.tick() + (triangle2.tick() >> 3));
    1ba6:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <triangle2+0x19>
    1baa:	89 2f       	mov	r24, r25
    1bac:	86 95       	lsr	r24
    1bae:	86 95       	lsr	r24
    1bb0:	86 95       	lsr	r24
    1bb2:	8e 0f       	add	r24, r30
    1bb4:	8c c0       	rjmp	.+280    	; 0x1cce <_Z7oscTickii+0x1244>

// Function to mix the oscillators
uint8_t oscTick(int oscSelect1, int oscSelect2)
{
	// Declare local variables
	uint8_t val = 0; // Tracker for return value
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
			val = (sine1.tick() + (dRamp2.tick() >> 3));
		if (oscSelect2 == 1)
			val = (sine1.tick() + (aRamp2.tick() >> 3));
		if (oscSelect2 == 2)
			val = (sine1.tick() + (triangle2.tick() >> 3));
		if (oscSelect2 == 3)
    1bb8:	63 30       	cpi	r22, 0x03	; 3
    1bba:	71 05       	cpc	r23, r1
    1bbc:	09 f0       	breq	.+2      	; 0x1bc0 <_Z7oscTickii+0x1136>
    1bbe:	47 c0       	rjmp	.+142    	; 0x1c4e <_Z7oscTickii+0x11c4>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1bc0:	e3 ec       	ldi	r30, 0xC3	; 195
    1bc2:	f1 e0       	ldi	r31, 0x01	; 1
    1bc4:	42 89       	ldd	r20, Z+18	; 0x12
    1bc6:	53 89       	ldd	r21, Z+19	; 0x13
    1bc8:	64 89       	ldd	r22, Z+20	; 0x14
    1bca:	75 89       	ldd	r23, Z+21	; 0x15
    1bcc:	86 85       	ldd	r24, Z+14	; 0x0e
    1bce:	97 85       	ldd	r25, Z+15	; 0x0f
    1bd0:	a0 89       	ldd	r26, Z+16	; 0x10
    1bd2:	b1 89       	ldd	r27, Z+17	; 0x11
    1bd4:	84 0f       	add	r24, r20
    1bd6:	95 1f       	adc	r25, r21
    1bd8:	a6 1f       	adc	r26, r22
    1bda:	b7 1f       	adc	r27, r23
    1bdc:	86 87       	std	Z+14, r24	; 0x0e
    1bde:	97 87       	std	Z+15, r25	; 0x0f
    1be0:	a0 8b       	std	Z+16, r26	; 0x10
    1be2:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1be4:	86 85       	ldd	r24, Z+14	; 0x0e
    1be6:	97 85       	ldd	r25, Z+15	; 0x0f
    1be8:	a0 89       	ldd	r26, Z+16	; 0x10
    1bea:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    1bec:	eb 2f       	mov	r30, r27
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	e8 51       	subi	r30, 0x18	; 24
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	94 91       	lpm	r25, Z
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1bf6:	e3 e6       	ldi	r30, 0x63	; 99
    1bf8:	f1 e0       	ldi	r31, 0x01	; 1
    1bfa:	02 89       	ldd	r16, Z+18	; 0x12
    1bfc:	13 89       	ldd	r17, Z+19	; 0x13
    1bfe:	24 89       	ldd	r18, Z+20	; 0x14
    1c00:	35 89       	ldd	r19, Z+21	; 0x15
    1c02:	46 85       	ldd	r20, Z+14	; 0x0e
    1c04:	57 85       	ldd	r21, Z+15	; 0x0f
    1c06:	60 89       	ldd	r22, Z+16	; 0x10
    1c08:	71 89       	ldd	r23, Z+17	; 0x11
    1c0a:	40 0f       	add	r20, r16
    1c0c:	51 1f       	adc	r21, r17
    1c0e:	62 1f       	adc	r22, r18
    1c10:	73 1f       	adc	r23, r19
    1c12:	46 87       	std	Z+14, r20	; 0x0e
    1c14:	57 87       	std	Z+15, r21	; 0x0f
    1c16:	60 8b       	std	Z+16, r22	; 0x10
    1c18:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1c1a:	46 85       	ldd	r20, Z+14	; 0x0e
    1c1c:	57 85       	ldd	r21, Z+15	; 0x0f
    1c1e:	60 89       	ldd	r22, Z+16	; 0x10
    1c20:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Tick the accumulator
		OscillatorBase::tick();
		
		// Get the pulse
		if (m_accumulator < m_dutyCycle)
    1c22:	06 85       	ldd	r16, Z+14	; 0x0e
    1c24:	17 85       	ldd	r17, Z+15	; 0x0f
    1c26:	20 89       	ldd	r18, Z+16	; 0x10
    1c28:	31 89       	ldd	r19, Z+17	; 0x11
    1c2a:	46 89       	ldd	r20, Z+22	; 0x16
    1c2c:	57 89       	ldd	r21, Z+23	; 0x17
    1c2e:	60 8d       	ldd	r22, Z+24	; 0x18
    1c30:	71 8d       	ldd	r23, Z+25	; 0x19
    1c32:	04 17       	cp	r16, r20
    1c34:	15 07       	cpc	r17, r21
    1c36:	26 07       	cpc	r18, r22
    1c38:	37 07       	cpc	r19, r23
    1c3a:	18 f4       	brcc	.+6      	; 0x1c42 <_Z7oscTickii+0x11b8>
			return (m_max32 >> 24);
    1c3c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sqWave2+0xd>
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <_Z7oscTickii+0x11ba>
		else
			return 0;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
			val = (sine1.tick() + (sqWave2.tick() >> 3));
    1c44:	86 95       	lsr	r24
    1c46:	86 95       	lsr	r24
    1c48:	86 95       	lsr	r24
    1c4a:	89 0f       	add	r24, r25
    1c4c:	40 c0       	rjmp	.+128    	; 0x1cce <_Z7oscTickii+0x1244>
		if (oscSelect2 == 4)
    1c4e:	64 30       	cpi	r22, 0x04	; 4
    1c50:	71 05       	cpc	r23, r1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <_Z7oscTickii+0x11cc>
    1c54:	3c c0       	rjmp	.+120    	; 0x1cce <_Z7oscTickii+0x1244>
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1c56:	e3 ec       	ldi	r30, 0xC3	; 195
    1c58:	f1 e0       	ldi	r31, 0x01	; 1
    1c5a:	42 89       	ldd	r20, Z+18	; 0x12
    1c5c:	53 89       	ldd	r21, Z+19	; 0x13
    1c5e:	64 89       	ldd	r22, Z+20	; 0x14
    1c60:	75 89       	ldd	r23, Z+21	; 0x15
    1c62:	86 85       	ldd	r24, Z+14	; 0x0e
    1c64:	97 85       	ldd	r25, Z+15	; 0x0f
    1c66:	a0 89       	ldd	r26, Z+16	; 0x10
    1c68:	b1 89       	ldd	r27, Z+17	; 0x11
    1c6a:	84 0f       	add	r24, r20
    1c6c:	95 1f       	adc	r25, r21
    1c6e:	a6 1f       	adc	r26, r22
    1c70:	b7 1f       	adc	r27, r23
    1c72:	86 87       	std	Z+14, r24	; 0x0e
    1c74:	97 87       	std	Z+15, r25	; 0x0f
    1c76:	a0 8b       	std	Z+16, r26	; 0x10
    1c78:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1c7a:	86 85       	ldd	r24, Z+14	; 0x0e
    1c7c:	97 85       	ldd	r25, Z+15	; 0x0f
    1c7e:	a0 89       	ldd	r26, Z+16	; 0x10
    1c80:	b1 89       	ldd	r27, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    1c82:	eb 2f       	mov	r30, r27
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	e8 51       	subi	r30, 0x18	; 24
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	94 91       	lpm	r25, Z
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
	{
		m_accumulator += m_increment;
    1c8c:	ed e4       	ldi	r30, 0x4D	; 77
    1c8e:	f1 e0       	ldi	r31, 0x01	; 1
    1c90:	02 89       	ldd	r16, Z+18	; 0x12
    1c92:	13 89       	ldd	r17, Z+19	; 0x13
    1c94:	24 89       	ldd	r18, Z+20	; 0x14
    1c96:	35 89       	ldd	r19, Z+21	; 0x15
    1c98:	46 85       	ldd	r20, Z+14	; 0x0e
    1c9a:	57 85       	ldd	r21, Z+15	; 0x0f
    1c9c:	60 89       	ldd	r22, Z+16	; 0x10
    1c9e:	71 89       	ldd	r23, Z+17	; 0x11
    1ca0:	40 0f       	add	r20, r16
    1ca2:	51 1f       	adc	r21, r17
    1ca4:	62 1f       	adc	r22, r18
    1ca6:	73 1f       	adc	r23, r19
    1ca8:	46 87       	std	Z+14, r20	; 0x0e
    1caa:	57 87       	std	Z+15, r21	; 0x0f
    1cac:	60 8b       	std	Z+16, r22	; 0x10
    1cae:	71 8b       	std	Z+17, r23	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    1cb0:	46 85       	ldd	r20, Z+14	; 0x0e
    1cb2:	57 85       	ldd	r21, Z+15	; 0x0f
    1cb4:	60 89       	ldd	r22, Z+16	; 0x10
    1cb6:	71 89       	ldd	r23, Z+17	; 0x11
	{
		// Get the index of the current sample from the look up table
		uint8_t index = OscillatorBase::tick();
		
		// Get the byte representing the sample
		return (uint8_t)pgm_read_byte_near(sine+index);
    1cb8:	e7 2f       	mov	r30, r23
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	e8 51       	subi	r30, 0x18	; 24
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	84 91       	lpm	r24, Z
			val = (sine1.tick() + (sine2.tick() >> 3));
    1cc2:	86 95       	lsr	r24
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	89 0f       	add	r24, r25
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <_Z7oscTickii+0x1244>
	}
	else
	{
		val = 0;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// Return the value
	return val;
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	08 95       	ret

00001ce0 <__vector_11>:
// Timer 1 Interrupt (for sampling the waveform)
ISR(TIMER1_COMPA_vect)
{
    1ce0:	1f 92       	push	r1
    1ce2:	0f 92       	push	r0
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	2f 93       	push	r18
    1cec:	3f 93       	push	r19
    1cee:	4f 93       	push	r20
    1cf0:	5f 93       	push	r21
    1cf2:	6f 93       	push	r22
    1cf4:	7f 93       	push	r23
    1cf6:	8f 93       	push	r24
    1cf8:	9f 93       	push	r25
    1cfa:	af 93       	push	r26
    1cfc:	bf 93       	push	r27
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
	// Output DAC audio (additive synthesis)
	//PORTD = (osc1.tick() + (osc2.tick() >> 3));
	if (audioOn == true)
    1d02:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
    1d06:	88 23       	and	r24, r24
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <__vector_11+0x42>
		PORTD = oscTick(osc1, osc2);
    1d0a:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <osc2>
    1d0e:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <osc2+0x1>
    1d12:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <osc1>
    1d16:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <osc1+0x1>
    1d1a:	0e 94 45 05 	call	0xa8a	; 0xa8a <_Z7oscTickii>
    1d1e:	8b b9       	out	0x0b, r24	; 11
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <__vector_11+0x44>
	else
		PORTD = 0;
    1d22:	1b b8       	out	0x0b, r1	; 11
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <_GLOBAL__sub_I_dRamp1>:
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
	}
};
/* End Ascending Ramp Oscillator Class */

/* Descending Ramp Oscillator Class */
class DescedningRampOscillator: public OscillatorBase
    1d5a:	83 e2       	ldi	r24, 0x23	; 35
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1d62:	0f 2e       	mov	r0, r31
    1d64:	fc e0       	ldi	r31, 0x0C	; 12
    1d66:	af 2e       	mov	r10, r31
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	bf 2e       	mov	r11, r31
    1d6c:	f0 2d       	mov	r31, r0
    1d6e:	b0 92 24 02 	sts	0x0224, r11	; 0x800224 <dRamp1+0x1>
    1d72:	a0 92 23 02 	sts	0x0223, r10	; 0x800223 <dRamp1>
	}
};
/* End Base Oscillator Class */

/* Ascending Ramp Oscillator Class */
class AscendingRampOscillator: public OscillatorBase // Inherits from the Base Oscillator
    1d76:	8d e0       	ldi	r24, 0x0D	; 13
    1d78:	92 e0       	ldi	r25, 0x02	; 2
    1d7a:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1d7e:	0f 2e       	mov	r0, r31
    1d80:	f4 e0       	ldi	r31, 0x04	; 4
    1d82:	cf 2e       	mov	r12, r31
    1d84:	f1 e0       	ldi	r31, 0x01	; 1
    1d86:	df 2e       	mov	r13, r31
    1d88:	f0 2d       	mov	r31, r0
    1d8a:	d0 92 0e 02 	sts	0x020E, r13	; 0x80020e <aRamp1+0x1>
    1d8e:	c0 92 0d 02 	sts	0x020D, r12	; 0x80020d <aRamp1>
	// Declare local variables
	uint32_t m_triangleAcc;
	
	public:
	// Override constructor to initialize triangle accumulator
	TriangleOscillator():OscillatorBase()
    1d92:	83 ef       	ldi	r24, 0xF3	; 243
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1d9a:	e3 ef       	ldi	r30, 0xF3	; 243
    1d9c:	f1 e0       	ldi	r31, 0x01	; 1
    1d9e:	0c e1       	ldi	r16, 0x1C	; 28
    1da0:	11 e0       	ldi	r17, 0x01	; 1
    1da2:	11 83       	std	Z+1, r17	; 0x01
    1da4:	00 83       	st	Z, r16
	{
		m_triangleAcc = 0;
    1da6:	16 8a       	std	Z+22, r1	; 0x16
    1da8:	17 8a       	std	Z+23, r1	; 0x17
    1daa:	10 8e       	std	Z+24, r1	; 0x18
    1dac:	11 8e       	std	Z+25, r1	; 0x19
	// Declare local variables
	uint32_t m_dutyCycle; // Duty cycle of the wave in relation to counter
	
	public:
	// Override default constructor
	PWMOscillator():OscillatorBase()
    1dae:	89 ed       	ldi	r24, 0xD9	; 217
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1db6:	c9 ed       	ldi	r28, 0xD9	; 217
    1db8:	d1 e0       	ldi	r29, 0x01	; 1
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	f4 e1       	ldi	r31, 0x14	; 20
    1dbe:	ef 2e       	mov	r14, r31
    1dc0:	f1 e0       	ldi	r31, 0x01	; 1
    1dc2:	ff 2e       	mov	r15, r31
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	f9 82       	std	Y+1, r15	; 0x01
    1dc8:	e8 82       	st	Y, r14
	{
		m_dutyCycle = m_max32 * 0.5; // Default duty cycle = 50%
    1dca:	6a 85       	ldd	r22, Y+10	; 0x0a
    1dcc:	7b 85       	ldd	r23, Y+11	; 0x0b
    1dce:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dd2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1de2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    1de6:	6e 8b       	std	Y+22, r22	; 0x16
    1de8:	7f 8b       	std	Y+23, r23	; 0x17
    1dea:	88 8f       	std	Y+24, r24	; 0x18
    1dec:	99 8f       	std	Y+25, r25	; 0x19
	}
};
/* End Noise Generator */

/* Sine Wave Oscillator Class */
class SineOscillator: public OscillatorBase
    1dee:	83 ec       	ldi	r24, 0xC3	; 195
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1df6:	c6 e2       	ldi	r28, 0x26	; 38
    1df8:	d1 e0       	ldi	r29, 0x01	; 1
    1dfa:	d0 93 c4 01 	sts	0x01C4, r29	; 0x8001c4 <sine1+0x1>
    1dfe:	c0 93 c3 01 	sts	0x01C3, r28	; 0x8001c3 <sine1>
	}
};
/* End Ascending Ramp Oscillator Class */

/* Descending Ramp Oscillator Class */
class DescedningRampOscillator: public OscillatorBase
    1e02:	8d ea       	ldi	r24, 0xAD	; 173
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e0a:	b0 92 ae 01 	sts	0x01AE, r11	; 0x8001ae <dRamp2+0x1>
    1e0e:	a0 92 ad 01 	sts	0x01AD, r10	; 0x8001ad <dRamp2>
	}
};
/* End Base Oscillator Class */

/* Ascending Ramp Oscillator Class */
class AscendingRampOscillator: public OscillatorBase // Inherits from the Base Oscillator
    1e12:	87 e9       	ldi	r24, 0x97	; 151
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e1a:	d0 92 98 01 	sts	0x0198, r13	; 0x800198 <aRamp2+0x1>
    1e1e:	c0 92 97 01 	sts	0x0197, r12	; 0x800197 <aRamp2>
	// Declare local variables
	uint32_t m_triangleAcc;
	
	public:
	// Override constructor to initialize triangle accumulator
	TriangleOscillator():OscillatorBase()
    1e22:	8d e7       	ldi	r24, 0x7D	; 125
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e2a:	ed e7       	ldi	r30, 0x7D	; 125
    1e2c:	f1 e0       	ldi	r31, 0x01	; 1
    1e2e:	11 83       	std	Z+1, r17	; 0x01
    1e30:	00 83       	st	Z, r16
	{
		m_triangleAcc = 0;
    1e32:	16 8a       	std	Z+22, r1	; 0x16
    1e34:	17 8a       	std	Z+23, r1	; 0x17
    1e36:	10 8e       	std	Z+24, r1	; 0x18
    1e38:	11 8e       	std	Z+25, r1	; 0x19
	// Declare local variables
	uint32_t m_dutyCycle; // Duty cycle of the wave in relation to counter
	
	public:
	// Override default constructor
	PWMOscillator():OscillatorBase()
    1e3a:	83 e6       	ldi	r24, 0x63	; 99
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e42:	03 e6       	ldi	r16, 0x63	; 99
    1e44:	11 e0       	ldi	r17, 0x01	; 1
    1e46:	f8 01       	movw	r30, r16
    1e48:	f1 82       	std	Z+1, r15	; 0x01
    1e4a:	e0 82       	st	Z, r14
	{
		m_dutyCycle = m_max32 * 0.5; // Default duty cycle = 50%
    1e4c:	62 85       	ldd	r22, Z+10	; 0x0a
    1e4e:	73 85       	ldd	r23, Z+11	; 0x0b
    1e50:	84 85       	ldd	r24, Z+12	; 0x0c
    1e52:	95 85       	ldd	r25, Z+13	; 0x0d
    1e54:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    1e64:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    1e68:	f8 01       	movw	r30, r16
    1e6a:	66 8b       	std	Z+22, r22	; 0x16
    1e6c:	77 8b       	std	Z+23, r23	; 0x17
    1e6e:	80 8f       	std	Z+24, r24	; 0x18
    1e70:	91 8f       	std	Z+25, r25	; 0x19
	}
};
/* End Noise Generator */

/* Sine Wave Oscillator Class */
class SineOscillator: public OscillatorBase
    1e72:	8d e4       	ldi	r24, 0x4D	; 77
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e7a:	d0 93 4e 01 	sts	0x014E, r29	; 0x80014e <sine2+0x1>
    1e7e:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <sine2>
    1e82:	87 e3       	ldi	r24, 0x37	; 55
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN14OscillatorBaseC1Ev>
    1e8a:	d0 93 38 01 	sts	0x0138, r29	; 0x800138 <lfo+0x1>
    1e8e:	c0 93 37 01 	sts	0x0137, r28	; 0x800137 <lfo>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	08 95       	ret

00001ea8 <__subsf3>:
    1ea8:	50 58       	subi	r21, 0x80	; 128

00001eaa <__addsf3>:
    1eaa:	bb 27       	eor	r27, r27
    1eac:	aa 27       	eor	r26, r26
    1eae:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__addsf3x>
    1eb2:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_round>
    1eb6:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscA>
    1eba:	38 f0       	brcs	.+14     	; 0x1eca <__addsf3+0x20>
    1ebc:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_pscB>
    1ec0:	20 f0       	brcs	.+8      	; 0x1eca <__addsf3+0x20>
    1ec2:	39 f4       	brne	.+14     	; 0x1ed2 <__addsf3+0x28>
    1ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec6:	19 f4       	brne	.+6      	; 0x1ece <__addsf3+0x24>
    1ec8:	26 f4       	brtc	.+8      	; 0x1ed2 <__addsf3+0x28>
    1eca:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_nan>
    1ece:	0e f4       	brtc	.+2      	; 0x1ed2 <__addsf3+0x28>
    1ed0:	e0 95       	com	r30
    1ed2:	e7 fb       	bst	r30, 7
    1ed4:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__fp_inf>

00001ed8 <__addsf3x>:
    1ed8:	e9 2f       	mov	r30, r25
    1eda:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_split3>
    1ede:	58 f3       	brcs	.-42     	; 0x1eb6 <__addsf3+0xc>
    1ee0:	ba 17       	cp	r27, r26
    1ee2:	62 07       	cpc	r22, r18
    1ee4:	73 07       	cpc	r23, r19
    1ee6:	84 07       	cpc	r24, r20
    1ee8:	95 07       	cpc	r25, r21
    1eea:	20 f0       	brcs	.+8      	; 0x1ef4 <__addsf3x+0x1c>
    1eec:	79 f4       	brne	.+30     	; 0x1f0c <__addsf3x+0x34>
    1eee:	a6 f5       	brtc	.+104    	; 0x1f58 <__addsf3x+0x80>
    1ef0:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_zero>
    1ef4:	0e f4       	brtc	.+2      	; 0x1ef8 <__addsf3x+0x20>
    1ef6:	e0 95       	com	r30
    1ef8:	0b 2e       	mov	r0, r27
    1efa:	ba 2f       	mov	r27, r26
    1efc:	a0 2d       	mov	r26, r0
    1efe:	0b 01       	movw	r0, r22
    1f00:	b9 01       	movw	r22, r18
    1f02:	90 01       	movw	r18, r0
    1f04:	0c 01       	movw	r0, r24
    1f06:	ca 01       	movw	r24, r20
    1f08:	a0 01       	movw	r20, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	ff 27       	eor	r31, r31
    1f0e:	59 1b       	sub	r21, r25
    1f10:	99 f0       	breq	.+38     	; 0x1f38 <__addsf3x+0x60>
    1f12:	59 3f       	cpi	r21, 0xF9	; 249
    1f14:	50 f4       	brcc	.+20     	; 0x1f2a <__addsf3x+0x52>
    1f16:	50 3e       	cpi	r21, 0xE0	; 224
    1f18:	68 f1       	brcs	.+90     	; 0x1f74 <__addsf3x+0x9c>
    1f1a:	1a 16       	cp	r1, r26
    1f1c:	f0 40       	sbci	r31, 0x00	; 0
    1f1e:	a2 2f       	mov	r26, r18
    1f20:	23 2f       	mov	r18, r19
    1f22:	34 2f       	mov	r19, r20
    1f24:	44 27       	eor	r20, r20
    1f26:	58 5f       	subi	r21, 0xF8	; 248
    1f28:	f3 cf       	rjmp	.-26     	; 0x1f10 <__addsf3x+0x38>
    1f2a:	46 95       	lsr	r20
    1f2c:	37 95       	ror	r19
    1f2e:	27 95       	ror	r18
    1f30:	a7 95       	ror	r26
    1f32:	f0 40       	sbci	r31, 0x00	; 0
    1f34:	53 95       	inc	r21
    1f36:	c9 f7       	brne	.-14     	; 0x1f2a <__addsf3x+0x52>
    1f38:	7e f4       	brtc	.+30     	; 0x1f58 <__addsf3x+0x80>
    1f3a:	1f 16       	cp	r1, r31
    1f3c:	ba 0b       	sbc	r27, r26
    1f3e:	62 0b       	sbc	r22, r18
    1f40:	73 0b       	sbc	r23, r19
    1f42:	84 0b       	sbc	r24, r20
    1f44:	ba f0       	brmi	.+46     	; 0x1f74 <__addsf3x+0x9c>
    1f46:	91 50       	subi	r25, 0x01	; 1
    1f48:	a1 f0       	breq	.+40     	; 0x1f72 <__addsf3x+0x9a>
    1f4a:	ff 0f       	add	r31, r31
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	66 1f       	adc	r22, r22
    1f50:	77 1f       	adc	r23, r23
    1f52:	88 1f       	adc	r24, r24
    1f54:	c2 f7       	brpl	.-16     	; 0x1f46 <__addsf3x+0x6e>
    1f56:	0e c0       	rjmp	.+28     	; 0x1f74 <__addsf3x+0x9c>
    1f58:	ba 0f       	add	r27, r26
    1f5a:	62 1f       	adc	r22, r18
    1f5c:	73 1f       	adc	r23, r19
    1f5e:	84 1f       	adc	r24, r20
    1f60:	48 f4       	brcc	.+18     	; 0x1f74 <__addsf3x+0x9c>
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	b7 95       	ror	r27
    1f6a:	f7 95       	ror	r31
    1f6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6e:	08 f0       	brcs	.+2      	; 0x1f72 <__addsf3x+0x9a>
    1f70:	b0 cf       	rjmp	.-160    	; 0x1ed2 <__addsf3+0x28>
    1f72:	93 95       	inc	r25
    1f74:	88 0f       	add	r24, r24
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <__addsf3x+0xa2>
    1f78:	99 27       	eor	r25, r25
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	97 95       	ror	r25
    1f7e:	87 95       	ror	r24
    1f80:	08 95       	ret

00001f82 <__divsf3>:
    1f82:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__divsf3x>
    1f86:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_round>
    1f8a:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_pscB>
    1f8e:	58 f0       	brcs	.+22     	; 0x1fa6 <__divsf3+0x24>
    1f90:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscA>
    1f94:	40 f0       	brcs	.+16     	; 0x1fa6 <__divsf3+0x24>
    1f96:	29 f4       	brne	.+10     	; 0x1fa2 <__divsf3+0x20>
    1f98:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <__divsf3+0x24>
    1f9c:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__fp_inf>
    1fa0:	51 11       	cpse	r21, r1
    1fa2:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_szero>
    1fa6:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_nan>

00001faa <__divsf3x>:
    1faa:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_split3>
    1fae:	68 f3       	brcs	.-38     	; 0x1f8a <__divsf3+0x8>

00001fb0 <__divsf3_pse>:
    1fb0:	99 23       	and	r25, r25
    1fb2:	b1 f3       	breq	.-20     	; 0x1fa0 <__divsf3+0x1e>
    1fb4:	55 23       	and	r21, r21
    1fb6:	91 f3       	breq	.-28     	; 0x1f9c <__divsf3+0x1a>
    1fb8:	95 1b       	sub	r25, r21
    1fba:	55 0b       	sbc	r21, r21
    1fbc:	bb 27       	eor	r27, r27
    1fbe:	aa 27       	eor	r26, r26
    1fc0:	62 17       	cp	r22, r18
    1fc2:	73 07       	cpc	r23, r19
    1fc4:	84 07       	cpc	r24, r20
    1fc6:	38 f0       	brcs	.+14     	; 0x1fd6 <__divsf3_pse+0x26>
    1fc8:	9f 5f       	subi	r25, 0xFF	; 255
    1fca:	5f 4f       	sbci	r21, 0xFF	; 255
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	aa 1f       	adc	r26, r26
    1fd4:	a9 f3       	breq	.-22     	; 0x1fc0 <__divsf3_pse+0x10>
    1fd6:	35 d0       	rcall	.+106    	; 0x2042 <__divsf3_pse+0x92>
    1fd8:	0e 2e       	mov	r0, r30
    1fda:	3a f0       	brmi	.+14     	; 0x1fea <__divsf3_pse+0x3a>
    1fdc:	e0 e8       	ldi	r30, 0x80	; 128
    1fde:	32 d0       	rcall	.+100    	; 0x2044 <__divsf3_pse+0x94>
    1fe0:	91 50       	subi	r25, 0x01	; 1
    1fe2:	50 40       	sbci	r21, 0x00	; 0
    1fe4:	e6 95       	lsr	r30
    1fe6:	00 1c       	adc	r0, r0
    1fe8:	ca f7       	brpl	.-14     	; 0x1fdc <__divsf3_pse+0x2c>
    1fea:	2b d0       	rcall	.+86     	; 0x2042 <__divsf3_pse+0x92>
    1fec:	fe 2f       	mov	r31, r30
    1fee:	29 d0       	rcall	.+82     	; 0x2042 <__divsf3_pse+0x92>
    1ff0:	66 0f       	add	r22, r22
    1ff2:	77 1f       	adc	r23, r23
    1ff4:	88 1f       	adc	r24, r24
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	26 17       	cp	r18, r22
    1ffa:	37 07       	cpc	r19, r23
    1ffc:	48 07       	cpc	r20, r24
    1ffe:	ab 07       	cpc	r26, r27
    2000:	b0 e8       	ldi	r27, 0x80	; 128
    2002:	09 f0       	breq	.+2      	; 0x2006 <__divsf3_pse+0x56>
    2004:	bb 0b       	sbc	r27, r27
    2006:	80 2d       	mov	r24, r0
    2008:	bf 01       	movw	r22, r30
    200a:	ff 27       	eor	r31, r31
    200c:	93 58       	subi	r25, 0x83	; 131
    200e:	5f 4f       	sbci	r21, 0xFF	; 255
    2010:	3a f0       	brmi	.+14     	; 0x2020 <__divsf3_pse+0x70>
    2012:	9e 3f       	cpi	r25, 0xFE	; 254
    2014:	51 05       	cpc	r21, r1
    2016:	78 f0       	brcs	.+30     	; 0x2036 <__divsf3_pse+0x86>
    2018:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__fp_inf>
    201c:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_szero>
    2020:	5f 3f       	cpi	r21, 0xFF	; 255
    2022:	e4 f3       	brlt	.-8      	; 0x201c <__divsf3_pse+0x6c>
    2024:	98 3e       	cpi	r25, 0xE8	; 232
    2026:	d4 f3       	brlt	.-12     	; 0x201c <__divsf3_pse+0x6c>
    2028:	86 95       	lsr	r24
    202a:	77 95       	ror	r23
    202c:	67 95       	ror	r22
    202e:	b7 95       	ror	r27
    2030:	f7 95       	ror	r31
    2032:	9f 5f       	subi	r25, 0xFF	; 255
    2034:	c9 f7       	brne	.-14     	; 0x2028 <__divsf3_pse+0x78>
    2036:	88 0f       	add	r24, r24
    2038:	91 1d       	adc	r25, r1
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret
    2042:	e1 e0       	ldi	r30, 0x01	; 1
    2044:	66 0f       	add	r22, r22
    2046:	77 1f       	adc	r23, r23
    2048:	88 1f       	adc	r24, r24
    204a:	bb 1f       	adc	r27, r27
    204c:	62 17       	cp	r22, r18
    204e:	73 07       	cpc	r23, r19
    2050:	84 07       	cpc	r24, r20
    2052:	ba 07       	cpc	r27, r26
    2054:	20 f0       	brcs	.+8      	; 0x205e <__divsf3_pse+0xae>
    2056:	62 1b       	sub	r22, r18
    2058:	73 0b       	sbc	r23, r19
    205a:	84 0b       	sbc	r24, r20
    205c:	ba 0b       	sbc	r27, r26
    205e:	ee 1f       	adc	r30, r30
    2060:	88 f7       	brcc	.-30     	; 0x2044 <__divsf3_pse+0x94>
    2062:	e0 95       	com	r30
    2064:	08 95       	ret

00002066 <__fixsfsi>:
    2066:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    206a:	68 94       	set
    206c:	b1 11       	cpse	r27, r1
    206e:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_szero>
    2072:	08 95       	ret

00002074 <__fixunssfsi>:
    2074:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__fp_splitA>
    2078:	88 f0       	brcs	.+34     	; 0x209c <__fixunssfsi+0x28>
    207a:	9f 57       	subi	r25, 0x7F	; 127
    207c:	98 f0       	brcs	.+38     	; 0x20a4 <__fixunssfsi+0x30>
    207e:	b9 2f       	mov	r27, r25
    2080:	99 27       	eor	r25, r25
    2082:	b7 51       	subi	r27, 0x17	; 23
    2084:	b0 f0       	brcs	.+44     	; 0x20b2 <__fixunssfsi+0x3e>
    2086:	e1 f0       	breq	.+56     	; 0x20c0 <__fixunssfsi+0x4c>
    2088:	66 0f       	add	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	1a f0       	brmi	.+6      	; 0x2098 <__fixunssfsi+0x24>
    2092:	ba 95       	dec	r27
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__fixunssfsi+0x14>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <__fixunssfsi+0x4c>
    2098:	b1 30       	cpi	r27, 0x01	; 1
    209a:	91 f0       	breq	.+36     	; 0x20c0 <__fixunssfsi+0x4c>
    209c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__fp_zero>
    20a0:	b1 e0       	ldi	r27, 0x01	; 1
    20a2:	08 95       	ret
    20a4:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__fp_zero>
    20a8:	67 2f       	mov	r22, r23
    20aa:	78 2f       	mov	r23, r24
    20ac:	88 27       	eor	r24, r24
    20ae:	b8 5f       	subi	r27, 0xF8	; 248
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <__fixunssfsi+0x4c>
    20b2:	b9 3f       	cpi	r27, 0xF9	; 249
    20b4:	cc f3       	brlt	.-14     	; 0x20a8 <__fixunssfsi+0x34>
    20b6:	86 95       	lsr	r24
    20b8:	77 95       	ror	r23
    20ba:	67 95       	ror	r22
    20bc:	b3 95       	inc	r27
    20be:	d9 f7       	brne	.-10     	; 0x20b6 <__fixunssfsi+0x42>
    20c0:	3e f4       	brtc	.+14     	; 0x20d0 <__fixunssfsi+0x5c>
    20c2:	90 95       	com	r25
    20c4:	80 95       	com	r24
    20c6:	70 95       	com	r23
    20c8:	61 95       	neg	r22
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__floatunsisf>:
    20d2:	e8 94       	clt
    20d4:	09 c0       	rjmp	.+18     	; 0x20e8 <__floatsisf+0x12>

000020d6 <__floatsisf>:
    20d6:	97 fb       	bst	r25, 7
    20d8:	3e f4       	brtc	.+14     	; 0x20e8 <__floatsisf+0x12>
    20da:	90 95       	com	r25
    20dc:	80 95       	com	r24
    20de:	70 95       	com	r23
    20e0:	61 95       	neg	r22
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	8f 4f       	sbci	r24, 0xFF	; 255
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	99 23       	and	r25, r25
    20ea:	a9 f0       	breq	.+42     	; 0x2116 <__floatsisf+0x40>
    20ec:	f9 2f       	mov	r31, r25
    20ee:	96 e9       	ldi	r25, 0x96	; 150
    20f0:	bb 27       	eor	r27, r27
    20f2:	93 95       	inc	r25
    20f4:	f6 95       	lsr	r31
    20f6:	87 95       	ror	r24
    20f8:	77 95       	ror	r23
    20fa:	67 95       	ror	r22
    20fc:	b7 95       	ror	r27
    20fe:	f1 11       	cpse	r31, r1
    2100:	f8 cf       	rjmp	.-16     	; 0x20f2 <__floatsisf+0x1c>
    2102:	fa f4       	brpl	.+62     	; 0x2142 <__floatsisf+0x6c>
    2104:	bb 0f       	add	r27, r27
    2106:	11 f4       	brne	.+4      	; 0x210c <__floatsisf+0x36>
    2108:	60 ff       	sbrs	r22, 0
    210a:	1b c0       	rjmp	.+54     	; 0x2142 <__floatsisf+0x6c>
    210c:	6f 5f       	subi	r22, 0xFF	; 255
    210e:	7f 4f       	sbci	r23, 0xFF	; 255
    2110:	8f 4f       	sbci	r24, 0xFF	; 255
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	16 c0       	rjmp	.+44     	; 0x2142 <__floatsisf+0x6c>
    2116:	88 23       	and	r24, r24
    2118:	11 f0       	breq	.+4      	; 0x211e <__floatsisf+0x48>
    211a:	96 e9       	ldi	r25, 0x96	; 150
    211c:	11 c0       	rjmp	.+34     	; 0x2140 <__floatsisf+0x6a>
    211e:	77 23       	and	r23, r23
    2120:	21 f0       	breq	.+8      	; 0x212a <__floatsisf+0x54>
    2122:	9e e8       	ldi	r25, 0x8E	; 142
    2124:	87 2f       	mov	r24, r23
    2126:	76 2f       	mov	r23, r22
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <__floatsisf+0x5e>
    212a:	66 23       	and	r22, r22
    212c:	71 f0       	breq	.+28     	; 0x214a <__floatsisf+0x74>
    212e:	96 e8       	ldi	r25, 0x86	; 134
    2130:	86 2f       	mov	r24, r22
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	2a f0       	brmi	.+10     	; 0x2142 <__floatsisf+0x6c>
    2138:	9a 95       	dec	r25
    213a:	66 0f       	add	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	da f7       	brpl	.-10     	; 0x2138 <__floatsisf+0x62>
    2142:	88 0f       	add	r24, r24
    2144:	96 95       	lsr	r25
    2146:	87 95       	ror	r24
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret

0000214c <__fp_inf>:
    214c:	97 f9       	bld	r25, 7
    214e:	9f 67       	ori	r25, 0x7F	; 127
    2150:	80 e8       	ldi	r24, 0x80	; 128
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	08 95       	ret

00002158 <__fp_nan>:
    2158:	9f ef       	ldi	r25, 0xFF	; 255
    215a:	80 ec       	ldi	r24, 0xC0	; 192
    215c:	08 95       	ret

0000215e <__fp_pscA>:
    215e:	00 24       	eor	r0, r0
    2160:	0a 94       	dec	r0
    2162:	16 16       	cp	r1, r22
    2164:	17 06       	cpc	r1, r23
    2166:	18 06       	cpc	r1, r24
    2168:	09 06       	cpc	r0, r25
    216a:	08 95       	ret

0000216c <__fp_pscB>:
    216c:	00 24       	eor	r0, r0
    216e:	0a 94       	dec	r0
    2170:	12 16       	cp	r1, r18
    2172:	13 06       	cpc	r1, r19
    2174:	14 06       	cpc	r1, r20
    2176:	05 06       	cpc	r0, r21
    2178:	08 95       	ret

0000217a <__fp_round>:
    217a:	09 2e       	mov	r0, r25
    217c:	03 94       	inc	r0
    217e:	00 0c       	add	r0, r0
    2180:	11 f4       	brne	.+4      	; 0x2186 <__fp_round+0xc>
    2182:	88 23       	and	r24, r24
    2184:	52 f0       	brmi	.+20     	; 0x219a <__fp_round+0x20>
    2186:	bb 0f       	add	r27, r27
    2188:	40 f4       	brcc	.+16     	; 0x219a <__fp_round+0x20>
    218a:	bf 2b       	or	r27, r31
    218c:	11 f4       	brne	.+4      	; 0x2192 <__fp_round+0x18>
    218e:	60 ff       	sbrs	r22, 0
    2190:	04 c0       	rjmp	.+8      	; 0x219a <__fp_round+0x20>
    2192:	6f 5f       	subi	r22, 0xFF	; 255
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <__fp_split3>:
    219c:	57 fd       	sbrc	r21, 7
    219e:	90 58       	subi	r25, 0x80	; 128
    21a0:	44 0f       	add	r20, r20
    21a2:	55 1f       	adc	r21, r21
    21a4:	59 f0       	breq	.+22     	; 0x21bc <__fp_splitA+0x10>
    21a6:	5f 3f       	cpi	r21, 0xFF	; 255
    21a8:	71 f0       	breq	.+28     	; 0x21c6 <__fp_splitA+0x1a>
    21aa:	47 95       	ror	r20

000021ac <__fp_splitA>:
    21ac:	88 0f       	add	r24, r24
    21ae:	97 fb       	bst	r25, 7
    21b0:	99 1f       	adc	r25, r25
    21b2:	61 f0       	breq	.+24     	; 0x21cc <__fp_splitA+0x20>
    21b4:	9f 3f       	cpi	r25, 0xFF	; 255
    21b6:	79 f0       	breq	.+30     	; 0x21d6 <__fp_splitA+0x2a>
    21b8:	87 95       	ror	r24
    21ba:	08 95       	ret
    21bc:	12 16       	cp	r1, r18
    21be:	13 06       	cpc	r1, r19
    21c0:	14 06       	cpc	r1, r20
    21c2:	55 1f       	adc	r21, r21
    21c4:	f2 cf       	rjmp	.-28     	; 0x21aa <__fp_split3+0xe>
    21c6:	46 95       	lsr	r20
    21c8:	f1 df       	rcall	.-30     	; 0x21ac <__fp_splitA>
    21ca:	08 c0       	rjmp	.+16     	; 0x21dc <__fp_splitA+0x30>
    21cc:	16 16       	cp	r1, r22
    21ce:	17 06       	cpc	r1, r23
    21d0:	18 06       	cpc	r1, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	f1 cf       	rjmp	.-30     	; 0x21b8 <__fp_splitA+0xc>
    21d6:	86 95       	lsr	r24
    21d8:	71 05       	cpc	r23, r1
    21da:	61 05       	cpc	r22, r1
    21dc:	08 94       	sec
    21de:	08 95       	ret

000021e0 <__fp_zero>:
    21e0:	e8 94       	clt

000021e2 <__fp_szero>:
    21e2:	bb 27       	eor	r27, r27
    21e4:	66 27       	eor	r22, r22
    21e6:	77 27       	eor	r23, r23
    21e8:	cb 01       	movw	r24, r22
    21ea:	97 f9       	bld	r25, 7
    21ec:	08 95       	ret

000021ee <__mulsf3>:
    21ee:	0e 94 0a 11 	call	0x2214	; 0x2214 <__mulsf3x>
    21f2:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_round>
    21f6:	0e 94 af 10 	call	0x215e	; 0x215e <__fp_pscA>
    21fa:	38 f0       	brcs	.+14     	; 0x220a <__mulsf3+0x1c>
    21fc:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_pscB>
    2200:	20 f0       	brcs	.+8      	; 0x220a <__mulsf3+0x1c>
    2202:	95 23       	and	r25, r21
    2204:	11 f0       	breq	.+4      	; 0x220a <__mulsf3+0x1c>
    2206:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__fp_inf>
    220a:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_nan>
    220e:	11 24       	eor	r1, r1
    2210:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_szero>

00002214 <__mulsf3x>:
    2214:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_split3>
    2218:	70 f3       	brcs	.-36     	; 0x21f6 <__mulsf3+0x8>

0000221a <__mulsf3_pse>:
    221a:	95 9f       	mul	r25, r21
    221c:	c1 f3       	breq	.-16     	; 0x220e <__mulsf3+0x20>
    221e:	95 0f       	add	r25, r21
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	55 1f       	adc	r21, r21
    2224:	62 9f       	mul	r22, r18
    2226:	f0 01       	movw	r30, r0
    2228:	72 9f       	mul	r23, r18
    222a:	bb 27       	eor	r27, r27
    222c:	f0 0d       	add	r31, r0
    222e:	b1 1d       	adc	r27, r1
    2230:	63 9f       	mul	r22, r19
    2232:	aa 27       	eor	r26, r26
    2234:	f0 0d       	add	r31, r0
    2236:	b1 1d       	adc	r27, r1
    2238:	aa 1f       	adc	r26, r26
    223a:	64 9f       	mul	r22, r20
    223c:	66 27       	eor	r22, r22
    223e:	b0 0d       	add	r27, r0
    2240:	a1 1d       	adc	r26, r1
    2242:	66 1f       	adc	r22, r22
    2244:	82 9f       	mul	r24, r18
    2246:	22 27       	eor	r18, r18
    2248:	b0 0d       	add	r27, r0
    224a:	a1 1d       	adc	r26, r1
    224c:	62 1f       	adc	r22, r18
    224e:	73 9f       	mul	r23, r19
    2250:	b0 0d       	add	r27, r0
    2252:	a1 1d       	adc	r26, r1
    2254:	62 1f       	adc	r22, r18
    2256:	83 9f       	mul	r24, r19
    2258:	a0 0d       	add	r26, r0
    225a:	61 1d       	adc	r22, r1
    225c:	22 1f       	adc	r18, r18
    225e:	74 9f       	mul	r23, r20
    2260:	33 27       	eor	r19, r19
    2262:	a0 0d       	add	r26, r0
    2264:	61 1d       	adc	r22, r1
    2266:	23 1f       	adc	r18, r19
    2268:	84 9f       	mul	r24, r20
    226a:	60 0d       	add	r22, r0
    226c:	21 1d       	adc	r18, r1
    226e:	82 2f       	mov	r24, r18
    2270:	76 2f       	mov	r23, r22
    2272:	6a 2f       	mov	r22, r26
    2274:	11 24       	eor	r1, r1
    2276:	9f 57       	subi	r25, 0x7F	; 127
    2278:	50 40       	sbci	r21, 0x00	; 0
    227a:	9a f0       	brmi	.+38     	; 0x22a2 <__mulsf3_pse+0x88>
    227c:	f1 f0       	breq	.+60     	; 0x22ba <__mulsf3_pse+0xa0>
    227e:	88 23       	and	r24, r24
    2280:	4a f0       	brmi	.+18     	; 0x2294 <__mulsf3_pse+0x7a>
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	bb 1f       	adc	r27, r27
    2288:	66 1f       	adc	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	91 50       	subi	r25, 0x01	; 1
    2290:	50 40       	sbci	r21, 0x00	; 0
    2292:	a9 f7       	brne	.-22     	; 0x227e <__mulsf3_pse+0x64>
    2294:	9e 3f       	cpi	r25, 0xFE	; 254
    2296:	51 05       	cpc	r21, r1
    2298:	80 f0       	brcs	.+32     	; 0x22ba <__mulsf3_pse+0xa0>
    229a:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__fp_inf>
    229e:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_szero>
    22a2:	5f 3f       	cpi	r21, 0xFF	; 255
    22a4:	e4 f3       	brlt	.-8      	; 0x229e <__mulsf3_pse+0x84>
    22a6:	98 3e       	cpi	r25, 0xE8	; 232
    22a8:	d4 f3       	brlt	.-12     	; 0x229e <__mulsf3_pse+0x84>
    22aa:	86 95       	lsr	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b7 95       	ror	r27
    22b2:	f7 95       	ror	r31
    22b4:	e7 95       	ror	r30
    22b6:	9f 5f       	subi	r25, 0xFF	; 255
    22b8:	c1 f7       	brne	.-16     	; 0x22aa <__mulsf3_pse+0x90>
    22ba:	fe 2b       	or	r31, r30
    22bc:	88 0f       	add	r24, r24
    22be:	91 1d       	adc	r25, r1
    22c0:	96 95       	lsr	r25
    22c2:	87 95       	ror	r24
    22c4:	97 f9       	bld	r25, 7
    22c6:	08 95       	ret

000022c8 <_ZN14OscillatorBase4tickEv>:
		return (uint32_t)((m_frequency*m_max32 + m_sampleRate/2)/m_sampleRate);
	}
	
	// Increment the accumulator
	inline
	virtual uint8_t tick()
    22c8:	fc 01       	movw	r30, r24
	{
		m_accumulator += m_increment;
    22ca:	42 89       	ldd	r20, Z+18	; 0x12
    22cc:	53 89       	ldd	r21, Z+19	; 0x13
    22ce:	64 89       	ldd	r22, Z+20	; 0x14
    22d0:	75 89       	ldd	r23, Z+21	; 0x15
    22d2:	86 85       	ldd	r24, Z+14	; 0x0e
    22d4:	97 85       	ldd	r25, Z+15	; 0x0f
    22d6:	a0 89       	ldd	r26, Z+16	; 0x10
    22d8:	b1 89       	ldd	r27, Z+17	; 0x11
    22da:	84 0f       	add	r24, r20
    22dc:	95 1f       	adc	r25, r21
    22de:	a6 1f       	adc	r26, r22
    22e0:	b7 1f       	adc	r27, r23
    22e2:	86 87       	std	Z+14, r24	; 0x0e
    22e4:	97 87       	std	Z+15, r25	; 0x0f
    22e6:	a0 8b       	std	Z+16, r26	; 0x10
    22e8:	b1 8b       	std	Z+17, r27	; 0x11
		return (m_accumulator >> 24); // Get the 8-bit real number
    22ea:	86 85       	ldd	r24, Z+14	; 0x0e
    22ec:	97 85       	ldd	r25, Z+15	; 0x0f
    22ee:	a0 89       	ldd	r26, Z+16	; 0x10
    22f0:	b1 89       	ldd	r27, Z+17	; 0x11
	}
    22f2:	8b 2f       	mov	r24, r27
    22f4:	08 95       	ret

000022f6 <_ZN14OscillatorBase7setFreqEf>:
	m_sampleRate = rate;
}

// Set frequency
void OscillatorBase::setFreq(float freq)
{
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	ec 01       	movw	r28, r24
    2308:	6a 01       	movw	r12, r20
    230a:	7b 01       	movw	r14, r22
	m_frequency = freq;
	if (m_frequency == 0)
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	a9 01       	movw	r20, r18
    2312:	c7 01       	movw	r24, r14
    2314:	b6 01       	movw	r22, r12
    2316:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
    231a:	88 23       	and	r24, r24
    231c:	29 f0       	breq	.+10     	; 0x2328 <_ZN14OscillatorBase7setFreqEf+0x32>
}

// Set frequency
void OscillatorBase::setFreq(float freq)
{
	m_frequency = freq;
    231e:	cc 82       	std	Y+4, r12	; 0x04
    2320:	dd 82       	std	Y+5, r13	; 0x05
    2322:	ee 82       	std	Y+6, r14	; 0x06
    2324:	ff 82       	std	Y+7, r15	; 0x07
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <_ZN14OscillatorBase7setFreqEf+0x42>
	if (m_frequency == 0)
	m_frequency = 1; // Avoid divide by 0
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	a0 e8       	ldi	r26, 0x80	; 128
    232e:	bf e3       	ldi	r27, 0x3F	; 63
    2330:	8c 83       	std	Y+4, r24	; 0x04
    2332:	9d 83       	std	Y+5, r25	; 0x05
    2334:	ae 83       	std	Y+6, r26	; 0x06
    2336:	bf 83       	std	Y+7, r27	; 0x07
	/* Inline Functions */
	// Calculate the increment from the frequency
	inline
	uint32_t calcIncrement()
	{
		return (uint32_t)((m_frequency*m_max32 + m_sampleRate/2)/m_sampleRate);
    2338:	0a 81       	ldd	r16, Y+2	; 0x02
    233a:	1b 81       	ldd	r17, Y+3	; 0x03
    233c:	6a 85       	ldd	r22, Y+10	; 0x0a
    233e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2340:	8c 85       	ldd	r24, Y+12	; 0x0c
    2342:	9d 85       	ldd	r25, Y+13	; 0x0d
    2344:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
    2348:	2c 81       	ldd	r18, Y+4	; 0x04
    234a:	3d 81       	ldd	r19, Y+5	; 0x05
    234c:	4e 81       	ldd	r20, Y+6	; 0x06
    234e:	5f 81       	ldd	r21, Y+7	; 0x07
    2350:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__mulsf3>
    2354:	6b 01       	movw	r12, r22
    2356:	7c 01       	movw	r14, r24
    2358:	b8 01       	movw	r22, r16
    235a:	76 95       	lsr	r23
    235c:	67 95       	ror	r22
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
    2366:	9b 01       	movw	r18, r22
    2368:	ac 01       	movw	r20, r24
    236a:	c7 01       	movw	r24, r14
    236c:	b6 01       	movw	r22, r12
    236e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__addsf3>
    2372:	6b 01       	movw	r12, r22
    2374:	7c 01       	movw	r14, r24
    2376:	b8 01       	movw	r22, r16
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__floatunsisf>
    2380:	9b 01       	movw	r18, r22
    2382:	ac 01       	movw	r20, r24
    2384:	c7 01       	movw	r24, r14
    2386:	b6 01       	movw	r22, r12
    2388:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__divsf3>
    238c:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
	
	m_increment = calcIncrement();
    2390:	6a 8b       	std	Y+18, r22	; 0x12
    2392:	7b 8b       	std	Y+19, r23	; 0x13
    2394:	8c 8b       	std	Y+20, r24	; 0x14
    2396:	9d 8b       	std	Y+21, r25	; 0x15
	if (m_increment == 0)
    2398:	8a 89       	ldd	r24, Y+18	; 0x12
    239a:	9b 89       	ldd	r25, Y+19	; 0x13
    239c:	ac 89       	ldd	r26, Y+20	; 0x14
    239e:	bd 89       	ldd	r27, Y+21	; 0x15
    23a0:	89 2b       	or	r24, r25
    23a2:	8a 2b       	or	r24, r26
    23a4:	8b 2b       	or	r24, r27
    23a6:	41 f4       	brne	.+16     	; 0x23b8 <_ZN14OscillatorBase7setFreqEf+0xc2>
	m_increment = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	8a 8b       	std	Y+18, r24	; 0x12
    23b2:	9b 8b       	std	Y+19, r25	; 0x13
    23b4:	ac 8b       	std	Y+20, r26	; 0x14
    23b6:	bd 8b       	std	Y+21, r27	; 0x15
}
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	08 95       	ret

000023ca <_ZN14OscillatorBase4initEv>:
	init();
}

// Initializer function
void OscillatorBase::init()
{
    23ca:	fc 01       	movw	r30, r24
	m_sampleRate = 16384;
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e4       	ldi	r25, 0x40	; 64
    23d0:	93 83       	std	Z+3, r25	; 0x03
    23d2:	82 83       	std	Z+2, r24	; 0x02
	m_frequency = 440.0;
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	ac ed       	ldi	r26, 0xDC	; 220
    23da:	b3 e4       	ldi	r27, 0x43	; 67
    23dc:	84 83       	std	Z+4, r24	; 0x04
    23de:	95 83       	std	Z+5, r25	; 0x05
    23e0:	a6 83       	std	Z+6, r26	; 0x06
    23e2:	b7 83       	std	Z+7, r27	; 0x07
	m_maxAmp = 255;
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	91 87       	std	Z+9, r25	; 0x09
    23ea:	80 87       	std	Z+8, r24	; 0x08
	m_max32 = 4294967295UL;
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
    23ee:	9f ef       	ldi	r25, 0xFF	; 255
    23f0:	dc 01       	movw	r26, r24
    23f2:	82 87       	std	Z+10, r24	; 0x0a
    23f4:	93 87       	std	Z+11, r25	; 0x0b
    23f6:	a4 87       	std	Z+12, r26	; 0x0c
    23f8:	b5 87       	std	Z+13, r27	; 0x0d
	m_increment = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a0 e0       	ldi	r26, 0x00	; 0
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	82 8b       	std	Z+18, r24	; 0x12
    2404:	93 8b       	std	Z+19, r25	; 0x13
    2406:	a4 8b       	std	Z+20, r26	; 0x14
    2408:	b5 8b       	std	Z+21, r27	; 0x15
	m_accumulator = 0;
    240a:	16 86       	std	Z+14, r1	; 0x0e
    240c:	17 86       	std	Z+15, r1	; 0x0f
    240e:	10 8a       	std	Z+16, r1	; 0x10
    2410:	11 8a       	std	Z+17, r1	; 0x11
    2412:	08 95       	ret

00002414 <_ZN14OscillatorBaseC1Ev>:

#include "oscillator.h"

/* Base Oscillator Class Definitions */
// Default constructor
OscillatorBase::OscillatorBase()
    2414:	2e e2       	ldi	r18, 0x2E	; 46
    2416:	31 e0       	ldi	r19, 0x01	; 1
    2418:	fc 01       	movw	r30, r24
    241a:	31 83       	std	Z+1, r19	; 0x01
    241c:	20 83       	st	Z, r18
{
	// Initialize the oscillator
	init();
    241e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN14OscillatorBase4initEv>
    2422:	08 95       	ret

00002424 <_ZN14OscillatorBase13setSampleRateEj>:
}

// Set sample rate
void OscillatorBase::setSampleRate(uint16_t rate)
{
	m_sampleRate = rate;
    2424:	fc 01       	movw	r30, r24
    2426:	73 83       	std	Z+3, r23	; 0x03
    2428:	62 83       	std	Z+2, r22	; 0x02
    242a:	08 95       	ret

0000242c <__cmpsf2>:
    242c:	0e 94 1b 12 	call	0x2436	; 0x2436 <__fp_cmp>
    2430:	08 f4       	brcc	.+2      	; 0x2434 <__cmpsf2+0x8>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	08 95       	ret

00002436 <__fp_cmp>:
    2436:	99 0f       	add	r25, r25
    2438:	00 08       	sbc	r0, r0
    243a:	55 0f       	add	r21, r21
    243c:	aa 0b       	sbc	r26, r26
    243e:	e0 e8       	ldi	r30, 0x80	; 128
    2440:	fe ef       	ldi	r31, 0xFE	; 254
    2442:	16 16       	cp	r1, r22
    2444:	17 06       	cpc	r1, r23
    2446:	e8 07       	cpc	r30, r24
    2448:	f9 07       	cpc	r31, r25
    244a:	c0 f0       	brcs	.+48     	; 0x247c <__fp_cmp+0x46>
    244c:	12 16       	cp	r1, r18
    244e:	13 06       	cpc	r1, r19
    2450:	e4 07       	cpc	r30, r20
    2452:	f5 07       	cpc	r31, r21
    2454:	98 f0       	brcs	.+38     	; 0x247c <__fp_cmp+0x46>
    2456:	62 1b       	sub	r22, r18
    2458:	73 0b       	sbc	r23, r19
    245a:	84 0b       	sbc	r24, r20
    245c:	95 0b       	sbc	r25, r21
    245e:	39 f4       	brne	.+14     	; 0x246e <__fp_cmp+0x38>
    2460:	0a 26       	eor	r0, r26
    2462:	61 f0       	breq	.+24     	; 0x247c <__fp_cmp+0x46>
    2464:	23 2b       	or	r18, r19
    2466:	24 2b       	or	r18, r20
    2468:	25 2b       	or	r18, r21
    246a:	21 f4       	brne	.+8      	; 0x2474 <__fp_cmp+0x3e>
    246c:	08 95       	ret
    246e:	0a 26       	eor	r0, r26
    2470:	09 f4       	brne	.+2      	; 0x2474 <__fp_cmp+0x3e>
    2472:	a1 40       	sbci	r26, 0x01	; 1
    2474:	a6 95       	lsr	r26
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	81 1d       	adc	r24, r1
    247a:	81 1d       	adc	r24, r1
    247c:	08 95       	ret

0000247e <__tablejump2__>:
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	05 90       	lpm	r0, Z+
    2484:	f4 91       	lpm	r31, Z
    2486:	e0 2d       	mov	r30, r0
    2488:	09 94       	ijmp

0000248a <_exit>:
    248a:	f8 94       	cli

0000248c <__stop_program>:
    248c:	ff cf       	rjmp	.-2      	; 0x248c <__stop_program>
